diff --git a/.directory b/.directory
new file mode 100644
index 0000000..df5dbe1
--- /dev/null
+++ b/.directory
@@ -0,0 +1,6 @@
+[Dolphin]
+Timestamp=2019,4,28,14,56,40
+Version=4
+
+[Settings]
+HiddenFilesShown=true
diff --git a/.idea/Assignment2.iml b/.idea/Assignment2.iml
new file mode 100644
index 0000000..f08604b
--- /dev/null
+++ b/.idea/Assignment2.iml
@@ -0,0 +1,2 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module classpath="CMake" type="CPP_MODULE" version="4" />
\ No newline at end of file
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
index 0000000..8822db8
--- /dev/null
+++ b/.idea/misc.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CMakeWorkspace" PROJECT_DIR="$PROJECT_DIR$" />
+  <component name="JavaScriptSettings">
+    <option name="languageLevel" value="ES6" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
index 0000000..c955c07
--- /dev/null
+++ b/.idea/modules.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/Assignment2.iml" filepath="$PROJECT_DIR$/.idea/Assignment2.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
index 0000000..94a25f7
--- /dev/null
+++ b/.idea/vcs.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
new file mode 100644
index 0000000..b203f2a
--- /dev/null
+++ b/.idea/workspace.xml
@@ -0,0 +1,203 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CMakeRunConfigurationManager" shouldGenerate="true" shouldDeleteObsolete="true">
+    <generated>
+      <config projectName="Assignment2" targetName="Assignment2" />
+    </generated>
+  </component>
+  <component name="CMakeSettings">
+    <configurations>
+      <configuration PROFILE_NAME="Debug" CONFIG_NAME="Debug" />
+    </configurations>
+  </component>
+  <component name="ChangeListManager">
+    <list default="true" id="726b7b2e-506e-4371-9da0-c981d8c46112" name="Default Changelist" comment="">
+      <change beforePath="$PROJECT_DIR$/Makefile" beforeDir="false" afterPath="$PROJECT_DIR$/Makefile" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/cuth" beforeDir="false" afterPath="$PROJECT_DIR$/cuth" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/defs.h" beforeDir="false" afterPath="$PROJECT_DIR$/defs.h" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/dot-bochsrc" beforeDir="false" afterPath="$PROJECT_DIR$/dot-bochsrc" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/exec.c" beforeDir="false" afterPath="$PROJECT_DIR$/exec.c" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/kthread.h" beforeDir="false" afterPath="$PROJECT_DIR$/kthread.h" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pipe.c" beforeDir="false" afterPath="$PROJECT_DIR$/pipe.c" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/pr.pl" beforeDir="false" afterPath="$PROJECT_DIR$/pr.pl" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/printpcs" beforeDir="false" afterPath="$PROJECT_DIR$/printpcs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/proc.c" beforeDir="false" afterPath="$PROJECT_DIR$/proc.c" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/proc.h" beforeDir="false" afterPath="$PROJECT_DIR$/proc.h" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/runoff" beforeDir="false" afterPath="$PROJECT_DIR$/runoff" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/runoff1" beforeDir="false" afterPath="$PROJECT_DIR$/runoff1" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/show1" beforeDir="false" afterPath="$PROJECT_DIR$/show1" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/spinlock.c" beforeDir="false" afterPath="$PROJECT_DIR$/spinlock.c" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/spinp" beforeDir="false" afterPath="$PROJECT_DIR$/spinp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/syscall.c" beforeDir="false" afterPath="$PROJECT_DIR$/syscall.c" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/syscall.h" beforeDir="false" afterPath="$PROJECT_DIR$/syscall.h" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/sysproc.c" beforeDir="false" afterPath="$PROJECT_DIR$/sysproc.c" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/trap.c" beforeDir="false" afterPath="$PROJECT_DIR$/trap.c" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/user.h" beforeDir="false" afterPath="$PROJECT_DIR$/user.h" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/usys.S" beforeDir="false" afterPath="$PROJECT_DIR$/usys.S" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/vm.c" beforeDir="false" afterPath="$PROJECT_DIR$/vm.c" afterDir="false" />
+    </list>
+    <ignored path="$PROJECT_DIR$/cmake-build-debug/" />
+    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
+    <option name="SHOW_DIALOG" value="false" />
+    <option name="HIGHLIGHT_CONFLICTS" value="true" />
+    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
+    <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="ClangdSettings">
+    <option name="formatViaClangd" value="false" />
+  </component>
+  <component name="ExecutionTargetManager" SELECTED_TARGET="CMakeBuildProfile:Debug" />
+  <component name="FileEditorManager">
+    <leaf>
+      <file pinned="false" current-in-tab="true">
+        <entry file="file://$PROJECT_DIR$/sanity.c">
+          <provider selected="true" editor-type-id="text-editor">
+            <state relative-caret-position="229">
+              <caret line="100" selection-start-line="100" selection-end-line="100" />
+              <folding>
+                <element signature="e#0#18#0" expanded="true" />
+              </folding>
+            </state>
+          </provider>
+        </entry>
+      </file>
+    </leaf>
+  </component>
+  <component name="Git.Settings">
+    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+  </component>
+  <component name="IdeDocumentHistory">
+    <option name="CHANGED_PATHS">
+      <list>
+        <option value="$PROJECT_DIR$/tournament_tree.c" />
+        <option value="$PROJECT_DIR$/sanity.c" />
+      </list>
+    </option>
+  </component>
+  <component name="ProjectConfigurationFiles">
+    <option name="files">
+      <list>
+        <option value="$PROJECT_DIR$/.idea/Assignment2.iml" />
+        <option value="$PROJECT_DIR$/.idea/misc.xml" />
+        <option value="$PROJECT_DIR$/.idea/vcs.xml" />
+        <option value="$PROJECT_DIR$/.idea/modules.xml" />
+      </list>
+    </option>
+  </component>
+  <component name="ProjectFrameBounds" extendedState="6">
+    <option name="x" value="158" />
+    <option name="y" value="98" />
+    <option name="width" value="551" />
+    <option name="height" value="431" />
+  </component>
+  <component name="ProjectView">
+    <navigator proportions="" version="1">
+      <foldersAlwaysOnTop value="true" />
+    </navigator>
+    <panes>
+      <pane id="Scope" />
+      <pane id="ProjectPane">
+        <subPane>
+          <expand>
+            <path>
+              <item name="Assignment2" type="b2602c69:ProjectViewProjectNode" />
+              <item name="Assignment2" type="462c0819:PsiDirectoryNode" />
+            </path>
+          </expand>
+          <select />
+        </subPane>
+      </pane>
+    </panes>
+  </component>
+  <component name="PropertiesComponent">
+    <property name="WebServerToolWindowFactoryState" value="false" />
+    <property name="nodejs_interpreter_path.stuck_in_default_project" value="undefined stuck path" />
+    <property name="nodejs_npm_path_reset_for_default_project" value="true" />
+  </component>
+  <component name="RunDashboard">
+    <option name="ruleStates">
+      <list>
+        <RuleState>
+          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
+        </RuleState>
+        <RuleState>
+          <option name="name" value="StatusDashboardGroupingRule" />
+        </RuleState>
+      </list>
+    </option>
+  </component>
+  <component name="RunManager">
+    <configuration name="Assignment2" type="CMakeRunConfiguration" factoryName="Application" PASS_PARENT_ENVS_2="true" PROJECT_NAME="Assignment2" TARGET_NAME="Assignment2" CONFIG_NAME="Debug" RUN_TARGET_PROJECT_NAME="Assignment2" RUN_TARGET_NAME="Assignment2">
+      <method v="2">
+        <option name="com.jetbrains.cidr.execution.CidrBuildBeforeRunTaskProvider$BuildBeforeRunTask" enabled="true" />
+      </method>
+    </configuration>
+  </component>
+  <component name="SvnConfiguration">
+    <configuration />
+  </component>
+  <component name="TaskManager">
+    <task active="true" id="Default" summary="Default task">
+      <changelist id="726b7b2e-506e-4371-9da0-c981d8c46112" name="Default Changelist" comment="" />
+      <created>1556878971961</created>
+      <option name="number" value="Default" />
+      <option name="presentableId" value="Default" />
+      <updated>1556878971961</updated>
+      <workItem from="1556878973699" duration="149000" />
+    </task>
+    <servers />
+  </component>
+  <component name="TimeTrackingManager">
+    <option name="totallyTimeSpent" value="149000" />
+  </component>
+  <component name="ToolWindowManager">
+    <frame x="67" y="25" width="1613" height="1025" extended-state="6" />
+    <editor active="true" />
+    <layout>
+      <window_info id="Favorites" side_tool="true" />
+      <window_info active="true" content_ui="combo" id="Project" order="0" visible="true" weight="0.24952137" />
+      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
+      <window_info anchor="bottom" id="Database Changes" />
+      <window_info anchor="bottom" id="Version Control" />
+      <window_info anchor="bottom" id="Terminal" />
+      <window_info anchor="bottom" id="Event Log" side_tool="true" />
+      <window_info anchor="bottom" id="CMake" />
+      <window_info anchor="bottom" id="Message" order="0" />
+      <window_info anchor="bottom" id="Find" order="1" />
+      <window_info anchor="bottom" id="Run" order="2" />
+      <window_info anchor="bottom" id="Debug" order="3" weight="0.4" />
+      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
+      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
+      <window_info anchor="bottom" id="TODO" order="6" />
+      <window_info anchor="right" id="Database" />
+      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
+      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
+      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
+    </layout>
+  </component>
+  <component name="TypeScriptGeneratedFilesManager">
+    <option name="version" value="1" />
+  </component>
+  <component name="editorHistoryManager">
+    <entry file="file://$PROJECT_DIR$/CMakeLists.txt">
+      <provider selected="true" editor-type-id="text-editor" />
+    </entry>
+    <entry file="file://$PROJECT_DIR$/tournament_tree.c">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="334">
+          <caret line="29" column="25" selection-start-line="29" selection-start-column="25" selection-end-line="29" selection-end-column="25" />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/sanity.c">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="229">
+          <caret line="100" selection-start-line="100" selection-end-line="100" />
+          <folding>
+            <element signature="e#0#18#0" expanded="true" />
+          </folding>
+        </state>
+      </provider>
+    </entry>
+  </component>
+</project>
\ No newline at end of file
diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..0e0b578
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,82 @@
+cmake_minimum_required(VERSION 3.14)
+project(Assignment2 C)
+
+set(CMAKE_C_STANDARD 11)
+
+include_directories(.)
+
+add_executable(Assignment2
+        asm.h
+        bio.c
+        bootmain.c
+        buf.h
+        cat.c
+        console.c
+        date.h
+        defs.h
+        echo.c
+        elf.h
+        exec.c
+        fcntl.h
+        file.c
+        file.h
+        forktest.c
+        fs.c
+        fs.h
+        grep.c
+        ide.c
+        init.c
+        ioapic.c
+        kalloc.c
+        kbd.c
+        kbd.h
+        kill.c
+        kthread.h
+        lapic.c
+        ln.c
+        log.c
+        ls.c
+        main.c
+        memide.c
+        memlayout.h
+        mkdir.c
+        mkfs.c
+        mmu.h
+        mp.c
+        mp.h
+        param.h
+        picirq.c
+        pipe.c
+        printf.c
+        proc.c
+        proc.h
+        rm.c
+        sanity.c
+        sh.c
+        sleeplock.c
+        sleeplock.h
+        spinlock.c
+        spinlock.h
+        stat.h
+        stressfs.c
+        string.c
+        syscall.c
+        syscall.h
+        sysfile.c
+        sysproc.c
+        tournament_tree.c
+        tournament_tree.h
+        tournamet_tree.c
+        tournamet_tree.h
+        trap.c
+        traps.h
+        types.h
+        uart.c
+        ulib.c
+        umalloc.c
+        user.h
+        usertests.c
+        vm.c
+        wc.c
+        x86.h
+        zombie.c)
diff --git a/Makefile b/Makefile
index 3718622..e45b5ff 100644
--- a/Makefile
+++ b/Makefile
@@ -28,6 +28,8 @@ OBJS = \
 	vectors.o\
 	vm.o\
 
+
+
 # Cross-compiling (e.g., on Mac OS X)
 # TOOLPREFIX = i386-jos-elf
 
@@ -143,7 +145,7 @@ tags: $(OBJS) entryother.S _init
 vectors.S: vectors.pl
 	./vectors.pl > vectors.S
 
-ULIB = ulib.o usys.o printf.o umalloc.o
+ULIB = ulib.o usys.o printf.o umalloc.o tournament_tree.o
 
 _%: %.o $(ULIB)
 	$(LD) $(LDFLAGS) -N -e main -Ttext 0 -o $@ $^
@@ -181,6 +183,7 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_sanity\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -250,6 +253,8 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
+	tournament_tree.c\
+	sanity.c\
 	printf.c umalloc.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
diff --git a/cmake-build-debug/Assignment2.cbp b/cmake-build-debug/Assignment2.cbp
new file mode 100644
index 0000000..2c15508
--- /dev/null
+++ b/cmake-build-debug/Assignment2.cbp
@@ -0,0 +1,309 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<CodeBlocks_project_file>
+	<FileVersion major="1" minor="6"/>
+	<Project>
+		<Option title="Assignment2"/>
+		<Option makefile_is_custom="1"/>
+		<Option compiler="gcc"/>
+		<Option virtualFolders="CMake Files\;"/>
+		<Build>
+			<Target title="all">
+				<Option working_dir="/home/tamar/Documents/Assignment2/cmake-build-debug"/>
+				<Option type="4"/>
+				<MakeCommands>
+					<Build command="/usr/bin/make -f &quot;/home/tamar/Documents/Assignment2/cmake-build-debug/Makefile&quot;  VERBOSE=1 all"/>
+					<CompileFile command="/usr/bin/make -f &quot;/home/tamar/Documents/Assignment2/cmake-build-debug/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
+					<Clean command="/usr/bin/make -f &quot;/home/tamar/Documents/Assignment2/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
+					<DistClean command="/usr/bin/make -f &quot;/home/tamar/Documents/Assignment2/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
+				</MakeCommands>
+			</Target>
+			<Target title="rebuild_cache">
+				<Option working_dir="/home/tamar/Documents/Assignment2/cmake-build-debug"/>
+				<Option type="4"/>
+				<MakeCommands>
+					<Build command="/usr/bin/make -f &quot;/home/tamar/Documents/Assignment2/cmake-build-debug/Makefile&quot;  VERBOSE=1 rebuild_cache"/>
+					<CompileFile command="/usr/bin/make -f &quot;/home/tamar/Documents/Assignment2/cmake-build-debug/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
+					<Clean command="/usr/bin/make -f &quot;/home/tamar/Documents/Assignment2/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
+					<DistClean command="/usr/bin/make -f &quot;/home/tamar/Documents/Assignment2/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
+				</MakeCommands>
+			</Target>
+			<Target title="Assignment2">
+				<Option output="/home/tamar/Documents/Assignment2/cmake-build-debug/Assignment2" prefix_auto="0" extension_auto="0"/>
+				<Option working_dir="/home/tamar/Documents/Assignment2/cmake-build-debug"/>
+				<Option object_output="./"/>
+				<Option type="1"/>
+				<Option compiler="gcc"/>
+				<Compiler>
+					<Add directory="/home/tamar/Documents/Assignment2/."/>
+					<Add directory="/usr/lib/gcc/x86_64-linux-gnu/7/include"/>
+					<Add directory="/usr/local/include"/>
+					<Add directory="/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed"/>
+					<Add directory="/usr/include/x86_64-linux-gnu"/>
+					<Add directory="/usr/include"/>
+				</Compiler>
+				<MakeCommands>
+					<Build command="/usr/bin/make -f &quot;/home/tamar/Documents/Assignment2/cmake-build-debug/Makefile&quot;  VERBOSE=1 Assignment2"/>
+					<CompileFile command="/usr/bin/make -f &quot;/home/tamar/Documents/Assignment2/cmake-build-debug/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
+					<Clean command="/usr/bin/make -f &quot;/home/tamar/Documents/Assignment2/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
+					<DistClean command="/usr/bin/make -f &quot;/home/tamar/Documents/Assignment2/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
+				</MakeCommands>
+			</Target>
+			<Target title="Assignment2/fast">
+				<Option output="/home/tamar/Documents/Assignment2/cmake-build-debug/Assignment2" prefix_auto="0" extension_auto="0"/>
+				<Option working_dir="/home/tamar/Documents/Assignment2/cmake-build-debug"/>
+				<Option object_output="./"/>
+				<Option type="1"/>
+				<Option compiler="gcc"/>
+				<Compiler>
+					<Add directory="/home/tamar/Documents/Assignment2/."/>
+					<Add directory="/usr/lib/gcc/x86_64-linux-gnu/7/include"/>
+					<Add directory="/usr/local/include"/>
+					<Add directory="/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed"/>
+					<Add directory="/usr/include/x86_64-linux-gnu"/>
+					<Add directory="/usr/include"/>
+				</Compiler>
+				<MakeCommands>
+					<Build command="/usr/bin/make -f &quot;/home/tamar/Documents/Assignment2/cmake-build-debug/Makefile&quot;  VERBOSE=1 Assignment2/fast"/>
+					<CompileFile command="/usr/bin/make -f &quot;/home/tamar/Documents/Assignment2/cmake-build-debug/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
+					<Clean command="/usr/bin/make -f &quot;/home/tamar/Documents/Assignment2/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
+					<DistClean command="/usr/bin/make -f &quot;/home/tamar/Documents/Assignment2/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
+				</MakeCommands>
+			</Target>
+			<Target title="edit_cache">
+				<Option working_dir="/home/tamar/Documents/Assignment2/cmake-build-debug"/>
+				<Option type="4"/>
+				<MakeCommands>
+					<Build command="/usr/bin/make -f &quot;/home/tamar/Documents/Assignment2/cmake-build-debug/Makefile&quot;  VERBOSE=1 edit_cache"/>
+					<CompileFile command="/usr/bin/make -f &quot;/home/tamar/Documents/Assignment2/cmake-build-debug/Makefile&quot;  VERBOSE=1 &quot;$file&quot;"/>
+					<Clean command="/usr/bin/make -f &quot;/home/tamar/Documents/Assignment2/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
+					<DistClean command="/usr/bin/make -f &quot;/home/tamar/Documents/Assignment2/cmake-build-debug/Makefile&quot;  VERBOSE=1 clean"/>
+				</MakeCommands>
+			</Target>
+		</Build>
+		<Unit filename="/home/tamar/Documents/Assignment2/asm.h">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/bio.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/bootmain.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/buf.h">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/cat.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/console.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/date.h">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/defs.h">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/echo.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/elf.h">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/exec.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/fcntl.h">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/file.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/file.h">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/forktest.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/fs.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/fs.h">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/grep.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/ide.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/init.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/ioapic.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/kalloc.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/kbd.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/kbd.h">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/kill.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/kthread.h">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/lapic.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/ln.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/log.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/ls.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/main.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/memide.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/memlayout.h">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/mkdir.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/mkfs.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/mmu.h">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/mp.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/mp.h">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/param.h">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/picirq.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/pipe.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/printf.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/proc.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/proc.h">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/rm.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/sanity.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/sh.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/sleeplock.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/sleeplock.h">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/spinlock.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/spinlock.h">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/stat.h">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/stressfs.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/string.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/syscall.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/syscall.h">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/sysfile.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/sysproc.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/tournament_tree.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/tournament_tree.h">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/tournamet_tree.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/tournamet_tree.h">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/trap.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/traps.h">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/types.h">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/uart.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/ulib.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/umalloc.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/user.h">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/usertests.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/vm.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/wc.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/x86.h">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/zombie.c">
+			<Option target="Assignment2"/>
+		</Unit>
+		<Unit filename="/home/tamar/Documents/Assignment2/CMakeLists.txt">
+			<Option virtualFolder="CMake Files\"/>
+		</Unit>
+	</Project>
+</CodeBlocks_project_file>
diff --git a/cmake-build-debug/CMakeCache.txt b/cmake-build-debug/CMakeCache.txt
new file mode 100644
index 0000000..da40b3b
--- /dev/null
+++ b/cmake-build-debug/CMakeCache.txt
@@ -0,0 +1,334 @@
+# This is the CMakeCache file.
+# For build in directory: /home/tamar/Documents/Assignment2/cmake-build-debug
+# It was generated by CMake: /snap/clion/69/bin/cmake/linux/bin/cmake
+# You can edit this file to change values found and used by cmake.
+# If you do not want to change any of the values, simply exit the editor.
+# If you do want to change a value, simply edit, save, and exit the editor.
+# The syntax for the file is as follows:
+# KEY:TYPE=VALUE
+# KEY is the name of a variable in the cache.
+# TYPE is a hint to GUIs for the type of VALUE, DO NOT EDIT TYPE!.
+# VALUE is the current value for the KEY.
+
+########################
+# EXTERNAL cache entries
+########################
+
+//Value Computed by CMake
+Assignment2_BINARY_DIR:STATIC=/home/tamar/Documents/Assignment2/cmake-build-debug
+
+//Value Computed by CMake
+Assignment2_SOURCE_DIR:STATIC=/home/tamar/Documents/Assignment2
+
+//Path to a program.
+CMAKE_AR:FILEPATH=/usr/bin/ar
+
+//Choose the type of build, options are: None Debug Release RelWithDebInfo
+// MinSizeRel ...
+CMAKE_BUILD_TYPE:STRING=Debug
+
+//Id string of the compiler for the CodeBlocks IDE. Automatically
+// detected when left empty
+CMAKE_CODEBLOCKS_COMPILER_ID:STRING=
+
+//The CodeBlocks executable
+CMAKE_CODEBLOCKS_EXECUTABLE:FILEPATH=CMAKE_CODEBLOCKS_EXECUTABLE-NOTFOUND
+
+//Additional command line arguments when CodeBlocks invokes make.
+// Enter e.g. -j<some_number> to get parallel builds
+CMAKE_CODEBLOCKS_MAKE_ARGUMENTS:STRING=
+
+//Enable/Disable color output during build.
+CMAKE_COLOR_MAKEFILE:BOOL=ON
+
+//C compiler
+CMAKE_C_COMPILER:FILEPATH=/usr/bin/cc
+
+//A wrapper around 'ar' adding the appropriate '--plugin' option
+// for the GCC compiler
+CMAKE_C_COMPILER_AR:FILEPATH=/usr/bin/gcc-ar-7
+
+//A wrapper around 'ranlib' adding the appropriate '--plugin' option
+// for the GCC compiler
+CMAKE_C_COMPILER_RANLIB:FILEPATH=/usr/bin/gcc-ranlib-7
+
+//Flags used by the C compiler during all build types.
+CMAKE_C_FLAGS:STRING=
+
+//Flags used by the C compiler during DEBUG builds.
+CMAKE_C_FLAGS_DEBUG:STRING=-g
+
+//Flags used by the C compiler during MINSIZEREL builds.
+CMAKE_C_FLAGS_MINSIZEREL:STRING=-Os -DNDEBUG
+
+//Flags used by the C compiler during RELEASE builds.
+CMAKE_C_FLAGS_RELEASE:STRING=-O3 -DNDEBUG
+
+//Flags used by the C compiler during RELWITHDEBINFO builds.
+CMAKE_C_FLAGS_RELWITHDEBINFO:STRING=-O2 -g -DNDEBUG
+
+//Flags used by the linker during all build types.
+CMAKE_EXE_LINKER_FLAGS:STRING=
+
+//Flags used by the linker during DEBUG builds.
+CMAKE_EXE_LINKER_FLAGS_DEBUG:STRING=
+
+//Flags used by the linker during MINSIZEREL builds.
+CMAKE_EXE_LINKER_FLAGS_MINSIZEREL:STRING=
+
+//Flags used by the linker during RELEASE builds.
+CMAKE_EXE_LINKER_FLAGS_RELEASE:STRING=
+
+//Flags used by the linker during RELWITHDEBINFO builds.
+CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO:STRING=
+
+//Enable/Disable output of compile commands during generation.
+CMAKE_EXPORT_COMPILE_COMMANDS:BOOL=OFF
+
+//Install path prefix, prepended onto install directories.
+CMAKE_INSTALL_PREFIX:PATH=/usr/local
+
+//Path to a program.
+CMAKE_LINKER:FILEPATH=/usr/bin/ld
+
+//Path to a program.
+CMAKE_MAKE_PROGRAM:FILEPATH=/usr/bin/make
+
+//Flags used by the linker during the creation of modules during
+// all build types.
+CMAKE_MODULE_LINKER_FLAGS:STRING=
+
+//Flags used by the linker during the creation of modules during
+// DEBUG builds.
+CMAKE_MODULE_LINKER_FLAGS_DEBUG:STRING=
+
+//Flags used by the linker during the creation of modules during
+// MINSIZEREL builds.
+CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL:STRING=
+
+//Flags used by the linker during the creation of modules during
+// RELEASE builds.
+CMAKE_MODULE_LINKER_FLAGS_RELEASE:STRING=
+
+//Flags used by the linker during the creation of modules during
+// RELWITHDEBINFO builds.
+CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO:STRING=
+
+//Path to a program.
+CMAKE_NM:FILEPATH=/usr/bin/nm
+
+//Path to a program.
+CMAKE_OBJCOPY:FILEPATH=/usr/bin/objcopy
+
+//Path to a program.
+CMAKE_OBJDUMP:FILEPATH=/usr/bin/objdump
+
+//Value Computed by CMake
+CMAKE_PROJECT_DESCRIPTION:STATIC=
+
+//Value Computed by CMake
+CMAKE_PROJECT_HOMEPAGE_URL:STATIC=
+
+//Value Computed by CMake
+CMAKE_PROJECT_NAME:STATIC=Assignment2
+
+//Path to a program.
+CMAKE_RANLIB:FILEPATH=/usr/bin/ranlib
+
+//Flags used by the linker during the creation of shared libraries
+// during all build types.
+CMAKE_SHARED_LINKER_FLAGS:STRING=
+
+//Flags used by the linker during the creation of shared libraries
+// during DEBUG builds.
+CMAKE_SHARED_LINKER_FLAGS_DEBUG:STRING=
+
+//Flags used by the linker during the creation of shared libraries
+// during MINSIZEREL builds.
+CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL:STRING=
+
+//Flags used by the linker during the creation of shared libraries
+// during RELEASE builds.
+CMAKE_SHARED_LINKER_FLAGS_RELEASE:STRING=
+
+//Flags used by the linker during the creation of shared libraries
+// during RELWITHDEBINFO builds.
+CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO:STRING=
+
+//If set, runtime paths are not added when installing shared libraries,
+// but are added when building.
+CMAKE_SKIP_INSTALL_RPATH:BOOL=NO
+
+//If set, runtime paths are not added when using shared libraries.
+CMAKE_SKIP_RPATH:BOOL=NO
+
+//Flags used by the linker during the creation of static libraries
+// during all build types.
+CMAKE_STATIC_LINKER_FLAGS:STRING=
+
+//Flags used by the linker during the creation of static libraries
+// during DEBUG builds.
+CMAKE_STATIC_LINKER_FLAGS_DEBUG:STRING=
+
+//Flags used by the linker during the creation of static libraries
+// during MINSIZEREL builds.
+CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL:STRING=
+
+//Flags used by the linker during the creation of static libraries
+// during RELEASE builds.
+CMAKE_STATIC_LINKER_FLAGS_RELEASE:STRING=
+
+//Flags used by the linker during the creation of static libraries
+// during RELWITHDEBINFO builds.
+CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO:STRING=
+
+//Path to a program.
+CMAKE_STRIP:FILEPATH=/usr/bin/strip
+
+//If this value is on, makefiles will be generated without the
+// .SILENT directive, and all commands will be echoed to the console
+// during the make.  This is useful for debugging only. With Visual
+// Studio IDE projects all commands are done without /nologo.
+CMAKE_VERBOSE_MAKEFILE:BOOL=FALSE
+
+//Path to a program.
+ProcessorCount_cmd_getconf:FILEPATH=/usr/bin/getconf
+
+//Path to a program.
+ProcessorCount_cmd_sysctl:FILEPATH=/sbin/sysctl
+
+
+########################
+# INTERNAL cache entries
+########################
+
+//ADVANCED property for variable: CMAKE_AR
+CMAKE_AR-ADVANCED:INTERNAL=1
+//This is the directory where this CMakeCache.txt was created
+CMAKE_CACHEFILE_DIR:INTERNAL=/home/tamar/Documents/Assignment2/cmake-build-debug
+//Major version of cmake used to create the current loaded cache
+CMAKE_CACHE_MAJOR_VERSION:INTERNAL=3
+//Minor version of cmake used to create the current loaded cache
+CMAKE_CACHE_MINOR_VERSION:INTERNAL=14
+//Patch version of cmake used to create the current loaded cache
+CMAKE_CACHE_PATCH_VERSION:INTERNAL=2
+//ADVANCED property for variable: CMAKE_COLOR_MAKEFILE
+CMAKE_COLOR_MAKEFILE-ADVANCED:INTERNAL=1
+//Path to CMake executable.
+CMAKE_COMMAND:INTERNAL=/snap/clion/69/bin/cmake/linux/bin/cmake
+//Path to cpack program executable.
+CMAKE_CPACK_COMMAND:INTERNAL=/snap/clion/69/bin/cmake/linux/bin/cpack
+//Path to ctest program executable.
+CMAKE_CTEST_COMMAND:INTERNAL=/snap/clion/69/bin/cmake/linux/bin/ctest
+//ADVANCED property for variable: CMAKE_C_COMPILER
+CMAKE_C_COMPILER-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_C_COMPILER_AR
+CMAKE_C_COMPILER_AR-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_C_COMPILER_RANLIB
+CMAKE_C_COMPILER_RANLIB-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_C_FLAGS
+CMAKE_C_FLAGS-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_C_FLAGS_DEBUG
+CMAKE_C_FLAGS_DEBUG-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_C_FLAGS_MINSIZEREL
+CMAKE_C_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_C_FLAGS_RELEASE
+CMAKE_C_FLAGS_RELEASE-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_C_FLAGS_RELWITHDEBINFO
+CMAKE_C_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
+//Executable file format
+CMAKE_EXECUTABLE_FORMAT:INTERNAL=ELF
+//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS
+CMAKE_EXE_LINKER_FLAGS-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_DEBUG
+CMAKE_EXE_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_MINSIZEREL
+CMAKE_EXE_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_RELEASE
+CMAKE_EXE_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO
+CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_EXPORT_COMPILE_COMMANDS
+CMAKE_EXPORT_COMPILE_COMMANDS-ADVANCED:INTERNAL=1
+//Name of external makefile project generator.
+CMAKE_EXTRA_GENERATOR:INTERNAL=CodeBlocks
+//C compiler system defined macros
+CMAKE_EXTRA_GENERATOR_C_SYSTEM_DEFINED_MACROS:INTERNAL=__STDC__;1;__STDC_VERSION__;201112L;__STDC_UTF_16__;1;__STDC_UTF_32__;1;__STDC_HOSTED__;1;__GNUC__;7;__GNUC_MINOR__;3;__GNUC_PATCHLEVEL__;0;__VERSION__;"7.3.0";__ATOMIC_RELAXED;0;__ATOMIC_SEQ_CST;5;__ATOMIC_ACQUIRE;2;__ATOMIC_RELEASE;3;__ATOMIC_ACQ_REL;4;__ATOMIC_CONSUME;1;__pic__;2;__PIC__;2;__pie__;2;__PIE__;2;__FINITE_MATH_ONLY__;0;_LP64;1;__LP64__;1;__SIZEOF_INT__;4;__SIZEOF_LONG__;8;__SIZEOF_LONG_LONG__;8;__SIZEOF_SHORT__;2;__SIZEOF_FLOAT__;4;__SIZEOF_DOUBLE__;8;__SIZEOF_LONG_DOUBLE__;16;__SIZEOF_SIZE_T__;8;__CHAR_BIT__;8;__BIGGEST_ALIGNMENT__;16;__ORDER_LITTLE_ENDIAN__;1234;__ORDER_BIG_ENDIAN__;4321;__ORDER_PDP_ENDIAN__;3412;__BYTE_ORDER__;__ORDER_LITTLE_ENDIAN__;__FLOAT_WORD_ORDER__;__ORDER_LITTLE_ENDIAN__;__SIZEOF_POINTER__;8;__SIZE_TYPE__;long unsigned int;__PTRDIFF_TYPE__;long int;__WCHAR_TYPE__;int;__WINT_TYPE__;unsigned int;__INTMAX_TYPE__;long int;__UINTMAX_TYPE__;long unsigned int;__CHAR16_TYPE__;short unsigned int;__CHAR32_TYPE__;unsigned int;__SIG_ATOMIC_TYPE__;int;__INT8_TYPE__;signed char;__INT16_TYPE__;short int;__INT32_TYPE__;int;__INT64_TYPE__;long int;__UINT8_TYPE__;unsigned char;__UINT16_TYPE__;short unsigned int;__UINT32_TYPE__;unsigned int;__UINT64_TYPE__;long unsigned int;__INT_LEAST8_TYPE__;signed char;__INT_LEAST16_TYPE__;short int;__INT_LEAST32_TYPE__;int;__INT_LEAST64_TYPE__;long int;__UINT_LEAST8_TYPE__;unsigned char;__UINT_LEAST16_TYPE__;short unsigned int;__UINT_LEAST32_TYPE__;unsigned int;__UINT_LEAST64_TYPE__;long unsigned int;__INT_FAST8_TYPE__;signed char;__INT_FAST16_TYPE__;long int;__INT_FAST32_TYPE__;long int;__INT_FAST64_TYPE__;long int;__UINT_FAST8_TYPE__;unsigned char;__UINT_FAST16_TYPE__;long unsigned int;__UINT_FAST32_TYPE__;long unsigned int;__UINT_FAST64_TYPE__;long unsigned int;__INTPTR_TYPE__;long int;__UINTPTR_TYPE__;long unsigned int;__has_include(STR);__has_include__(STR);__has_include_next(STR);__has_include_next__(STR);__GXX_ABI_VERSION;1011;__SCHAR_MAX__;0x7f;__SHRT_MAX__;0x7fff;__INT_MAX__;0x7fffffff;__LONG_MAX__;0x7fffffffffffffffL;__LONG_LONG_MAX__;0x7fffffffffffffffLL;__WCHAR_MAX__;0x7fffffff;__WCHAR_MIN__;(-__WCHAR_MAX__ - 1);__WINT_MAX__;0xffffffffU;__WINT_MIN__;0U;__PTRDIFF_MAX__;0x7fffffffffffffffL;__SIZE_MAX__;0xffffffffffffffffUL;__SCHAR_WIDTH__;8;__SHRT_WIDTH__;16;__INT_WIDTH__;32;__LONG_WIDTH__;64;__LONG_LONG_WIDTH__;64;__WCHAR_WIDTH__;32;__WINT_WIDTH__;32;__PTRDIFF_WIDTH__;64;__SIZE_WIDTH__;64;__INTMAX_MAX__;0x7fffffffffffffffL;__INTMAX_C(c);c ## L;__UINTMAX_MAX__;0xffffffffffffffffUL;__UINTMAX_C(c);c ## UL;__INTMAX_WIDTH__;64;__SIG_ATOMIC_MAX__;0x7fffffff;__SIG_ATOMIC_MIN__;(-__SIG_ATOMIC_MAX__ - 1);__SIG_ATOMIC_WIDTH__;32;__INT8_MAX__;0x7f;__INT16_MAX__;0x7fff;__INT32_MAX__;0x7fffffff;__INT64_MAX__;0x7fffffffffffffffL;__UINT8_MAX__;0xff;__UINT16_MAX__;0xffff;__UINT32_MAX__;0xffffffffU;__UINT64_MAX__;0xffffffffffffffffUL;__INT_LEAST8_MAX__;0x7f;__INT8_C(c);c;__INT_LEAST8_WIDTH__;8;__INT_LEAST16_MAX__;0x7fff;__INT16_C(c);c;__INT_LEAST16_WIDTH__;16;__INT_LEAST32_MAX__;0x7fffffff;__INT32_C(c);c;__INT_LEAST32_WIDTH__;32;__INT_LEAST64_MAX__;0x7fffffffffffffffL;__INT64_C(c);c ## L;__INT_LEAST64_WIDTH__;64;__UINT_LEAST8_MAX__;0xff;__UINT8_C(c);c;__UINT_LEAST16_MAX__;0xffff;__UINT16_C(c);c;__UINT_LEAST32_MAX__;0xffffffffU;__UINT32_C(c);c ## U;__UINT_LEAST64_MAX__;0xffffffffffffffffUL;__UINT64_C(c);c ## UL;__INT_FAST8_MAX__;0x7f;__INT_FAST8_WIDTH__;8;__INT_FAST16_MAX__;0x7fffffffffffffffL;__INT_FAST16_WIDTH__;64;__INT_FAST32_MAX__;0x7fffffffffffffffL;__INT_FAST32_WIDTH__;64;__INT_FAST64_MAX__;0x7fffffffffffffffL;__INT_FAST64_WIDTH__;64;__UINT_FAST8_MAX__;0xff;__UINT_FAST16_MAX__;0xffffffffffffffffUL;__UINT_FAST32_MAX__;0xffffffffffffffffUL;__UINT_FAST64_MAX__;0xffffffffffffffffUL;__INTPTR_MAX__;0x7fffffffffffffffL;__INTPTR_WIDTH__;64;__UINTPTR_MAX__;0xffffffffffffffffUL;__GCC_IEC_559;2;__GCC_IEC_559_COMPLEX;2;__FLT_EVAL_METHOD__;0;__FLT_EVAL_METHOD_TS_18661_3__;0;__DEC_EVAL_METHOD__;2;__FLT_RADIX__;2;__FLT_MANT_DIG__;24;__FLT_DIG__;6;__FLT_MIN_EXP__;(-125);__FLT_MIN_10_EXP__;(-37);__FLT_MAX_EXP__;128;__FLT_MAX_10_EXP__;38;__FLT_DECIMAL_DIG__;9;__FLT_MAX__;3.40282346638528859811704183484516925e+38F;__FLT_MIN__;1.17549435082228750796873653722224568e-38F;__FLT_EPSILON__;1.19209289550781250000000000000000000e-7F;__FLT_DENORM_MIN__;1.40129846432481707092372958328991613e-45F;__FLT_HAS_DENORM__;1;__FLT_HAS_INFINITY__;1;__FLT_HAS_QUIET_NAN__;1;__DBL_MANT_DIG__;53;__DBL_DIG__;15;__DBL_MIN_EXP__;(-1021);__DBL_MIN_10_EXP__;(-307);__DBL_MAX_EXP__;1024;__DBL_MAX_10_EXP__;308;__DBL_DECIMAL_DIG__;17;__DBL_MAX__;((double)1.79769313486231570814527423731704357e+308L);__DBL_MIN__;((double)2.22507385850720138309023271733240406e-308L);__DBL_EPSILON__;((double)2.22044604925031308084726333618164062e-16L);__DBL_DENORM_MIN__;((double)4.94065645841246544176568792868221372e-324L);__DBL_HAS_DENORM__;1;__DBL_HAS_INFINITY__;1;__DBL_HAS_QUIET_NAN__;1;__LDBL_MANT_DIG__;64;__LDBL_DIG__;18;__LDBL_MIN_EXP__;(-16381);__LDBL_MIN_10_EXP__;(-4931);__LDBL_MAX_EXP__;16384;__LDBL_MAX_10_EXP__;4932;__DECIMAL_DIG__;21;__LDBL_DECIMAL_DIG__;21;__LDBL_MAX__;1.18973149535723176502126385303097021e+4932L;__LDBL_MIN__;3.36210314311209350626267781732175260e-4932L;__LDBL_EPSILON__;1.08420217248550443400745280086994171e-19L;__LDBL_DENORM_MIN__;3.64519953188247460252840593361941982e-4951L;__LDBL_HAS_DENORM__;1;__LDBL_HAS_INFINITY__;1;__LDBL_HAS_QUIET_NAN__;1;__FLT32_MANT_DIG__;24;__FLT32_DIG__;6;__FLT32_MIN_EXP__;(-125);__FLT32_MIN_10_EXP__;(-37);__FLT32_MAX_EXP__;128;__FLT32_MAX_10_EXP__;38;__FLT32_DECIMAL_DIG__;9;__FLT32_MAX__;3.40282346638528859811704183484516925e+38F32;__FLT32_MIN__;1.17549435082228750796873653722224568e-38F32;__FLT32_EPSILON__;1.19209289550781250000000000000000000e-7F32;__FLT32_DENORM_MIN__;1.40129846432481707092372958328991613e-45F32;__FLT32_HAS_DENORM__;1;__FLT32_HAS_INFINITY__;1;__FLT32_HAS_QUIET_NAN__;1;__FLT64_MANT_DIG__;53;__FLT64_DIG__;15;__FLT64_MIN_EXP__;(-1021);__FLT64_MIN_10_EXP__;(-307);__FLT64_MAX_EXP__;1024;__FLT64_MAX_10_EXP__;308;__FLT64_DECIMAL_DIG__;17;__FLT64_MAX__;1.79769313486231570814527423731704357e+308F64;__FLT64_MIN__;2.22507385850720138309023271733240406e-308F64;__FLT64_EPSILON__;2.22044604925031308084726333618164062e-16F64;__FLT64_DENORM_MIN__;4.94065645841246544176568792868221372e-324F64;__FLT64_HAS_DENORM__;1;__FLT64_HAS_INFINITY__;1;__FLT64_HAS_QUIET_NAN__;1;__FLT128_MANT_DIG__;113;__FLT128_DIG__;33;__FLT128_MIN_EXP__;(-16381);__FLT128_MIN_10_EXP__;(-4931);__FLT128_MAX_EXP__;16384;__FLT128_MAX_10_EXP__;4932;__FLT128_DECIMAL_DIG__;36;__FLT128_MAX__;1.18973149535723176508575932662800702e+4932F128;__FLT128_MIN__;3.36210314311209350626267781732175260e-4932F128;__FLT128_EPSILON__;1.92592994438723585305597794258492732e-34F128;__FLT128_DENORM_MIN__;6.47517511943802511092443895822764655e-4966F128;__FLT128_HAS_DENORM__;1;__FLT128_HAS_INFINITY__;1;__FLT128_HAS_QUIET_NAN__;1;__FLT32X_MANT_DIG__;53;__FLT32X_DIG__;15;__FLT32X_MIN_EXP__;(-1021);__FLT32X_MIN_10_EXP__;(-307);__FLT32X_MAX_EXP__;1024;__FLT32X_MAX_10_EXP__;308;__FLT32X_DECIMAL_DIG__;17;__FLT32X_MAX__;1.79769313486231570814527423731704357e+308F32x;__FLT32X_MIN__;2.22507385850720138309023271733240406e-308F32x;__FLT32X_EPSILON__;2.22044604925031308084726333618164062e-16F32x;__FLT32X_DENORM_MIN__;4.94065645841246544176568792868221372e-324F32x;__FLT32X_HAS_DENORM__;1;__FLT32X_HAS_INFINITY__;1;__FLT32X_HAS_QUIET_NAN__;1;__FLT64X_MANT_DIG__;64;__FLT64X_DIG__;18;__FLT64X_MIN_EXP__;(-16381);__FLT64X_MIN_10_EXP__;(-4931);__FLT64X_MAX_EXP__;16384;__FLT64X_MAX_10_EXP__;4932;__FLT64X_DECIMAL_DIG__;21;__FLT64X_MAX__;1.18973149535723176502126385303097021e+4932F64x;__FLT64X_MIN__;3.36210314311209350626267781732175260e-4932F64x;__FLT64X_EPSILON__;1.08420217248550443400745280086994171e-19F64x;__FLT64X_DENORM_MIN__;3.64519953188247460252840593361941982e-4951F64x;__FLT64X_HAS_DENORM__;1;__FLT64X_HAS_INFINITY__;1;__FLT64X_HAS_QUIET_NAN__;1;__DEC32_MANT_DIG__;7;__DEC32_MIN_EXP__;(-94);__DEC32_MAX_EXP__;97;__DEC32_MIN__;1E-95DF;__DEC32_MAX__;9.999999E96DF;__DEC32_EPSILON__;1E-6DF;__DEC32_SUBNORMAL_MIN__;0.000001E-95DF;__DEC64_MANT_DIG__;16;__DEC64_MIN_EXP__;(-382);__DEC64_MAX_EXP__;385;__DEC64_MIN__;1E-383DD;__DEC64_MAX__;9.999999999999999E384DD;__DEC64_EPSILON__;1E-15DD;__DEC64_SUBNORMAL_MIN__;0.000000000000001E-383DD;__DEC128_MANT_DIG__;34;__DEC128_MIN_EXP__;(-6142);__DEC128_MAX_EXP__;6145;__DEC128_MIN__;1E-6143DL;__DEC128_MAX__;9.999999999999999999999999999999999E6144DL;__DEC128_EPSILON__;1E-33DL;__DEC128_SUBNORMAL_MIN__;0.000000000000000000000000000000001E-6143DL;__REGISTER_PREFIX__; ;__USER_LABEL_PREFIX__; ;__GNUC_STDC_INLINE__;1;__NO_INLINE__;1;__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1;1;__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2;1;__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4;1;__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8;1;__GCC_ATOMIC_BOOL_LOCK_FREE;2;__GCC_ATOMIC_CHAR_LOCK_FREE;2;__GCC_ATOMIC_CHAR16_T_LOCK_FREE;2;__GCC_ATOMIC_CHAR32_T_LOCK_FREE;2;__GCC_ATOMIC_WCHAR_T_LOCK_FREE;2;__GCC_ATOMIC_SHORT_LOCK_FREE;2;__GCC_ATOMIC_INT_LOCK_FREE;2;__GCC_ATOMIC_LONG_LOCK_FREE;2;__GCC_ATOMIC_LLONG_LOCK_FREE;2;__GCC_ATOMIC_TEST_AND_SET_TRUEVAL;1;__GCC_ATOMIC_POINTER_LOCK_FREE;2;__GCC_HAVE_DWARF2_CFI_ASM;1;__PRAGMA_REDEFINE_EXTNAME;1;__SSP_STRONG__;3;__SIZEOF_INT128__;16;__SIZEOF_WCHAR_T__;4;__SIZEOF_WINT_T__;4;__SIZEOF_PTRDIFF_T__;8;__amd64;1;__amd64__;1;__x86_64;1;__x86_64__;1;__SIZEOF_FLOAT80__;16;__SIZEOF_FLOAT128__;16;__ATOMIC_HLE_ACQUIRE;65536;__ATOMIC_HLE_RELEASE;131072;__GCC_ASM_FLAG_OUTPUTS__;1;__k8;1;__k8__;1;__code_model_small__;1;__MMX__;1;__SSE__;1;__SSE2__;1;__FXSR__;1;__SSE_MATH__;1;__SSE2_MATH__;1;__SEG_FS;1;__SEG_GS;1;__gnu_linux__;1;__linux;1;__linux__;1;linux;1;__unix;1;__unix__;1;unix;1;__ELF__;1;__DECIMAL_BID_FORMAT__;1;_STDC_PREDEF_H;1;__STDC_IEC_559__;1;__STDC_IEC_559_COMPLEX__;1;__STDC_ISO_10646__;201706L;__STDC_NO_THREADS__;1
+//C compiler system include directories
+CMAKE_EXTRA_GENERATOR_C_SYSTEM_INCLUDE_DIRS:INTERNAL=/usr/lib/gcc/x86_64-linux-gnu/7/include;/usr/local/include;/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed;/usr/include/x86_64-linux-gnu;/usr/include
+//Name of generator.
+CMAKE_GENERATOR:INTERNAL=Unix Makefiles
+//Generator instance identifier.
+CMAKE_GENERATOR_INSTANCE:INTERNAL=
+//Name of generator platform.
+CMAKE_GENERATOR_PLATFORM:INTERNAL=
+//Name of generator toolset.
+CMAKE_GENERATOR_TOOLSET:INTERNAL=
+//Source directory with the top level CMakeLists.txt file for this
+// project
+CMAKE_HOME_DIRECTORY:INTERNAL=/home/tamar/Documents/Assignment2
+//Install .so files without execute permission.
+CMAKE_INSTALL_SO_NO_EXE:INTERNAL=1
+//ADVANCED property for variable: CMAKE_LINKER
+CMAKE_LINKER-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_MAKE_PROGRAM
+CMAKE_MAKE_PROGRAM-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS
+CMAKE_MODULE_LINKER_FLAGS-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_DEBUG
+CMAKE_MODULE_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL
+CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_RELEASE
+CMAKE_MODULE_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO
+CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_NM
+CMAKE_NM-ADVANCED:INTERNAL=1
+//number of local generators
+CMAKE_NUMBER_OF_MAKEFILES:INTERNAL=1
+//ADVANCED property for variable: CMAKE_OBJCOPY
+CMAKE_OBJCOPY-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_OBJDUMP
+CMAKE_OBJDUMP-ADVANCED:INTERNAL=1
+//Platform information initialized
+CMAKE_PLATFORM_INFO_INITIALIZED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_RANLIB
+CMAKE_RANLIB-ADVANCED:INTERNAL=1
+//Path to CMake installation.
+CMAKE_ROOT:INTERNAL=/snap/clion/69/bin/cmake/linux/share/cmake-3.14
+//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS
+CMAKE_SHARED_LINKER_FLAGS-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_DEBUG
+CMAKE_SHARED_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL
+CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_RELEASE
+CMAKE_SHARED_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO
+CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_SKIP_INSTALL_RPATH
+CMAKE_SKIP_INSTALL_RPATH-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_SKIP_RPATH
+CMAKE_SKIP_RPATH-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS
+CMAKE_STATIC_LINKER_FLAGS-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_DEBUG
+CMAKE_STATIC_LINKER_FLAGS_DEBUG-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL
+CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_RELEASE
+CMAKE_STATIC_LINKER_FLAGS_RELEASE-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO
+CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: CMAKE_STRIP
+CMAKE_STRIP-ADVANCED:INTERNAL=1
+//uname command
+CMAKE_UNAME:INTERNAL=/bin/uname
+//ADVANCED property for variable: CMAKE_VERBOSE_MAKEFILE
+CMAKE_VERBOSE_MAKEFILE-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: ProcessorCount_cmd_getconf
+ProcessorCount_cmd_getconf-ADVANCED:INTERNAL=1
+//ADVANCED property for variable: ProcessorCount_cmd_sysctl
+ProcessorCount_cmd_sysctl-ADVANCED:INTERNAL=1
+
diff --git a/cmake-build-debug/CMakeFiles/3.14.2/CMakeCCompiler.cmake b/cmake-build-debug/CMakeFiles/3.14.2/CMakeCCompiler.cmake
new file mode 100644
index 0000000..4b4ac8d
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/3.14.2/CMakeCCompiler.cmake
@@ -0,0 +1,75 @@
+set(CMAKE_C_COMPILER "/usr/bin/cc")
+set(CMAKE_C_COMPILER_ARG1 "")
+set(CMAKE_C_COMPILER_ID "GNU")
+set(CMAKE_C_COMPILER_VERSION "7.3.0")
+set(CMAKE_C_COMPILER_VERSION_INTERNAL "")
+set(CMAKE_C_COMPILER_WRAPPER "")
+set(CMAKE_C_STANDARD_COMPUTED_DEFAULT "11")
+set(CMAKE_C_COMPILE_FEATURES "c_std_90;c_function_prototypes;c_std_99;c_restrict;c_variadic_macros;c_std_11;c_static_assert")
+set(CMAKE_C90_COMPILE_FEATURES "c_std_90;c_function_prototypes")
+set(CMAKE_C99_COMPILE_FEATURES "c_std_99;c_restrict;c_variadic_macros")
+set(CMAKE_C11_COMPILE_FEATURES "c_std_11;c_static_assert")
+
+set(CMAKE_C_PLATFORM_ID "Linux")
+set(CMAKE_C_SIMULATE_ID "")
+set(CMAKE_C_SIMULATE_VERSION "")
+
+
+
+set(CMAKE_AR "/usr/bin/ar")
+set(CMAKE_C_COMPILER_AR "/usr/bin/gcc-ar-7")
+set(CMAKE_RANLIB "/usr/bin/ranlib")
+set(CMAKE_C_COMPILER_RANLIB "/usr/bin/gcc-ranlib-7")
+set(CMAKE_LINKER "/usr/bin/ld")
+set(CMAKE_MT "")
+set(CMAKE_COMPILER_IS_GNUCC 1)
+set(CMAKE_C_COMPILER_LOADED 1)
+set(CMAKE_C_COMPILER_WORKS TRUE)
+set(CMAKE_C_ABI_COMPILED TRUE)
+set(CMAKE_COMPILER_IS_MINGW )
+set(CMAKE_COMPILER_IS_CYGWIN )
+if(CMAKE_COMPILER_IS_CYGWIN)
+  set(CYGWIN 1)
+  set(UNIX 1)
+endif()
+
+set(CMAKE_C_COMPILER_ENV_VAR "CC")
+
+if(CMAKE_COMPILER_IS_MINGW)
+  set(MINGW 1)
+endif()
+set(CMAKE_C_COMPILER_ID_RUN 1)
+set(CMAKE_C_SOURCE_FILE_EXTENSIONS c;m)
+set(CMAKE_C_IGNORE_EXTENSIONS h;H;o;O;obj;OBJ;def;DEF;rc;RC)
+set(CMAKE_C_LINKER_PREFERENCE 10)
+
+# Save compiler ABI information.
+set(CMAKE_C_SIZEOF_DATA_PTR "8")
+set(CMAKE_C_COMPILER_ABI "ELF")
+set(CMAKE_C_LIBRARY_ARCHITECTURE "x86_64-linux-gnu")
+
+if(CMAKE_C_SIZEOF_DATA_PTR)
+  set(CMAKE_SIZEOF_VOID_P "${CMAKE_C_SIZEOF_DATA_PTR}")
+endif()
+
+if(CMAKE_C_COMPILER_ABI)
+  set(CMAKE_INTERNAL_PLATFORM_ABI "${CMAKE_C_COMPILER_ABI}")
+endif()
+
+if(CMAKE_C_LIBRARY_ARCHITECTURE)
+  set(CMAKE_LIBRARY_ARCHITECTURE "x86_64-linux-gnu")
+endif()
+
+set(CMAKE_C_CL_SHOWINCLUDES_PREFIX "")
+if(CMAKE_C_CL_SHOWINCLUDES_PREFIX)
+  set(CMAKE_CL_SHOWINCLUDES_PREFIX "${CMAKE_C_CL_SHOWINCLUDES_PREFIX}")
+endif()
+
+
+
+
+
+set(CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES "/usr/lib/gcc/x86_64-linux-gnu/7/include;/usr/local/include;/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed;/usr/include/x86_64-linux-gnu;/usr/include")
+set(CMAKE_C_IMPLICIT_LINK_LIBRARIES "gcc;gcc_s;c;gcc;gcc_s")
+set(CMAKE_C_IMPLICIT_LINK_DIRECTORIES "/usr/lib/gcc/x86_64-linux-gnu/7;/usr/lib/x86_64-linux-gnu;/usr/lib;/lib/x86_64-linux-gnu;/lib")
+set(CMAKE_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES "")
diff --git a/cmake-build-debug/CMakeFiles/3.14.2/CMakeDetermineCompilerABI_C.bin b/cmake-build-debug/CMakeFiles/3.14.2/CMakeDetermineCompilerABI_C.bin
new file mode 100755
index 0000000..bd61e49
Binary files /dev/null and b/cmake-build-debug/CMakeFiles/3.14.2/CMakeDetermineCompilerABI_C.bin differ
diff --git a/cmake-build-debug/CMakeFiles/3.14.2/CMakeSystem.cmake b/cmake-build-debug/CMakeFiles/3.14.2/CMakeSystem.cmake
new file mode 100644
index 0000000..f40d0f4
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/3.14.2/CMakeSystem.cmake
@@ -0,0 +1,15 @@
+set(CMAKE_HOST_SYSTEM "Linux-4.18.0-17-generic")
+set(CMAKE_HOST_SYSTEM_NAME "Linux")
+set(CMAKE_HOST_SYSTEM_VERSION "4.18.0-17-generic")
+set(CMAKE_HOST_SYSTEM_PROCESSOR "x86_64")
+
+
+
+set(CMAKE_SYSTEM "Linux-4.18.0-17-generic")
+set(CMAKE_SYSTEM_NAME "Linux")
+set(CMAKE_SYSTEM_VERSION "4.18.0-17-generic")
+set(CMAKE_SYSTEM_PROCESSOR "x86_64")
+
+set(CMAKE_CROSSCOMPILING "FALSE")
+
+set(CMAKE_SYSTEM_LOADED 1)
diff --git a/cmake-build-debug/CMakeFiles/3.14.2/CompilerIdC/CMakeCCompilerId.c b/cmake-build-debug/CMakeFiles/3.14.2/CompilerIdC/CMakeCCompilerId.c
new file mode 100644
index 0000000..e712b0d
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/3.14.2/CompilerIdC/CMakeCCompilerId.c
@@ -0,0 +1,659 @@
+#ifdef __cplusplus
+# error "A C++ compiler has been selected for C."
+#endif
+
+#if defined(__18CXX)
+# define ID_VOID_MAIN
+#endif
+#if defined(__CLASSIC_C__)
+/* cv-qualifiers did not exist in K&R C */
+# define const
+# define volatile
+#endif
+
+
+/* Version number components: V=Version, R=Revision, P=Patch
+   Version date components:   YYYY=Year, MM=Month,   DD=Day  */
+
+#if defined(__INTEL_COMPILER) || defined(__ICC)
+# define COMPILER_ID "Intel"
+# if defined(_MSC_VER)
+#  define SIMULATE_ID "MSVC"
+# endif
+  /* __INTEL_COMPILER = VRP */
+# define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)
+# define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)
+# if defined(__INTEL_COMPILER_UPDATE)
+#  define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER_UPDATE)
+# else
+#  define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)
+# endif
+# if defined(__INTEL_COMPILER_BUILD_DATE)
+  /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
+#  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)
+# endif
+# if defined(_MSC_VER)
+   /* _MSC_VER = VVRR */
+#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
+#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
+# endif
+
+#elif defined(__PATHCC__)
+# define COMPILER_ID "PathScale"
+# define COMPILER_VERSION_MAJOR DEC(__PATHCC__)
+# define COMPILER_VERSION_MINOR DEC(__PATHCC_MINOR__)
+# if defined(__PATHCC_PATCHLEVEL__)
+#  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)
+# endif
+
+#elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)
+# define COMPILER_ID "Embarcadero"
+# define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)
+# define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)
+# define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__     & 0xFFFF)
+
+#elif defined(__BORLANDC__)
+# define COMPILER_ID "Borland"
+  /* __BORLANDC__ = 0xVRR */
+# define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)
+# define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)
+
+#elif defined(__WATCOMC__) && __WATCOMC__ < 1200
+# define COMPILER_ID "Watcom"
+   /* __WATCOMC__ = VVRR */
+# define COMPILER_VERSION_MAJOR DEC(__WATCOMC__ / 100)
+# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
+# if (__WATCOMC__ % 10) > 0
+#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
+# endif
+
+#elif defined(__WATCOMC__)
+# define COMPILER_ID "OpenWatcom"
+   /* __WATCOMC__ = VVRP + 1100 */
+# define COMPILER_VERSION_MAJOR DEC((__WATCOMC__ - 1100) / 100)
+# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
+# if (__WATCOMC__ % 10) > 0
+#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
+# endif
+
+#elif defined(__SUNPRO_C)
+# define COMPILER_ID "SunPro"
+# if __SUNPRO_C >= 0x5100
+   /* __SUNPRO_C = 0xVRRP */
+#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_C>>12)
+#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_C>>4 & 0xFF)
+#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_C    & 0xF)
+# else
+   /* __SUNPRO_CC = 0xVRP */
+#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_C>>8)
+#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_C>>4 & 0xF)
+#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_C    & 0xF)
+# endif
+
+#elif defined(__HP_cc)
+# define COMPILER_ID "HP"
+  /* __HP_cc = VVRRPP */
+# define COMPILER_VERSION_MAJOR DEC(__HP_cc/10000)
+# define COMPILER_VERSION_MINOR DEC(__HP_cc/100 % 100)
+# define COMPILER_VERSION_PATCH DEC(__HP_cc     % 100)
+
+#elif defined(__DECC)
+# define COMPILER_ID "Compaq"
+  /* __DECC_VER = VVRRTPPPP */
+# define COMPILER_VERSION_MAJOR DEC(__DECC_VER/10000000)
+# define COMPILER_VERSION_MINOR DEC(__DECC_VER/100000  % 100)
+# define COMPILER_VERSION_PATCH DEC(__DECC_VER         % 10000)
+
+#elif defined(__IBMC__) && defined(__COMPILER_VER__)
+# define COMPILER_ID "zOS"
+# if defined(__ibmxl__)
+#  define COMPILER_VERSION_MAJOR DEC(__ibmxl_version__)
+#  define COMPILER_VERSION_MINOR DEC(__ibmxl_release__)
+#  define COMPILER_VERSION_PATCH DEC(__ibmxl_modification__)
+#  define COMPILER_VERSION_TWEAK DEC(__ibmxl_ptf_fix_level__)
+# else
+   /* __IBMC__ = VRP */
+#  define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)
+#  define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)
+#  define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)
+# endif
+
+
+#elif defined(__ibmxl__) || (defined(__IBMC__) && !defined(__COMPILER_VER__) && __IBMC__ >= 800)
+# define COMPILER_ID "XL"
+# if defined(__ibmxl__)
+#  define COMPILER_VERSION_MAJOR DEC(__ibmxl_version__)
+#  define COMPILER_VERSION_MINOR DEC(__ibmxl_release__)
+#  define COMPILER_VERSION_PATCH DEC(__ibmxl_modification__)
+#  define COMPILER_VERSION_TWEAK DEC(__ibmxl_ptf_fix_level__)
+# else
+   /* __IBMC__ = VRP */
+#  define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)
+#  define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)
+#  define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)
+# endif
+
+
+#elif defined(__IBMC__) && !defined(__COMPILER_VER__) && __IBMC__ < 800
+# define COMPILER_ID "VisualAge"
+# if defined(__ibmxl__)
+#  define COMPILER_VERSION_MAJOR DEC(__ibmxl_version__)
+#  define COMPILER_VERSION_MINOR DEC(__ibmxl_release__)
+#  define COMPILER_VERSION_PATCH DEC(__ibmxl_modification__)
+#  define COMPILER_VERSION_TWEAK DEC(__ibmxl_ptf_fix_level__)
+# else
+   /* __IBMC__ = VRP */
+#  define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)
+#  define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)
+#  define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)
+# endif
+
+
+#elif defined(__PGI)
+# define COMPILER_ID "PGI"
+# define COMPILER_VERSION_MAJOR DEC(__PGIC__)
+# define COMPILER_VERSION_MINOR DEC(__PGIC_MINOR__)
+# if defined(__PGIC_PATCHLEVEL__)
+#  define COMPILER_VERSION_PATCH DEC(__PGIC_PATCHLEVEL__)
+# endif
+
+#elif defined(_CRAYC)
+# define COMPILER_ID "Cray"
+# define COMPILER_VERSION_MAJOR DEC(_RELEASE_MAJOR)
+# define COMPILER_VERSION_MINOR DEC(_RELEASE_MINOR)
+
+#elif defined(__TI_COMPILER_VERSION__)
+# define COMPILER_ID "TI"
+  /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
+# define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__/1000000)
+# define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__/1000   % 1000)
+# define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__        % 1000)
+
+#elif defined(__FUJITSU) || defined(__FCC_VERSION) || defined(__fcc_version)
+# define COMPILER_ID "Fujitsu"
+
+#elif defined(__ghs__)
+# define COMPILER_ID "GHS"
+/* __GHS_VERSION_NUMBER = VVVVRP */
+# ifdef __GHS_VERSION_NUMBER
+# define COMPILER_VERSION_MAJOR DEC(__GHS_VERSION_NUMBER / 100)
+# define COMPILER_VERSION_MINOR DEC(__GHS_VERSION_NUMBER / 10 % 10)
+# define COMPILER_VERSION_PATCH DEC(__GHS_VERSION_NUMBER      % 10)
+# endif
+
+#elif defined(__TINYC__)
+# define COMPILER_ID "TinyCC"
+
+#elif defined(__BCC__)
+# define COMPILER_ID "Bruce"
+
+#elif defined(__SCO_VERSION__)
+# define COMPILER_ID "SCO"
+
+#elif defined(__ARMCC_VERSION) && !defined(__clang__)
+# define COMPILER_ID "ARMCC"
+#if __ARMCC_VERSION >= 1000000
+  /* __ARMCC_VERSION = VRRPPPP */
+  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/1000000)
+  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 100)
+  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION     % 10000)
+#else
+  /* __ARMCC_VERSION = VRPPPP */
+  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/100000)
+  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)
+  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)
+#endif
+
+
+#elif defined(__clang__) && defined(__apple_build_version__)
+# define COMPILER_ID "AppleClang"
+# if defined(_MSC_VER)
+#  define SIMULATE_ID "MSVC"
+# endif
+# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
+# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
+# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
+# if defined(_MSC_VER)
+   /* _MSC_VER = VVRR */
+#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
+#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
+# endif
+# define COMPILER_VERSION_TWEAK DEC(__apple_build_version__)
+
+#elif defined(__clang__)
+# define COMPILER_ID "Clang"
+# if defined(_MSC_VER)
+#  define SIMULATE_ID "MSVC"
+# endif
+# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
+# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
+# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
+# if defined(_MSC_VER)
+   /* _MSC_VER = VVRR */
+#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
+#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
+# endif
+
+#elif defined(__GNUC__)
+# define COMPILER_ID "GNU"
+# define COMPILER_VERSION_MAJOR DEC(__GNUC__)
+# if defined(__GNUC_MINOR__)
+#  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)
+# endif
+# if defined(__GNUC_PATCHLEVEL__)
+#  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
+# endif
+
+#elif defined(_MSC_VER)
+# define COMPILER_ID "MSVC"
+  /* _MSC_VER = VVRR */
+# define COMPILER_VERSION_MAJOR DEC(_MSC_VER / 100)
+# define COMPILER_VERSION_MINOR DEC(_MSC_VER % 100)
+# if defined(_MSC_FULL_VER)
+#  if _MSC_VER >= 1400
+    /* _MSC_FULL_VER = VVRRPPPPP */
+#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 100000)
+#  else
+    /* _MSC_FULL_VER = VVRRPPPP */
+#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)
+#  endif
+# endif
+# if defined(_MSC_BUILD)
+#  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)
+# endif
+
+#elif defined(__VISUALDSPVERSION__) || defined(__ADSPBLACKFIN__) || defined(__ADSPTS__) || defined(__ADSP21000__)
+# define COMPILER_ID "ADSP"
+#if defined(__VISUALDSPVERSION__)
+  /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
+# define COMPILER_VERSION_MAJOR HEX(__VISUALDSPVERSION__>>24)
+# define COMPILER_VERSION_MINOR HEX(__VISUALDSPVERSION__>>16 & 0xFF)
+# define COMPILER_VERSION_PATCH HEX(__VISUALDSPVERSION__>>8  & 0xFF)
+#endif
+
+#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
+# define COMPILER_ID "IAR"
+# if defined(__VER__) && defined(__ICCARM__)
+#  define COMPILER_VERSION_MAJOR DEC((__VER__) / 1000000)
+#  define COMPILER_VERSION_MINOR DEC(((__VER__) / 1000) % 1000)
+#  define COMPILER_VERSION_PATCH DEC((__VER__) % 1000)
+#  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
+# elif defined(__VER__) && defined(__ICCAVR__)
+#  define COMPILER_VERSION_MAJOR DEC((__VER__) / 100)
+#  define COMPILER_VERSION_MINOR DEC((__VER__) - (((__VER__) / 100)*100))
+#  define COMPILER_VERSION_PATCH DEC(__SUBVERSION__)
+#  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
+# endif
+
+#elif defined(__SDCC_VERSION_MAJOR) || defined(SDCC)
+# define COMPILER_ID "SDCC"
+# if defined(__SDCC_VERSION_MAJOR)
+#  define COMPILER_VERSION_MAJOR DEC(__SDCC_VERSION_MAJOR)
+#  define COMPILER_VERSION_MINOR DEC(__SDCC_VERSION_MINOR)
+#  define COMPILER_VERSION_PATCH DEC(__SDCC_VERSION_PATCH)
+# else
+  /* SDCC = VRP */
+#  define COMPILER_VERSION_MAJOR DEC(SDCC/100)
+#  define COMPILER_VERSION_MINOR DEC(SDCC/10 % 10)
+#  define COMPILER_VERSION_PATCH DEC(SDCC    % 10)
+# endif
+
+#elif defined(_SGI_COMPILER_VERSION) || defined(_COMPILER_VERSION)
+# define COMPILER_ID "MIPSpro"
+# if defined(_SGI_COMPILER_VERSION)
+  /* _SGI_COMPILER_VERSION = VRP */
+#  define COMPILER_VERSION_MAJOR DEC(_SGI_COMPILER_VERSION/100)
+#  define COMPILER_VERSION_MINOR DEC(_SGI_COMPILER_VERSION/10 % 10)
+#  define COMPILER_VERSION_PATCH DEC(_SGI_COMPILER_VERSION    % 10)
+# else
+  /* _COMPILER_VERSION = VRP */
+#  define COMPILER_VERSION_MAJOR DEC(_COMPILER_VERSION/100)
+#  define COMPILER_VERSION_MINOR DEC(_COMPILER_VERSION/10 % 10)
+#  define COMPILER_VERSION_PATCH DEC(_COMPILER_VERSION    % 10)
+# endif
+
+
+/* These compilers are either not known or too old to define an
+  identification macro.  Try to identify the platform and guess that
+  it is the native compiler.  */
+#elif defined(__hpux) || defined(__hpua)
+# define COMPILER_ID "HP"
+
+#else /* unknown compiler */
+# define COMPILER_ID ""
+#endif
+
+/* Construct the string literal in pieces to prevent the source from
+   getting matched.  Store it in a pointer rather than an array
+   because some compilers will just produce instructions to fill the
+   array rather than assigning a pointer to a static array.  */
+char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
+#ifdef SIMULATE_ID
+char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";
+#endif
+
+#ifdef __QNXNTO__
+char const* qnxnto = "INFO" ":" "qnxnto[]";
+#endif
+
+#if defined(__CRAYXE) || defined(__CRAYXC)
+char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";
+#endif
+
+#define STRINGIFY_HELPER(X) #X
+#define STRINGIFY(X) STRINGIFY_HELPER(X)
+
+/* Identify known platforms by name.  */
+#if defined(__linux) || defined(__linux__) || defined(linux)
+# define PLATFORM_ID "Linux"
+
+#elif defined(__CYGWIN__)
+# define PLATFORM_ID "Cygwin"
+
+#elif defined(__MINGW32__)
+# define PLATFORM_ID "MinGW"
+
+#elif defined(__APPLE__)
+# define PLATFORM_ID "Darwin"
+
+#elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)
+# define PLATFORM_ID "Windows"
+
+#elif defined(__FreeBSD__) || defined(__FreeBSD)
+# define PLATFORM_ID "FreeBSD"
+
+#elif defined(__NetBSD__) || defined(__NetBSD)
+# define PLATFORM_ID "NetBSD"
+
+#elif defined(__OpenBSD__) || defined(__OPENBSD)
+# define PLATFORM_ID "OpenBSD"
+
+#elif defined(__sun) || defined(sun)
+# define PLATFORM_ID "SunOS"
+
+#elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)
+# define PLATFORM_ID "AIX"
+
+#elif defined(__hpux) || defined(__hpux__)
+# define PLATFORM_ID "HP-UX"
+
+#elif defined(__HAIKU__)
+# define PLATFORM_ID "Haiku"
+
+#elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)
+# define PLATFORM_ID "BeOS"
+
+#elif defined(__QNX__) || defined(__QNXNTO__)
+# define PLATFORM_ID "QNX"
+
+#elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)
+# define PLATFORM_ID "Tru64"
+
+#elif defined(__riscos) || defined(__riscos__)
+# define PLATFORM_ID "RISCos"
+
+#elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)
+# define PLATFORM_ID "SINIX"
+
+#elif defined(__UNIX_SV__)
+# define PLATFORM_ID "UNIX_SV"
+
+#elif defined(__bsdos__)
+# define PLATFORM_ID "BSDOS"
+
+#elif defined(_MPRAS) || defined(MPRAS)
+# define PLATFORM_ID "MP-RAS"
+
+#elif defined(__osf) || defined(__osf__)
+# define PLATFORM_ID "OSF1"
+
+#elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)
+# define PLATFORM_ID "SCO_SV"
+
+#elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)
+# define PLATFORM_ID "ULTRIX"
+
+#elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)
+# define PLATFORM_ID "Xenix"
+
+#elif defined(__WATCOMC__)
+# if defined(__LINUX__)
+#  define PLATFORM_ID "Linux"
+
+# elif defined(__DOS__)
+#  define PLATFORM_ID "DOS"
+
+# elif defined(__OS2__)
+#  define PLATFORM_ID "OS2"
+
+# elif defined(__WINDOWS__)
+#  define PLATFORM_ID "Windows3x"
+
+# else /* unknown platform */
+#  define PLATFORM_ID
+# endif
+
+#elif defined(__INTEGRITY)
+# if defined(INT_178B)
+#  define PLATFORM_ID "Integrity178"
+
+# else /* regular Integrity */
+#  define PLATFORM_ID "Integrity"
+# endif
+
+#else /* unknown platform */
+# define PLATFORM_ID
+
+#endif
+
+/* For windows compilers MSVC and Intel we can determine
+   the architecture of the compiler being used.  This is because
+   the compilers do not have flags that can change the architecture,
+   but rather depend on which compiler is being used
+*/
+#if defined(_WIN32) && defined(_MSC_VER)
+# if defined(_M_IA64)
+#  define ARCHITECTURE_ID "IA64"
+
+# elif defined(_M_X64) || defined(_M_AMD64)
+#  define ARCHITECTURE_ID "x64"
+
+# elif defined(_M_IX86)
+#  define ARCHITECTURE_ID "X86"
+
+# elif defined(_M_ARM64)
+#  define ARCHITECTURE_ID "ARM64"
+
+# elif defined(_M_ARM)
+#  if _M_ARM == 4
+#   define ARCHITECTURE_ID "ARMV4I"
+#  elif _M_ARM == 5
+#   define ARCHITECTURE_ID "ARMV5I"
+#  else
+#   define ARCHITECTURE_ID "ARMV" STRINGIFY(_M_ARM)
+#  endif
+
+# elif defined(_M_MIPS)
+#  define ARCHITECTURE_ID "MIPS"
+
+# elif defined(_M_SH)
+#  define ARCHITECTURE_ID "SHx"
+
+# else /* unknown architecture */
+#  define ARCHITECTURE_ID ""
+# endif
+
+#elif defined(__WATCOMC__)
+# if defined(_M_I86)
+#  define ARCHITECTURE_ID "I86"
+
+# elif defined(_M_IX86)
+#  define ARCHITECTURE_ID "X86"
+
+# else /* unknown architecture */
+#  define ARCHITECTURE_ID ""
+# endif
+
+#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
+# if defined(__ICCARM__)
+#  define ARCHITECTURE_ID "ARM"
+
+# elif defined(__ICCAVR__)
+#  define ARCHITECTURE_ID "AVR"
+
+# else /* unknown architecture */
+#  define ARCHITECTURE_ID ""
+# endif
+
+#elif defined(__ghs__)
+# if defined(__PPC64__)
+#  define ARCHITECTURE_ID "PPC64"
+
+# elif defined(__ppc__)
+#  define ARCHITECTURE_ID "PPC"
+
+# elif defined(__ARM__)
+#  define ARCHITECTURE_ID "ARM"
+
+# elif defined(__x86_64__)
+#  define ARCHITECTURE_ID "x64"
+
+# elif defined(__i386__)
+#  define ARCHITECTURE_ID "X86"
+
+# else /* unknown architecture */
+#  define ARCHITECTURE_ID ""
+# endif
+#else
+#  define ARCHITECTURE_ID
+#endif
+
+/* Convert integer to decimal digit literals.  */
+#define DEC(n)                   \
+  ('0' + (((n) / 10000000)%10)), \
+  ('0' + (((n) / 1000000)%10)),  \
+  ('0' + (((n) / 100000)%10)),   \
+  ('0' + (((n) / 10000)%10)),    \
+  ('0' + (((n) / 1000)%10)),     \
+  ('0' + (((n) / 100)%10)),      \
+  ('0' + (((n) / 10)%10)),       \
+  ('0' +  ((n) % 10))
+
+/* Convert integer to hex digit literals.  */
+#define HEX(n)             \
+  ('0' + ((n)>>28 & 0xF)), \
+  ('0' + ((n)>>24 & 0xF)), \
+  ('0' + ((n)>>20 & 0xF)), \
+  ('0' + ((n)>>16 & 0xF)), \
+  ('0' + ((n)>>12 & 0xF)), \
+  ('0' + ((n)>>8  & 0xF)), \
+  ('0' + ((n)>>4  & 0xF)), \
+  ('0' + ((n)     & 0xF))
+
+/* Construct a string literal encoding the version number components. */
+#ifdef COMPILER_VERSION_MAJOR
+char const info_version[] = {
+  'I', 'N', 'F', 'O', ':',
+  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
+  COMPILER_VERSION_MAJOR,
+# ifdef COMPILER_VERSION_MINOR
+  '.', COMPILER_VERSION_MINOR,
+#  ifdef COMPILER_VERSION_PATCH
+   '.', COMPILER_VERSION_PATCH,
+#   ifdef COMPILER_VERSION_TWEAK
+    '.', COMPILER_VERSION_TWEAK,
+#   endif
+#  endif
+# endif
+  ']','\0'};
+#endif
+
+/* Construct a string literal encoding the internal version number. */
+#ifdef COMPILER_VERSION_INTERNAL
+char const info_version_internal[] = {
+  'I', 'N', 'F', 'O', ':',
+  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','_',
+  'i','n','t','e','r','n','a','l','[',
+  COMPILER_VERSION_INTERNAL,']','\0'};
+#endif
+
+/* Construct a string literal encoding the version number components. */
+#ifdef SIMULATE_VERSION_MAJOR
+char const info_simulate_version[] = {
+  'I', 'N', 'F', 'O', ':',
+  's','i','m','u','l','a','t','e','_','v','e','r','s','i','o','n','[',
+  SIMULATE_VERSION_MAJOR,
+# ifdef SIMULATE_VERSION_MINOR
+  '.', SIMULATE_VERSION_MINOR,
+#  ifdef SIMULATE_VERSION_PATCH
+   '.', SIMULATE_VERSION_PATCH,
+#   ifdef SIMULATE_VERSION_TWEAK
+    '.', SIMULATE_VERSION_TWEAK,
+#   endif
+#  endif
+# endif
+  ']','\0'};
+#endif
+
+/* Construct the string literal in pieces to prevent the source from
+   getting matched.  Store it in a pointer rather than an array
+   because some compilers will just produce instructions to fill the
+   array rather than assigning a pointer to a static array.  */
+char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
+char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";
+
+
+
+
+#if !defined(__STDC__)
+# if (defined(_MSC_VER) && !defined(__clang__)) \
+  || (defined(__ibmxl__) || defined(__IBMC__))
+#  define C_DIALECT "90"
+# else
+#  define C_DIALECT
+# endif
+#elif __STDC_VERSION__ >= 201000L
+# define C_DIALECT "11"
+#elif __STDC_VERSION__ >= 199901L
+# define C_DIALECT "99"
+#else
+# define C_DIALECT "90"
+#endif
+const char* info_language_dialect_default =
+  "INFO" ":" "dialect_default[" C_DIALECT "]";
+
+/*--------------------------------------------------------------------------*/
+
+#ifdef ID_VOID_MAIN
+void main() {}
+#else
+# if defined(__CLASSIC_C__)
+int main(argc, argv) int argc; char *argv[];
+# else
+int main(int argc, char* argv[])
+# endif
+{
+  int require = 0;
+  require += info_compiler[argc];
+  require += info_platform[argc];
+  require += info_arch[argc];
+#ifdef COMPILER_VERSION_MAJOR
+  require += info_version[argc];
+#endif
+#ifdef COMPILER_VERSION_INTERNAL
+  require += info_version_internal[argc];
+#endif
+#ifdef SIMULATE_ID
+  require += info_simulate[argc];
+#endif
+#ifdef SIMULATE_VERSION_MAJOR
+  require += info_simulate_version[argc];
+#endif
+#if defined(__CRAYXE) || defined(__CRAYXC)
+  require += info_cray[argc];
+#endif
+  require += info_language_dialect_default[argc];
+  (void)argv;
+  return require;
+}
+#endif
diff --git a/cmake-build-debug/CMakeFiles/3.14.2/CompilerIdC/a.out b/cmake-build-debug/CMakeFiles/3.14.2/CompilerIdC/a.out
new file mode 100755
index 0000000..709142d
Binary files /dev/null and b/cmake-build-debug/CMakeFiles/3.14.2/CompilerIdC/a.out differ
diff --git a/cmake-build-debug/CMakeFiles/Assignment2.dir/DependInfo.cmake b/cmake-build-debug/CMakeFiles/Assignment2.dir/DependInfo.cmake
new file mode 100644
index 0000000..33e0ed8
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/Assignment2.dir/DependInfo.cmake
@@ -0,0 +1,69 @@
+# The set of languages for which implicit dependencies are needed:
+set(CMAKE_DEPENDS_LANGUAGES
+  "C"
+  )
+# The set of files for implicit dependencies of each language:
+set(CMAKE_DEPENDS_CHECK_C
+  "/home/tamar/Documents/Assignment2/bio.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/bio.c.o"
+  "/home/tamar/Documents/Assignment2/bootmain.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/bootmain.c.o"
+  "/home/tamar/Documents/Assignment2/cat.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/cat.c.o"
+  "/home/tamar/Documents/Assignment2/console.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/console.c.o"
+  "/home/tamar/Documents/Assignment2/echo.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/echo.c.o"
+  "/home/tamar/Documents/Assignment2/exec.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/exec.c.o"
+  "/home/tamar/Documents/Assignment2/file.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/file.c.o"
+  "/home/tamar/Documents/Assignment2/forktest.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/forktest.c.o"
+  "/home/tamar/Documents/Assignment2/fs.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/fs.c.o"
+  "/home/tamar/Documents/Assignment2/grep.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/grep.c.o"
+  "/home/tamar/Documents/Assignment2/ide.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/ide.c.o"
+  "/home/tamar/Documents/Assignment2/init.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/init.c.o"
+  "/home/tamar/Documents/Assignment2/ioapic.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/ioapic.c.o"
+  "/home/tamar/Documents/Assignment2/kalloc.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/kalloc.c.o"
+  "/home/tamar/Documents/Assignment2/kbd.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/kbd.c.o"
+  "/home/tamar/Documents/Assignment2/kill.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/kill.c.o"
+  "/home/tamar/Documents/Assignment2/lapic.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/lapic.c.o"
+  "/home/tamar/Documents/Assignment2/ln.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/ln.c.o"
+  "/home/tamar/Documents/Assignment2/log.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/log.c.o"
+  "/home/tamar/Documents/Assignment2/ls.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/ls.c.o"
+  "/home/tamar/Documents/Assignment2/main.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/main.c.o"
+  "/home/tamar/Documents/Assignment2/memide.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/memide.c.o"
+  "/home/tamar/Documents/Assignment2/mkdir.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/mkdir.c.o"
+  "/home/tamar/Documents/Assignment2/mkfs.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/mkfs.c.o"
+  "/home/tamar/Documents/Assignment2/mp.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/mp.c.o"
+  "/home/tamar/Documents/Assignment2/picirq.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/picirq.c.o"
+  "/home/tamar/Documents/Assignment2/pipe.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/pipe.c.o"
+  "/home/tamar/Documents/Assignment2/printf.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/printf.c.o"
+  "/home/tamar/Documents/Assignment2/proc.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/proc.c.o"
+  "/home/tamar/Documents/Assignment2/rm.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/rm.c.o"
+  "/home/tamar/Documents/Assignment2/sanity.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/sanity.c.o"
+  "/home/tamar/Documents/Assignment2/sh.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/sh.c.o"
+  "/home/tamar/Documents/Assignment2/sleeplock.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/sleeplock.c.o"
+  "/home/tamar/Documents/Assignment2/spinlock.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/spinlock.c.o"
+  "/home/tamar/Documents/Assignment2/stressfs.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/stressfs.c.o"
+  "/home/tamar/Documents/Assignment2/string.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/string.c.o"
+  "/home/tamar/Documents/Assignment2/syscall.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/syscall.c.o"
+  "/home/tamar/Documents/Assignment2/sysfile.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/sysfile.c.o"
+  "/home/tamar/Documents/Assignment2/sysproc.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/sysproc.c.o"
+  "/home/tamar/Documents/Assignment2/tournament_tree.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/tournament_tree.c.o"
+  "/home/tamar/Documents/Assignment2/tournamet_tree.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/tournamet_tree.c.o"
+  "/home/tamar/Documents/Assignment2/trap.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/trap.c.o"
+  "/home/tamar/Documents/Assignment2/uart.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/uart.c.o"
+  "/home/tamar/Documents/Assignment2/ulib.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/ulib.c.o"
+  "/home/tamar/Documents/Assignment2/umalloc.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/umalloc.c.o"
+  "/home/tamar/Documents/Assignment2/usertests.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/usertests.c.o"
+  "/home/tamar/Documents/Assignment2/vm.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/vm.c.o"
+  "/home/tamar/Documents/Assignment2/wc.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/wc.c.o"
+  "/home/tamar/Documents/Assignment2/zombie.c" "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/zombie.c.o"
+  )
+set(CMAKE_C_COMPILER_ID "GNU")
+
+# The include file search paths:
+set(CMAKE_C_TARGET_INCLUDE_PATH
+  "../."
+  )
+
+# Targets to which this target links.
+set(CMAKE_TARGET_LINKED_INFO_FILES
+  )
+
+# Fortran module output directory.
+set(CMAKE_Fortran_TARGET_MODULE_DIR "")
diff --git a/cmake-build-debug/CMakeFiles/Assignment2.dir/build.make b/cmake-build-debug/CMakeFiles/Assignment2.dir/build.make
new file mode 100644
index 0000000..22f768e
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/Assignment2.dir/build.make
@@ -0,0 +1,818 @@
+# CMAKE generated file: DO NOT EDIT!
+# Generated by "Unix Makefiles" Generator, CMake Version 3.14
+
+# Delete rule output on recipe failure.
+.DELETE_ON_ERROR:
+
+
+#=============================================================================
+# Special targets provided by cmake.
+
+# Disable implicit rules so canonical targets will work.
+.SUFFIXES:
+
+
+# Remove some rules from gmake that .SUFFIXES does not remove.
+SUFFIXES =
+
+.SUFFIXES: .hpux_make_needs_suffix_list
+
+
+# Suppress display of executed commands.
+$(VERBOSE).SILENT:
+
+
+# A target that is always out of date.
+cmake_force:
+
+.PHONY : cmake_force
+
+#=============================================================================
+# Set environment variables for the build.
+
+# The shell in which to execute make rules.
+SHELL = /bin/sh
+
+# The CMake executable.
+CMAKE_COMMAND = /snap/clion/69/bin/cmake/linux/bin/cmake
+
+# The command to remove a file.
+RM = /snap/clion/69/bin/cmake/linux/bin/cmake -E remove -f
+
+# Escaping for special characters.
+EQUALS = =
+
+# The top-level source directory on which CMake was run.
+CMAKE_SOURCE_DIR = /home/tamar/Documents/Assignment2
+
+# The top-level build directory on which CMake was run.
+CMAKE_BINARY_DIR = /home/tamar/Documents/Assignment2/cmake-build-debug
+
+# Include any dependencies generated for this target.
+include CMakeFiles/Assignment2.dir/depend.make
+
+# Include the progress variables for this target.
+include CMakeFiles/Assignment2.dir/progress.make
+
+# Include the compile flags for this target's objects.
+include CMakeFiles/Assignment2.dir/flags.make
+
+CMakeFiles/Assignment2.dir/bio.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/bio.c.o: ../bio.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_1) "Building C object CMakeFiles/Assignment2.dir/bio.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/bio.c.o   -c /home/tamar/Documents/Assignment2/bio.c
+
+CMakeFiles/Assignment2.dir/bio.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/bio.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/bio.c > CMakeFiles/Assignment2.dir/bio.c.i
+
+CMakeFiles/Assignment2.dir/bio.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/bio.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/bio.c -o CMakeFiles/Assignment2.dir/bio.c.s
+
+CMakeFiles/Assignment2.dir/bootmain.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/bootmain.c.o: ../bootmain.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_2) "Building C object CMakeFiles/Assignment2.dir/bootmain.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/bootmain.c.o   -c /home/tamar/Documents/Assignment2/bootmain.c
+
+CMakeFiles/Assignment2.dir/bootmain.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/bootmain.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/bootmain.c > CMakeFiles/Assignment2.dir/bootmain.c.i
+
+CMakeFiles/Assignment2.dir/bootmain.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/bootmain.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/bootmain.c -o CMakeFiles/Assignment2.dir/bootmain.c.s
+
+CMakeFiles/Assignment2.dir/cat.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/cat.c.o: ../cat.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_3) "Building C object CMakeFiles/Assignment2.dir/cat.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/cat.c.o   -c /home/tamar/Documents/Assignment2/cat.c
+
+CMakeFiles/Assignment2.dir/cat.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/cat.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/cat.c > CMakeFiles/Assignment2.dir/cat.c.i
+
+CMakeFiles/Assignment2.dir/cat.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/cat.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/cat.c -o CMakeFiles/Assignment2.dir/cat.c.s
+
+CMakeFiles/Assignment2.dir/console.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/console.c.o: ../console.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_4) "Building C object CMakeFiles/Assignment2.dir/console.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/console.c.o   -c /home/tamar/Documents/Assignment2/console.c
+
+CMakeFiles/Assignment2.dir/console.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/console.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/console.c > CMakeFiles/Assignment2.dir/console.c.i
+
+CMakeFiles/Assignment2.dir/console.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/console.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/console.c -o CMakeFiles/Assignment2.dir/console.c.s
+
+CMakeFiles/Assignment2.dir/echo.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/echo.c.o: ../echo.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_5) "Building C object CMakeFiles/Assignment2.dir/echo.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/echo.c.o   -c /home/tamar/Documents/Assignment2/echo.c
+
+CMakeFiles/Assignment2.dir/echo.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/echo.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/echo.c > CMakeFiles/Assignment2.dir/echo.c.i
+
+CMakeFiles/Assignment2.dir/echo.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/echo.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/echo.c -o CMakeFiles/Assignment2.dir/echo.c.s
+
+CMakeFiles/Assignment2.dir/exec.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/exec.c.o: ../exec.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_6) "Building C object CMakeFiles/Assignment2.dir/exec.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/exec.c.o   -c /home/tamar/Documents/Assignment2/exec.c
+
+CMakeFiles/Assignment2.dir/exec.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/exec.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/exec.c > CMakeFiles/Assignment2.dir/exec.c.i
+
+CMakeFiles/Assignment2.dir/exec.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/exec.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/exec.c -o CMakeFiles/Assignment2.dir/exec.c.s
+
+CMakeFiles/Assignment2.dir/file.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/file.c.o: ../file.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_7) "Building C object CMakeFiles/Assignment2.dir/file.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/file.c.o   -c /home/tamar/Documents/Assignment2/file.c
+
+CMakeFiles/Assignment2.dir/file.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/file.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/file.c > CMakeFiles/Assignment2.dir/file.c.i
+
+CMakeFiles/Assignment2.dir/file.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/file.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/file.c -o CMakeFiles/Assignment2.dir/file.c.s
+
+CMakeFiles/Assignment2.dir/forktest.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/forktest.c.o: ../forktest.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_8) "Building C object CMakeFiles/Assignment2.dir/forktest.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/forktest.c.o   -c /home/tamar/Documents/Assignment2/forktest.c
+
+CMakeFiles/Assignment2.dir/forktest.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/forktest.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/forktest.c > CMakeFiles/Assignment2.dir/forktest.c.i
+
+CMakeFiles/Assignment2.dir/forktest.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/forktest.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/forktest.c -o CMakeFiles/Assignment2.dir/forktest.c.s
+
+CMakeFiles/Assignment2.dir/fs.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/fs.c.o: ../fs.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_9) "Building C object CMakeFiles/Assignment2.dir/fs.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/fs.c.o   -c /home/tamar/Documents/Assignment2/fs.c
+
+CMakeFiles/Assignment2.dir/fs.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/fs.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/fs.c > CMakeFiles/Assignment2.dir/fs.c.i
+
+CMakeFiles/Assignment2.dir/fs.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/fs.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/fs.c -o CMakeFiles/Assignment2.dir/fs.c.s
+
+CMakeFiles/Assignment2.dir/grep.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/grep.c.o: ../grep.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_10) "Building C object CMakeFiles/Assignment2.dir/grep.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/grep.c.o   -c /home/tamar/Documents/Assignment2/grep.c
+
+CMakeFiles/Assignment2.dir/grep.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/grep.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/grep.c > CMakeFiles/Assignment2.dir/grep.c.i
+
+CMakeFiles/Assignment2.dir/grep.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/grep.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/grep.c -o CMakeFiles/Assignment2.dir/grep.c.s
+
+CMakeFiles/Assignment2.dir/ide.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/ide.c.o: ../ide.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_11) "Building C object CMakeFiles/Assignment2.dir/ide.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/ide.c.o   -c /home/tamar/Documents/Assignment2/ide.c
+
+CMakeFiles/Assignment2.dir/ide.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/ide.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/ide.c > CMakeFiles/Assignment2.dir/ide.c.i
+
+CMakeFiles/Assignment2.dir/ide.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/ide.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/ide.c -o CMakeFiles/Assignment2.dir/ide.c.s
+
+CMakeFiles/Assignment2.dir/init.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/init.c.o: ../init.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_12) "Building C object CMakeFiles/Assignment2.dir/init.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/init.c.o   -c /home/tamar/Documents/Assignment2/init.c
+
+CMakeFiles/Assignment2.dir/init.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/init.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/init.c > CMakeFiles/Assignment2.dir/init.c.i
+
+CMakeFiles/Assignment2.dir/init.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/init.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/init.c -o CMakeFiles/Assignment2.dir/init.c.s
+
+CMakeFiles/Assignment2.dir/ioapic.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/ioapic.c.o: ../ioapic.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_13) "Building C object CMakeFiles/Assignment2.dir/ioapic.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/ioapic.c.o   -c /home/tamar/Documents/Assignment2/ioapic.c
+
+CMakeFiles/Assignment2.dir/ioapic.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/ioapic.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/ioapic.c > CMakeFiles/Assignment2.dir/ioapic.c.i
+
+CMakeFiles/Assignment2.dir/ioapic.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/ioapic.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/ioapic.c -o CMakeFiles/Assignment2.dir/ioapic.c.s
+
+CMakeFiles/Assignment2.dir/kalloc.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/kalloc.c.o: ../kalloc.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_14) "Building C object CMakeFiles/Assignment2.dir/kalloc.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/kalloc.c.o   -c /home/tamar/Documents/Assignment2/kalloc.c
+
+CMakeFiles/Assignment2.dir/kalloc.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/kalloc.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/kalloc.c > CMakeFiles/Assignment2.dir/kalloc.c.i
+
+CMakeFiles/Assignment2.dir/kalloc.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/kalloc.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/kalloc.c -o CMakeFiles/Assignment2.dir/kalloc.c.s
+
+CMakeFiles/Assignment2.dir/kbd.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/kbd.c.o: ../kbd.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_15) "Building C object CMakeFiles/Assignment2.dir/kbd.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/kbd.c.o   -c /home/tamar/Documents/Assignment2/kbd.c
+
+CMakeFiles/Assignment2.dir/kbd.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/kbd.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/kbd.c > CMakeFiles/Assignment2.dir/kbd.c.i
+
+CMakeFiles/Assignment2.dir/kbd.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/kbd.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/kbd.c -o CMakeFiles/Assignment2.dir/kbd.c.s
+
+CMakeFiles/Assignment2.dir/kill.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/kill.c.o: ../kill.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_16) "Building C object CMakeFiles/Assignment2.dir/kill.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/kill.c.o   -c /home/tamar/Documents/Assignment2/kill.c
+
+CMakeFiles/Assignment2.dir/kill.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/kill.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/kill.c > CMakeFiles/Assignment2.dir/kill.c.i
+
+CMakeFiles/Assignment2.dir/kill.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/kill.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/kill.c -o CMakeFiles/Assignment2.dir/kill.c.s
+
+CMakeFiles/Assignment2.dir/lapic.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/lapic.c.o: ../lapic.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_17) "Building C object CMakeFiles/Assignment2.dir/lapic.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/lapic.c.o   -c /home/tamar/Documents/Assignment2/lapic.c
+
+CMakeFiles/Assignment2.dir/lapic.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/lapic.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/lapic.c > CMakeFiles/Assignment2.dir/lapic.c.i
+
+CMakeFiles/Assignment2.dir/lapic.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/lapic.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/lapic.c -o CMakeFiles/Assignment2.dir/lapic.c.s
+
+CMakeFiles/Assignment2.dir/ln.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/ln.c.o: ../ln.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_18) "Building C object CMakeFiles/Assignment2.dir/ln.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/ln.c.o   -c /home/tamar/Documents/Assignment2/ln.c
+
+CMakeFiles/Assignment2.dir/ln.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/ln.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/ln.c > CMakeFiles/Assignment2.dir/ln.c.i
+
+CMakeFiles/Assignment2.dir/ln.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/ln.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/ln.c -o CMakeFiles/Assignment2.dir/ln.c.s
+
+CMakeFiles/Assignment2.dir/log.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/log.c.o: ../log.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_19) "Building C object CMakeFiles/Assignment2.dir/log.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/log.c.o   -c /home/tamar/Documents/Assignment2/log.c
+
+CMakeFiles/Assignment2.dir/log.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/log.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/log.c > CMakeFiles/Assignment2.dir/log.c.i
+
+CMakeFiles/Assignment2.dir/log.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/log.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/log.c -o CMakeFiles/Assignment2.dir/log.c.s
+
+CMakeFiles/Assignment2.dir/ls.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/ls.c.o: ../ls.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_20) "Building C object CMakeFiles/Assignment2.dir/ls.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/ls.c.o   -c /home/tamar/Documents/Assignment2/ls.c
+
+CMakeFiles/Assignment2.dir/ls.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/ls.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/ls.c > CMakeFiles/Assignment2.dir/ls.c.i
+
+CMakeFiles/Assignment2.dir/ls.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/ls.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/ls.c -o CMakeFiles/Assignment2.dir/ls.c.s
+
+CMakeFiles/Assignment2.dir/main.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/main.c.o: ../main.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_21) "Building C object CMakeFiles/Assignment2.dir/main.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/main.c.o   -c /home/tamar/Documents/Assignment2/main.c
+
+CMakeFiles/Assignment2.dir/main.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/main.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/main.c > CMakeFiles/Assignment2.dir/main.c.i
+
+CMakeFiles/Assignment2.dir/main.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/main.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/main.c -o CMakeFiles/Assignment2.dir/main.c.s
+
+CMakeFiles/Assignment2.dir/memide.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/memide.c.o: ../memide.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_22) "Building C object CMakeFiles/Assignment2.dir/memide.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/memide.c.o   -c /home/tamar/Documents/Assignment2/memide.c
+
+CMakeFiles/Assignment2.dir/memide.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/memide.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/memide.c > CMakeFiles/Assignment2.dir/memide.c.i
+
+CMakeFiles/Assignment2.dir/memide.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/memide.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/memide.c -o CMakeFiles/Assignment2.dir/memide.c.s
+
+CMakeFiles/Assignment2.dir/mkdir.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/mkdir.c.o: ../mkdir.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_23) "Building C object CMakeFiles/Assignment2.dir/mkdir.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/mkdir.c.o   -c /home/tamar/Documents/Assignment2/mkdir.c
+
+CMakeFiles/Assignment2.dir/mkdir.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/mkdir.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/mkdir.c > CMakeFiles/Assignment2.dir/mkdir.c.i
+
+CMakeFiles/Assignment2.dir/mkdir.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/mkdir.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/mkdir.c -o CMakeFiles/Assignment2.dir/mkdir.c.s
+
+CMakeFiles/Assignment2.dir/mkfs.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/mkfs.c.o: ../mkfs.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_24) "Building C object CMakeFiles/Assignment2.dir/mkfs.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/mkfs.c.o   -c /home/tamar/Documents/Assignment2/mkfs.c
+
+CMakeFiles/Assignment2.dir/mkfs.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/mkfs.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/mkfs.c > CMakeFiles/Assignment2.dir/mkfs.c.i
+
+CMakeFiles/Assignment2.dir/mkfs.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/mkfs.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/mkfs.c -o CMakeFiles/Assignment2.dir/mkfs.c.s
+
+CMakeFiles/Assignment2.dir/mp.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/mp.c.o: ../mp.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_25) "Building C object CMakeFiles/Assignment2.dir/mp.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/mp.c.o   -c /home/tamar/Documents/Assignment2/mp.c
+
+CMakeFiles/Assignment2.dir/mp.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/mp.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/mp.c > CMakeFiles/Assignment2.dir/mp.c.i
+
+CMakeFiles/Assignment2.dir/mp.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/mp.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/mp.c -o CMakeFiles/Assignment2.dir/mp.c.s
+
+CMakeFiles/Assignment2.dir/picirq.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/picirq.c.o: ../picirq.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_26) "Building C object CMakeFiles/Assignment2.dir/picirq.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/picirq.c.o   -c /home/tamar/Documents/Assignment2/picirq.c
+
+CMakeFiles/Assignment2.dir/picirq.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/picirq.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/picirq.c > CMakeFiles/Assignment2.dir/picirq.c.i
+
+CMakeFiles/Assignment2.dir/picirq.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/picirq.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/picirq.c -o CMakeFiles/Assignment2.dir/picirq.c.s
+
+CMakeFiles/Assignment2.dir/pipe.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/pipe.c.o: ../pipe.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_27) "Building C object CMakeFiles/Assignment2.dir/pipe.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/pipe.c.o   -c /home/tamar/Documents/Assignment2/pipe.c
+
+CMakeFiles/Assignment2.dir/pipe.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/pipe.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/pipe.c > CMakeFiles/Assignment2.dir/pipe.c.i
+
+CMakeFiles/Assignment2.dir/pipe.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/pipe.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/pipe.c -o CMakeFiles/Assignment2.dir/pipe.c.s
+
+CMakeFiles/Assignment2.dir/printf.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/printf.c.o: ../printf.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_28) "Building C object CMakeFiles/Assignment2.dir/printf.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/printf.c.o   -c /home/tamar/Documents/Assignment2/printf.c
+
+CMakeFiles/Assignment2.dir/printf.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/printf.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/printf.c > CMakeFiles/Assignment2.dir/printf.c.i
+
+CMakeFiles/Assignment2.dir/printf.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/printf.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/printf.c -o CMakeFiles/Assignment2.dir/printf.c.s
+
+CMakeFiles/Assignment2.dir/proc.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/proc.c.o: ../proc.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_29) "Building C object CMakeFiles/Assignment2.dir/proc.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/proc.c.o   -c /home/tamar/Documents/Assignment2/proc.c
+
+CMakeFiles/Assignment2.dir/proc.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/proc.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/proc.c > CMakeFiles/Assignment2.dir/proc.c.i
+
+CMakeFiles/Assignment2.dir/proc.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/proc.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/proc.c -o CMakeFiles/Assignment2.dir/proc.c.s
+
+CMakeFiles/Assignment2.dir/rm.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/rm.c.o: ../rm.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_30) "Building C object CMakeFiles/Assignment2.dir/rm.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/rm.c.o   -c /home/tamar/Documents/Assignment2/rm.c
+
+CMakeFiles/Assignment2.dir/rm.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/rm.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/rm.c > CMakeFiles/Assignment2.dir/rm.c.i
+
+CMakeFiles/Assignment2.dir/rm.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/rm.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/rm.c -o CMakeFiles/Assignment2.dir/rm.c.s
+
+CMakeFiles/Assignment2.dir/sanity.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/sanity.c.o: ../sanity.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_31) "Building C object CMakeFiles/Assignment2.dir/sanity.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/sanity.c.o   -c /home/tamar/Documents/Assignment2/sanity.c
+
+CMakeFiles/Assignment2.dir/sanity.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/sanity.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/sanity.c > CMakeFiles/Assignment2.dir/sanity.c.i
+
+CMakeFiles/Assignment2.dir/sanity.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/sanity.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/sanity.c -o CMakeFiles/Assignment2.dir/sanity.c.s
+
+CMakeFiles/Assignment2.dir/sh.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/sh.c.o: ../sh.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_32) "Building C object CMakeFiles/Assignment2.dir/sh.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/sh.c.o   -c /home/tamar/Documents/Assignment2/sh.c
+
+CMakeFiles/Assignment2.dir/sh.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/sh.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/sh.c > CMakeFiles/Assignment2.dir/sh.c.i
+
+CMakeFiles/Assignment2.dir/sh.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/sh.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/sh.c -o CMakeFiles/Assignment2.dir/sh.c.s
+
+CMakeFiles/Assignment2.dir/sleeplock.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/sleeplock.c.o: ../sleeplock.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_33) "Building C object CMakeFiles/Assignment2.dir/sleeplock.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/sleeplock.c.o   -c /home/tamar/Documents/Assignment2/sleeplock.c
+
+CMakeFiles/Assignment2.dir/sleeplock.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/sleeplock.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/sleeplock.c > CMakeFiles/Assignment2.dir/sleeplock.c.i
+
+CMakeFiles/Assignment2.dir/sleeplock.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/sleeplock.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/sleeplock.c -o CMakeFiles/Assignment2.dir/sleeplock.c.s
+
+CMakeFiles/Assignment2.dir/spinlock.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/spinlock.c.o: ../spinlock.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_34) "Building C object CMakeFiles/Assignment2.dir/spinlock.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/spinlock.c.o   -c /home/tamar/Documents/Assignment2/spinlock.c
+
+CMakeFiles/Assignment2.dir/spinlock.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/spinlock.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/spinlock.c > CMakeFiles/Assignment2.dir/spinlock.c.i
+
+CMakeFiles/Assignment2.dir/spinlock.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/spinlock.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/spinlock.c -o CMakeFiles/Assignment2.dir/spinlock.c.s
+
+CMakeFiles/Assignment2.dir/stressfs.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/stressfs.c.o: ../stressfs.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_35) "Building C object CMakeFiles/Assignment2.dir/stressfs.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/stressfs.c.o   -c /home/tamar/Documents/Assignment2/stressfs.c
+
+CMakeFiles/Assignment2.dir/stressfs.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/stressfs.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/stressfs.c > CMakeFiles/Assignment2.dir/stressfs.c.i
+
+CMakeFiles/Assignment2.dir/stressfs.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/stressfs.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/stressfs.c -o CMakeFiles/Assignment2.dir/stressfs.c.s
+
+CMakeFiles/Assignment2.dir/string.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/string.c.o: ../string.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_36) "Building C object CMakeFiles/Assignment2.dir/string.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/string.c.o   -c /home/tamar/Documents/Assignment2/string.c
+
+CMakeFiles/Assignment2.dir/string.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/string.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/string.c > CMakeFiles/Assignment2.dir/string.c.i
+
+CMakeFiles/Assignment2.dir/string.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/string.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/string.c -o CMakeFiles/Assignment2.dir/string.c.s
+
+CMakeFiles/Assignment2.dir/syscall.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/syscall.c.o: ../syscall.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_37) "Building C object CMakeFiles/Assignment2.dir/syscall.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/syscall.c.o   -c /home/tamar/Documents/Assignment2/syscall.c
+
+CMakeFiles/Assignment2.dir/syscall.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/syscall.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/syscall.c > CMakeFiles/Assignment2.dir/syscall.c.i
+
+CMakeFiles/Assignment2.dir/syscall.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/syscall.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/syscall.c -o CMakeFiles/Assignment2.dir/syscall.c.s
+
+CMakeFiles/Assignment2.dir/sysfile.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/sysfile.c.o: ../sysfile.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_38) "Building C object CMakeFiles/Assignment2.dir/sysfile.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/sysfile.c.o   -c /home/tamar/Documents/Assignment2/sysfile.c
+
+CMakeFiles/Assignment2.dir/sysfile.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/sysfile.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/sysfile.c > CMakeFiles/Assignment2.dir/sysfile.c.i
+
+CMakeFiles/Assignment2.dir/sysfile.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/sysfile.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/sysfile.c -o CMakeFiles/Assignment2.dir/sysfile.c.s
+
+CMakeFiles/Assignment2.dir/sysproc.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/sysproc.c.o: ../sysproc.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_39) "Building C object CMakeFiles/Assignment2.dir/sysproc.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/sysproc.c.o   -c /home/tamar/Documents/Assignment2/sysproc.c
+
+CMakeFiles/Assignment2.dir/sysproc.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/sysproc.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/sysproc.c > CMakeFiles/Assignment2.dir/sysproc.c.i
+
+CMakeFiles/Assignment2.dir/sysproc.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/sysproc.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/sysproc.c -o CMakeFiles/Assignment2.dir/sysproc.c.s
+
+CMakeFiles/Assignment2.dir/tournament_tree.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/tournament_tree.c.o: ../tournament_tree.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_40) "Building C object CMakeFiles/Assignment2.dir/tournament_tree.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/tournament_tree.c.o   -c /home/tamar/Documents/Assignment2/tournament_tree.c
+
+CMakeFiles/Assignment2.dir/tournament_tree.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/tournament_tree.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/tournament_tree.c > CMakeFiles/Assignment2.dir/tournament_tree.c.i
+
+CMakeFiles/Assignment2.dir/tournament_tree.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/tournament_tree.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/tournament_tree.c -o CMakeFiles/Assignment2.dir/tournament_tree.c.s
+
+CMakeFiles/Assignment2.dir/tournamet_tree.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/tournamet_tree.c.o: ../tournamet_tree.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_41) "Building C object CMakeFiles/Assignment2.dir/tournamet_tree.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/tournamet_tree.c.o   -c /home/tamar/Documents/Assignment2/tournamet_tree.c
+
+CMakeFiles/Assignment2.dir/tournamet_tree.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/tournamet_tree.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/tournamet_tree.c > CMakeFiles/Assignment2.dir/tournamet_tree.c.i
+
+CMakeFiles/Assignment2.dir/tournamet_tree.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/tournamet_tree.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/tournamet_tree.c -o CMakeFiles/Assignment2.dir/tournamet_tree.c.s
+
+CMakeFiles/Assignment2.dir/trap.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/trap.c.o: ../trap.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_42) "Building C object CMakeFiles/Assignment2.dir/trap.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/trap.c.o   -c /home/tamar/Documents/Assignment2/trap.c
+
+CMakeFiles/Assignment2.dir/trap.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/trap.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/trap.c > CMakeFiles/Assignment2.dir/trap.c.i
+
+CMakeFiles/Assignment2.dir/trap.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/trap.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/trap.c -o CMakeFiles/Assignment2.dir/trap.c.s
+
+CMakeFiles/Assignment2.dir/uart.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/uart.c.o: ../uart.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_43) "Building C object CMakeFiles/Assignment2.dir/uart.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/uart.c.o   -c /home/tamar/Documents/Assignment2/uart.c
+
+CMakeFiles/Assignment2.dir/uart.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/uart.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/uart.c > CMakeFiles/Assignment2.dir/uart.c.i
+
+CMakeFiles/Assignment2.dir/uart.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/uart.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/uart.c -o CMakeFiles/Assignment2.dir/uart.c.s
+
+CMakeFiles/Assignment2.dir/ulib.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/ulib.c.o: ../ulib.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_44) "Building C object CMakeFiles/Assignment2.dir/ulib.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/ulib.c.o   -c /home/tamar/Documents/Assignment2/ulib.c
+
+CMakeFiles/Assignment2.dir/ulib.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/ulib.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/ulib.c > CMakeFiles/Assignment2.dir/ulib.c.i
+
+CMakeFiles/Assignment2.dir/ulib.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/ulib.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/ulib.c -o CMakeFiles/Assignment2.dir/ulib.c.s
+
+CMakeFiles/Assignment2.dir/umalloc.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/umalloc.c.o: ../umalloc.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_45) "Building C object CMakeFiles/Assignment2.dir/umalloc.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/umalloc.c.o   -c /home/tamar/Documents/Assignment2/umalloc.c
+
+CMakeFiles/Assignment2.dir/umalloc.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/umalloc.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/umalloc.c > CMakeFiles/Assignment2.dir/umalloc.c.i
+
+CMakeFiles/Assignment2.dir/umalloc.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/umalloc.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/umalloc.c -o CMakeFiles/Assignment2.dir/umalloc.c.s
+
+CMakeFiles/Assignment2.dir/usertests.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/usertests.c.o: ../usertests.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_46) "Building C object CMakeFiles/Assignment2.dir/usertests.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/usertests.c.o   -c /home/tamar/Documents/Assignment2/usertests.c
+
+CMakeFiles/Assignment2.dir/usertests.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/usertests.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/usertests.c > CMakeFiles/Assignment2.dir/usertests.c.i
+
+CMakeFiles/Assignment2.dir/usertests.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/usertests.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/usertests.c -o CMakeFiles/Assignment2.dir/usertests.c.s
+
+CMakeFiles/Assignment2.dir/vm.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/vm.c.o: ../vm.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_47) "Building C object CMakeFiles/Assignment2.dir/vm.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/vm.c.o   -c /home/tamar/Documents/Assignment2/vm.c
+
+CMakeFiles/Assignment2.dir/vm.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/vm.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/vm.c > CMakeFiles/Assignment2.dir/vm.c.i
+
+CMakeFiles/Assignment2.dir/vm.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/vm.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/vm.c -o CMakeFiles/Assignment2.dir/vm.c.s
+
+CMakeFiles/Assignment2.dir/wc.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/wc.c.o: ../wc.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_48) "Building C object CMakeFiles/Assignment2.dir/wc.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/wc.c.o   -c /home/tamar/Documents/Assignment2/wc.c
+
+CMakeFiles/Assignment2.dir/wc.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/wc.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/wc.c > CMakeFiles/Assignment2.dir/wc.c.i
+
+CMakeFiles/Assignment2.dir/wc.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/wc.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/wc.c -o CMakeFiles/Assignment2.dir/wc.c.s
+
+CMakeFiles/Assignment2.dir/zombie.c.o: CMakeFiles/Assignment2.dir/flags.make
+CMakeFiles/Assignment2.dir/zombie.c.o: ../zombie.c
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_49) "Building C object CMakeFiles/Assignment2.dir/zombie.c.o"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -o CMakeFiles/Assignment2.dir/zombie.c.o   -c /home/tamar/Documents/Assignment2/zombie.c
+
+CMakeFiles/Assignment2.dir/zombie.c.i: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Preprocessing C source to CMakeFiles/Assignment2.dir/zombie.c.i"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -E /home/tamar/Documents/Assignment2/zombie.c > CMakeFiles/Assignment2.dir/zombie.c.i
+
+CMakeFiles/Assignment2.dir/zombie.c.s: cmake_force
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green "Compiling C source to assembly CMakeFiles/Assignment2.dir/zombie.c.s"
+	/usr/bin/cc $(C_DEFINES) $(C_INCLUDES) $(C_FLAGS) -S /home/tamar/Documents/Assignment2/zombie.c -o CMakeFiles/Assignment2.dir/zombie.c.s
+
+# Object files for target Assignment2
+Assignment2_OBJECTS = \
+"CMakeFiles/Assignment2.dir/bio.c.o" \
+"CMakeFiles/Assignment2.dir/bootmain.c.o" \
+"CMakeFiles/Assignment2.dir/cat.c.o" \
+"CMakeFiles/Assignment2.dir/console.c.o" \
+"CMakeFiles/Assignment2.dir/echo.c.o" \
+"CMakeFiles/Assignment2.dir/exec.c.o" \
+"CMakeFiles/Assignment2.dir/file.c.o" \
+"CMakeFiles/Assignment2.dir/forktest.c.o" \
+"CMakeFiles/Assignment2.dir/fs.c.o" \
+"CMakeFiles/Assignment2.dir/grep.c.o" \
+"CMakeFiles/Assignment2.dir/ide.c.o" \
+"CMakeFiles/Assignment2.dir/init.c.o" \
+"CMakeFiles/Assignment2.dir/ioapic.c.o" \
+"CMakeFiles/Assignment2.dir/kalloc.c.o" \
+"CMakeFiles/Assignment2.dir/kbd.c.o" \
+"CMakeFiles/Assignment2.dir/kill.c.o" \
+"CMakeFiles/Assignment2.dir/lapic.c.o" \
+"CMakeFiles/Assignment2.dir/ln.c.o" \
+"CMakeFiles/Assignment2.dir/log.c.o" \
+"CMakeFiles/Assignment2.dir/ls.c.o" \
+"CMakeFiles/Assignment2.dir/main.c.o" \
+"CMakeFiles/Assignment2.dir/memide.c.o" \
+"CMakeFiles/Assignment2.dir/mkdir.c.o" \
+"CMakeFiles/Assignment2.dir/mkfs.c.o" \
+"CMakeFiles/Assignment2.dir/mp.c.o" \
+"CMakeFiles/Assignment2.dir/picirq.c.o" \
+"CMakeFiles/Assignment2.dir/pipe.c.o" \
+"CMakeFiles/Assignment2.dir/printf.c.o" \
+"CMakeFiles/Assignment2.dir/proc.c.o" \
+"CMakeFiles/Assignment2.dir/rm.c.o" \
+"CMakeFiles/Assignment2.dir/sanity.c.o" \
+"CMakeFiles/Assignment2.dir/sh.c.o" \
+"CMakeFiles/Assignment2.dir/sleeplock.c.o" \
+"CMakeFiles/Assignment2.dir/spinlock.c.o" \
+"CMakeFiles/Assignment2.dir/stressfs.c.o" \
+"CMakeFiles/Assignment2.dir/string.c.o" \
+"CMakeFiles/Assignment2.dir/syscall.c.o" \
+"CMakeFiles/Assignment2.dir/sysfile.c.o" \
+"CMakeFiles/Assignment2.dir/sysproc.c.o" \
+"CMakeFiles/Assignment2.dir/tournament_tree.c.o" \
+"CMakeFiles/Assignment2.dir/tournamet_tree.c.o" \
+"CMakeFiles/Assignment2.dir/trap.c.o" \
+"CMakeFiles/Assignment2.dir/uart.c.o" \
+"CMakeFiles/Assignment2.dir/ulib.c.o" \
+"CMakeFiles/Assignment2.dir/umalloc.c.o" \
+"CMakeFiles/Assignment2.dir/usertests.c.o" \
+"CMakeFiles/Assignment2.dir/vm.c.o" \
+"CMakeFiles/Assignment2.dir/wc.c.o" \
+"CMakeFiles/Assignment2.dir/zombie.c.o"
+
+# External object files for target Assignment2
+Assignment2_EXTERNAL_OBJECTS =
+
+Assignment2: CMakeFiles/Assignment2.dir/bio.c.o
+Assignment2: CMakeFiles/Assignment2.dir/bootmain.c.o
+Assignment2: CMakeFiles/Assignment2.dir/cat.c.o
+Assignment2: CMakeFiles/Assignment2.dir/console.c.o
+Assignment2: CMakeFiles/Assignment2.dir/echo.c.o
+Assignment2: CMakeFiles/Assignment2.dir/exec.c.o
+Assignment2: CMakeFiles/Assignment2.dir/file.c.o
+Assignment2: CMakeFiles/Assignment2.dir/forktest.c.o
+Assignment2: CMakeFiles/Assignment2.dir/fs.c.o
+Assignment2: CMakeFiles/Assignment2.dir/grep.c.o
+Assignment2: CMakeFiles/Assignment2.dir/ide.c.o
+Assignment2: CMakeFiles/Assignment2.dir/init.c.o
+Assignment2: CMakeFiles/Assignment2.dir/ioapic.c.o
+Assignment2: CMakeFiles/Assignment2.dir/kalloc.c.o
+Assignment2: CMakeFiles/Assignment2.dir/kbd.c.o
+Assignment2: CMakeFiles/Assignment2.dir/kill.c.o
+Assignment2: CMakeFiles/Assignment2.dir/lapic.c.o
+Assignment2: CMakeFiles/Assignment2.dir/ln.c.o
+Assignment2: CMakeFiles/Assignment2.dir/log.c.o
+Assignment2: CMakeFiles/Assignment2.dir/ls.c.o
+Assignment2: CMakeFiles/Assignment2.dir/main.c.o
+Assignment2: CMakeFiles/Assignment2.dir/memide.c.o
+Assignment2: CMakeFiles/Assignment2.dir/mkdir.c.o
+Assignment2: CMakeFiles/Assignment2.dir/mkfs.c.o
+Assignment2: CMakeFiles/Assignment2.dir/mp.c.o
+Assignment2: CMakeFiles/Assignment2.dir/picirq.c.o
+Assignment2: CMakeFiles/Assignment2.dir/pipe.c.o
+Assignment2: CMakeFiles/Assignment2.dir/printf.c.o
+Assignment2: CMakeFiles/Assignment2.dir/proc.c.o
+Assignment2: CMakeFiles/Assignment2.dir/rm.c.o
+Assignment2: CMakeFiles/Assignment2.dir/sanity.c.o
+Assignment2: CMakeFiles/Assignment2.dir/sh.c.o
+Assignment2: CMakeFiles/Assignment2.dir/sleeplock.c.o
+Assignment2: CMakeFiles/Assignment2.dir/spinlock.c.o
+Assignment2: CMakeFiles/Assignment2.dir/stressfs.c.o
+Assignment2: CMakeFiles/Assignment2.dir/string.c.o
+Assignment2: CMakeFiles/Assignment2.dir/syscall.c.o
+Assignment2: CMakeFiles/Assignment2.dir/sysfile.c.o
+Assignment2: CMakeFiles/Assignment2.dir/sysproc.c.o
+Assignment2: CMakeFiles/Assignment2.dir/tournament_tree.c.o
+Assignment2: CMakeFiles/Assignment2.dir/tournamet_tree.c.o
+Assignment2: CMakeFiles/Assignment2.dir/trap.c.o
+Assignment2: CMakeFiles/Assignment2.dir/uart.c.o
+Assignment2: CMakeFiles/Assignment2.dir/ulib.c.o
+Assignment2: CMakeFiles/Assignment2.dir/umalloc.c.o
+Assignment2: CMakeFiles/Assignment2.dir/usertests.c.o
+Assignment2: CMakeFiles/Assignment2.dir/vm.c.o
+Assignment2: CMakeFiles/Assignment2.dir/wc.c.o
+Assignment2: CMakeFiles/Assignment2.dir/zombie.c.o
+Assignment2: CMakeFiles/Assignment2.dir/build.make
+Assignment2: CMakeFiles/Assignment2.dir/link.txt
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --green --bold --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=$(CMAKE_PROGRESS_50) "Linking C executable Assignment2"
+	$(CMAKE_COMMAND) -E cmake_link_script CMakeFiles/Assignment2.dir/link.txt --verbose=$(VERBOSE)
+
+# Rule to build all files generated by this target.
+CMakeFiles/Assignment2.dir/build: Assignment2
+
+.PHONY : CMakeFiles/Assignment2.dir/build
+
+CMakeFiles/Assignment2.dir/clean:
+	$(CMAKE_COMMAND) -P CMakeFiles/Assignment2.dir/cmake_clean.cmake
+.PHONY : CMakeFiles/Assignment2.dir/clean
+
+CMakeFiles/Assignment2.dir/depend:
+	cd /home/tamar/Documents/Assignment2/cmake-build-debug && $(CMAKE_COMMAND) -E cmake_depends "Unix Makefiles" /home/tamar/Documents/Assignment2 /home/tamar/Documents/Assignment2 /home/tamar/Documents/Assignment2/cmake-build-debug /home/tamar/Documents/Assignment2/cmake-build-debug /home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir/DependInfo.cmake --color=$(COLOR)
+.PHONY : CMakeFiles/Assignment2.dir/depend
+
diff --git a/cmake-build-debug/CMakeFiles/Assignment2.dir/cmake_clean.cmake b/cmake-build-debug/CMakeFiles/Assignment2.dir/cmake_clean.cmake
new file mode 100644
index 0000000..722056c
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/Assignment2.dir/cmake_clean.cmake
@@ -0,0 +1,58 @@
+file(REMOVE_RECURSE
+  "CMakeFiles/Assignment2.dir/bio.c.o"
+  "CMakeFiles/Assignment2.dir/bootmain.c.o"
+  "CMakeFiles/Assignment2.dir/cat.c.o"
+  "CMakeFiles/Assignment2.dir/console.c.o"
+  "CMakeFiles/Assignment2.dir/echo.c.o"
+  "CMakeFiles/Assignment2.dir/exec.c.o"
+  "CMakeFiles/Assignment2.dir/file.c.o"
+  "CMakeFiles/Assignment2.dir/forktest.c.o"
+  "CMakeFiles/Assignment2.dir/fs.c.o"
+  "CMakeFiles/Assignment2.dir/grep.c.o"
+  "CMakeFiles/Assignment2.dir/ide.c.o"
+  "CMakeFiles/Assignment2.dir/init.c.o"
+  "CMakeFiles/Assignment2.dir/ioapic.c.o"
+  "CMakeFiles/Assignment2.dir/kalloc.c.o"
+  "CMakeFiles/Assignment2.dir/kbd.c.o"
+  "CMakeFiles/Assignment2.dir/kill.c.o"
+  "CMakeFiles/Assignment2.dir/lapic.c.o"
+  "CMakeFiles/Assignment2.dir/ln.c.o"
+  "CMakeFiles/Assignment2.dir/log.c.o"
+  "CMakeFiles/Assignment2.dir/ls.c.o"
+  "CMakeFiles/Assignment2.dir/main.c.o"
+  "CMakeFiles/Assignment2.dir/memide.c.o"
+  "CMakeFiles/Assignment2.dir/mkdir.c.o"
+  "CMakeFiles/Assignment2.dir/mkfs.c.o"
+  "CMakeFiles/Assignment2.dir/mp.c.o"
+  "CMakeFiles/Assignment2.dir/picirq.c.o"
+  "CMakeFiles/Assignment2.dir/pipe.c.o"
+  "CMakeFiles/Assignment2.dir/printf.c.o"
+  "CMakeFiles/Assignment2.dir/proc.c.o"
+  "CMakeFiles/Assignment2.dir/rm.c.o"
+  "CMakeFiles/Assignment2.dir/sanity.c.o"
+  "CMakeFiles/Assignment2.dir/sh.c.o"
+  "CMakeFiles/Assignment2.dir/sleeplock.c.o"
+  "CMakeFiles/Assignment2.dir/spinlock.c.o"
+  "CMakeFiles/Assignment2.dir/stressfs.c.o"
+  "CMakeFiles/Assignment2.dir/string.c.o"
+  "CMakeFiles/Assignment2.dir/syscall.c.o"
+  "CMakeFiles/Assignment2.dir/sysfile.c.o"
+  "CMakeFiles/Assignment2.dir/sysproc.c.o"
+  "CMakeFiles/Assignment2.dir/tournament_tree.c.o"
+  "CMakeFiles/Assignment2.dir/tournamet_tree.c.o"
+  "CMakeFiles/Assignment2.dir/trap.c.o"
+  "CMakeFiles/Assignment2.dir/uart.c.o"
+  "CMakeFiles/Assignment2.dir/ulib.c.o"
+  "CMakeFiles/Assignment2.dir/umalloc.c.o"
+  "CMakeFiles/Assignment2.dir/usertests.c.o"
+  "CMakeFiles/Assignment2.dir/vm.c.o"
+  "CMakeFiles/Assignment2.dir/wc.c.o"
+  "CMakeFiles/Assignment2.dir/zombie.c.o"
+  "Assignment2.pdb"
+  "Assignment2"
+)
+
+# Per-language clean rules from dependency scanning.
+foreach(lang C)
+  include(CMakeFiles/Assignment2.dir/cmake_clean_${lang}.cmake OPTIONAL)
+endforeach()
diff --git a/cmake-build-debug/CMakeFiles/Assignment2.dir/depend.make b/cmake-build-debug/CMakeFiles/Assignment2.dir/depend.make
new file mode 100644
index 0000000..17c1094
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/Assignment2.dir/depend.make
@@ -0,0 +1,2 @@
+# Empty dependencies file for Assignment2.
+# This may be replaced when dependencies are built.
diff --git a/cmake-build-debug/CMakeFiles/Assignment2.dir/flags.make b/cmake-build-debug/CMakeFiles/Assignment2.dir/flags.make
new file mode 100644
index 0000000..9b47a74
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/Assignment2.dir/flags.make
@@ -0,0 +1,10 @@
+# CMAKE generated file: DO NOT EDIT!
+# Generated by "Unix Makefiles" Generator, CMake Version 3.14
+
+# compile C with /usr/bin/cc
+C_FLAGS = -g   -std=gnu11
+
+C_DEFINES = 
+
+C_INCLUDES = -I/home/tamar/Documents/Assignment2/. 
+
diff --git a/cmake-build-debug/CMakeFiles/Assignment2.dir/link.txt b/cmake-build-debug/CMakeFiles/Assignment2.dir/link.txt
new file mode 100644
index 0000000..fd337fd
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/Assignment2.dir/link.txt
@@ -0,0 +1 @@
+/usr/bin/cc -g   CMakeFiles/Assignment2.dir/bio.c.o CMakeFiles/Assignment2.dir/bootmain.c.o CMakeFiles/Assignment2.dir/cat.c.o CMakeFiles/Assignment2.dir/console.c.o CMakeFiles/Assignment2.dir/echo.c.o CMakeFiles/Assignment2.dir/exec.c.o CMakeFiles/Assignment2.dir/file.c.o CMakeFiles/Assignment2.dir/forktest.c.o CMakeFiles/Assignment2.dir/fs.c.o CMakeFiles/Assignment2.dir/grep.c.o CMakeFiles/Assignment2.dir/ide.c.o CMakeFiles/Assignment2.dir/init.c.o CMakeFiles/Assignment2.dir/ioapic.c.o CMakeFiles/Assignment2.dir/kalloc.c.o CMakeFiles/Assignment2.dir/kbd.c.o CMakeFiles/Assignment2.dir/kill.c.o CMakeFiles/Assignment2.dir/lapic.c.o CMakeFiles/Assignment2.dir/ln.c.o CMakeFiles/Assignment2.dir/log.c.o CMakeFiles/Assignment2.dir/ls.c.o CMakeFiles/Assignment2.dir/main.c.o CMakeFiles/Assignment2.dir/memide.c.o CMakeFiles/Assignment2.dir/mkdir.c.o CMakeFiles/Assignment2.dir/mkfs.c.o CMakeFiles/Assignment2.dir/mp.c.o CMakeFiles/Assignment2.dir/picirq.c.o CMakeFiles/Assignment2.dir/pipe.c.o CMakeFiles/Assignment2.dir/printf.c.o CMakeFiles/Assignment2.dir/proc.c.o CMakeFiles/Assignment2.dir/rm.c.o CMakeFiles/Assignment2.dir/sanity.c.o CMakeFiles/Assignment2.dir/sh.c.o CMakeFiles/Assignment2.dir/sleeplock.c.o CMakeFiles/Assignment2.dir/spinlock.c.o CMakeFiles/Assignment2.dir/stressfs.c.o CMakeFiles/Assignment2.dir/string.c.o CMakeFiles/Assignment2.dir/syscall.c.o CMakeFiles/Assignment2.dir/sysfile.c.o CMakeFiles/Assignment2.dir/sysproc.c.o CMakeFiles/Assignment2.dir/tournament_tree.c.o CMakeFiles/Assignment2.dir/tournamet_tree.c.o CMakeFiles/Assignment2.dir/trap.c.o CMakeFiles/Assignment2.dir/uart.c.o CMakeFiles/Assignment2.dir/ulib.c.o CMakeFiles/Assignment2.dir/umalloc.c.o CMakeFiles/Assignment2.dir/usertests.c.o CMakeFiles/Assignment2.dir/vm.c.o CMakeFiles/Assignment2.dir/wc.c.o CMakeFiles/Assignment2.dir/zombie.c.o  -o Assignment2 
diff --git a/cmake-build-debug/CMakeFiles/Assignment2.dir/progress.make b/cmake-build-debug/CMakeFiles/Assignment2.dir/progress.make
new file mode 100644
index 0000000..f3050de
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/Assignment2.dir/progress.make
@@ -0,0 +1,51 @@
+CMAKE_PROGRESS_1 = 1
+CMAKE_PROGRESS_2 = 2
+CMAKE_PROGRESS_3 = 3
+CMAKE_PROGRESS_4 = 4
+CMAKE_PROGRESS_5 = 5
+CMAKE_PROGRESS_6 = 6
+CMAKE_PROGRESS_7 = 7
+CMAKE_PROGRESS_8 = 8
+CMAKE_PROGRESS_9 = 9
+CMAKE_PROGRESS_10 = 10
+CMAKE_PROGRESS_11 = 11
+CMAKE_PROGRESS_12 = 12
+CMAKE_PROGRESS_13 = 13
+CMAKE_PROGRESS_14 = 14
+CMAKE_PROGRESS_15 = 15
+CMAKE_PROGRESS_16 = 16
+CMAKE_PROGRESS_17 = 17
+CMAKE_PROGRESS_18 = 18
+CMAKE_PROGRESS_19 = 19
+CMAKE_PROGRESS_20 = 20
+CMAKE_PROGRESS_21 = 21
+CMAKE_PROGRESS_22 = 22
+CMAKE_PROGRESS_23 = 23
+CMAKE_PROGRESS_24 = 24
+CMAKE_PROGRESS_25 = 25
+CMAKE_PROGRESS_26 = 26
+CMAKE_PROGRESS_27 = 27
+CMAKE_PROGRESS_28 = 28
+CMAKE_PROGRESS_29 = 29
+CMAKE_PROGRESS_30 = 30
+CMAKE_PROGRESS_31 = 31
+CMAKE_PROGRESS_32 = 32
+CMAKE_PROGRESS_33 = 33
+CMAKE_PROGRESS_34 = 34
+CMAKE_PROGRESS_35 = 35
+CMAKE_PROGRESS_36 = 36
+CMAKE_PROGRESS_37 = 37
+CMAKE_PROGRESS_38 = 38
+CMAKE_PROGRESS_39 = 39
+CMAKE_PROGRESS_40 = 40
+CMAKE_PROGRESS_41 = 41
+CMAKE_PROGRESS_42 = 42
+CMAKE_PROGRESS_43 = 43
+CMAKE_PROGRESS_44 = 44
+CMAKE_PROGRESS_45 = 45
+CMAKE_PROGRESS_46 = 46
+CMAKE_PROGRESS_47 = 47
+CMAKE_PROGRESS_48 = 48
+CMAKE_PROGRESS_49 = 49
+CMAKE_PROGRESS_50 = 50
+
diff --git a/cmake-build-debug/CMakeFiles/CMakeDirectoryInformation.cmake b/cmake-build-debug/CMakeFiles/CMakeDirectoryInformation.cmake
new file mode 100644
index 0000000..f96e8b4
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/CMakeDirectoryInformation.cmake
@@ -0,0 +1,16 @@
+# CMAKE generated file: DO NOT EDIT!
+# Generated by "Unix Makefiles" Generator, CMake Version 3.14
+
+# Relative path conversion top directories.
+set(CMAKE_RELATIVE_PATH_TOP_SOURCE "/home/tamar/Documents/Assignment2")
+set(CMAKE_RELATIVE_PATH_TOP_BINARY "/home/tamar/Documents/Assignment2/cmake-build-debug")
+
+# Force unix paths in dependencies.
+set(CMAKE_FORCE_UNIX_PATHS 1)
+
+
+# The C and CXX include file regular expressions for this directory.
+set(CMAKE_C_INCLUDE_REGEX_SCAN "^.*$")
+set(CMAKE_C_INCLUDE_REGEX_COMPLAIN "^$")
+set(CMAKE_CXX_INCLUDE_REGEX_SCAN ${CMAKE_C_INCLUDE_REGEX_SCAN})
+set(CMAKE_CXX_INCLUDE_REGEX_COMPLAIN ${CMAKE_C_INCLUDE_REGEX_COMPLAIN})
diff --git a/cmake-build-debug/CMakeFiles/CMakeOutput.log b/cmake-build-debug/CMakeFiles/CMakeOutput.log
new file mode 100644
index 0000000..8c811c7
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/CMakeOutput.log
@@ -0,0 +1,290 @@
+The system is: Linux - 4.18.0-17-generic - x86_64
+Compiling the C compiler identification source file "CMakeCCompilerId.c" succeeded.
+Compiler: /usr/bin/cc 
+Build flags: 
+Id flags:  
+
+The output was:
+0
+
+
+Compilation of the C compiler identification source "CMakeCCompilerId.c" produced "a.out"
+
+The C compiler identification is GNU, found in "/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/3.14.2/CompilerIdC/a.out"
+
+Determining if the C compiler works passed with the following output:
+Change Dir: /home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/CMakeTmp
+
+Run Build Command(s):/usr/bin/make cmTC_03da3/fast 
+/usr/bin/make -f CMakeFiles/cmTC_03da3.dir/build.make CMakeFiles/cmTC_03da3.dir/build
+make[1]: Entering directory '/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/CMakeTmp'
+Building C object CMakeFiles/cmTC_03da3.dir/testCCompiler.c.o
+/usr/bin/cc    -o CMakeFiles/cmTC_03da3.dir/testCCompiler.c.o   -c /home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/CMakeTmp/testCCompiler.c
+Linking C executable cmTC_03da3
+/snap/clion/69/bin/cmake/linux/bin/cmake -E cmake_link_script CMakeFiles/cmTC_03da3.dir/link.txt --verbose=1
+/usr/bin/cc      CMakeFiles/cmTC_03da3.dir/testCCompiler.c.o  -o cmTC_03da3 
+make[1]: Leaving directory '/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/CMakeTmp'
+
+
+Detecting C compiler ABI info compiled with the following output:
+Change Dir: /home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/CMakeTmp
+
+Run Build Command(s):/usr/bin/make cmTC_59350/fast 
+/usr/bin/make -f CMakeFiles/cmTC_59350.dir/build.make CMakeFiles/cmTC_59350.dir/build
+make[1]: Entering directory '/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/CMakeTmp'
+Building C object CMakeFiles/cmTC_59350.dir/CMakeCCompilerABI.c.o
+/usr/bin/cc   -v -o CMakeFiles/cmTC_59350.dir/CMakeCCompilerABI.c.o   -c /snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/CMakeCCompilerABI.c
+Using built-in specs.
+COLLECT_GCC=/usr/bin/cc
+OFFLOAD_TARGET_NAMES=nvptx-none
+OFFLOAD_TARGET_DEFAULT=1
+Target: x86_64-linux-gnu
+Configured with: ../src/configure -v --with-pkgversion='Ubuntu 7.3.0-27ubuntu1~18.04' --with-bugurl=file:///usr/share/doc/gcc-7/README.Bugs --enable-languages=c,ada,c++,go,brig,d,fortran,objc,obj-c++ --prefix=/usr --with-gcc-major-version-only --program-suffix=-7 --program-prefix=x86_64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-libmpx --enable-plugin --enable-default-pie --with-system-zlib --with-target-system-zlib --enable-objc-gc=auto --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-offload-targets=nvptx-none --without-cuda-driver --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu
+Thread model: posix
+gcc version 7.3.0 (Ubuntu 7.3.0-27ubuntu1~18.04) 
+COLLECT_GCC_OPTIONS='-v' '-o' 'CMakeFiles/cmTC_59350.dir/CMakeCCompilerABI.c.o' '-c' '-mtune=generic' '-march=x86-64'
+ /usr/lib/gcc/x86_64-linux-gnu/7/cc1 -quiet -v -imultiarch x86_64-linux-gnu /snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/CMakeCCompilerABI.c -quiet -dumpbase CMakeCCompilerABI.c -mtune=generic -march=x86-64 -auxbase-strip CMakeFiles/cmTC_59350.dir/CMakeCCompilerABI.c.o -version -fstack-protector-strong -Wformat -Wformat-security -o /tmp/cc6V3y26.s
+GNU C11 (Ubuntu 7.3.0-27ubuntu1~18.04) version 7.3.0 (x86_64-linux-gnu)
+	compiled by GNU C version 7.3.0, GMP version 6.1.2, MPFR version 4.0.1, MPC version 1.1.0, isl version isl-0.19-GMP
+
+GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
+ignoring nonexistent directory "/usr/local/include/x86_64-linux-gnu"
+ignoring nonexistent directory "/usr/lib/gcc/x86_64-linux-gnu/7/../../../../x86_64-linux-gnu/include"
+#include "..." search starts here:
+#include <...> search starts here:
+ /usr/lib/gcc/x86_64-linux-gnu/7/include
+ /usr/local/include
+ /usr/lib/gcc/x86_64-linux-gnu/7/include-fixed
+ /usr/include/x86_64-linux-gnu
+ /usr/include
+End of search list.
+GNU C11 (Ubuntu 7.3.0-27ubuntu1~18.04) version 7.3.0 (x86_64-linux-gnu)
+	compiled by GNU C version 7.3.0, GMP version 6.1.2, MPFR version 4.0.1, MPC version 1.1.0, isl version isl-0.19-GMP
+
+GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
+Compiler executable checksum: c8081a99abb72bbfd9129549110a350c
+COLLECT_GCC_OPTIONS='-v' '-o' 'CMakeFiles/cmTC_59350.dir/CMakeCCompilerABI.c.o' '-c' '-mtune=generic' '-march=x86-64'
+ as -v --64 -o CMakeFiles/cmTC_59350.dir/CMakeCCompilerABI.c.o /tmp/cc6V3y26.s
+GNU assembler version 2.30 (x86_64-linux-gnu) using BFD version (GNU Binutils for Ubuntu) 2.30
+COMPILER_PATH=/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/
+LIBRARY_PATH=/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib/:/lib/x86_64-linux-gnu/:/lib/../lib/:/usr/lib/x86_64-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../:/lib/:/usr/lib/
+COLLECT_GCC_OPTIONS='-v' '-o' 'CMakeFiles/cmTC_59350.dir/CMakeCCompilerABI.c.o' '-c' '-mtune=generic' '-march=x86-64'
+Linking C executable cmTC_59350
+/snap/clion/69/bin/cmake/linux/bin/cmake -E cmake_link_script CMakeFiles/cmTC_59350.dir/link.txt --verbose=1
+/usr/bin/cc     -v CMakeFiles/cmTC_59350.dir/CMakeCCompilerABI.c.o  -o cmTC_59350 
+Using built-in specs.
+COLLECT_GCC=/usr/bin/cc
+COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/7/lto-wrapper
+OFFLOAD_TARGET_NAMES=nvptx-none
+OFFLOAD_TARGET_DEFAULT=1
+Target: x86_64-linux-gnu
+Configured with: ../src/configure -v --with-pkgversion='Ubuntu 7.3.0-27ubuntu1~18.04' --with-bugurl=file:///usr/share/doc/gcc-7/README.Bugs --enable-languages=c,ada,c++,go,brig,d,fortran,objc,obj-c++ --prefix=/usr --with-gcc-major-version-only --program-suffix=-7 --program-prefix=x86_64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-libmpx --enable-plugin --enable-default-pie --with-system-zlib --with-target-system-zlib --enable-objc-gc=auto --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-offload-targets=nvptx-none --without-cuda-driver --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu
+Thread model: posix
+gcc version 7.3.0 (Ubuntu 7.3.0-27ubuntu1~18.04) 
+COMPILER_PATH=/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/
+LIBRARY_PATH=/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib/:/lib/x86_64-linux-gnu/:/lib/../lib/:/usr/lib/x86_64-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../:/lib/:/usr/lib/
+COLLECT_GCC_OPTIONS='-v' '-o' 'cmTC_59350' '-mtune=generic' '-march=x86-64'
+ /usr/lib/gcc/x86_64-linux-gnu/7/collect2 -plugin /usr/lib/gcc/x86_64-linux-gnu/7/liblto_plugin.so -plugin-opt=/usr/lib/gcc/x86_64-linux-gnu/7/lto-wrapper -plugin-opt=-fresolution=/tmp/ccFGDuC9.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s --sysroot=/ --build-id --eh-frame-hdr -m elf_x86_64 --hash-style=gnu --as-needed -dynamic-linker /lib64/ld-linux-x86-64.so.2 -pie -z now -z relro -o cmTC_59350 /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/Scrt1.o /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/7/crtbeginS.o -L/usr/lib/gcc/x86_64-linux-gnu/7 -L/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/7/../../.. CMakeFiles/cmTC_59350.dir/CMakeCCompilerABI.c.o -lgcc --push-state --as-needed -lgcc_s --pop-state -lc -lgcc --push-state --as-needed -lgcc_s --pop-state /usr/lib/gcc/x86_64-linux-gnu/7/crtendS.o /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crtn.o
+COLLECT_GCC_OPTIONS='-v' '-o' 'cmTC_59350' '-mtune=generic' '-march=x86-64'
+make[1]: Leaving directory '/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/CMakeTmp'
+
+
+Parsed C implicit include dir info from above output: rv=done
+  found start of include info
+  found start of implicit include info
+    add: [/usr/lib/gcc/x86_64-linux-gnu/7/include]
+    add: [/usr/local/include]
+    add: [/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed]
+    add: [/usr/include/x86_64-linux-gnu]
+    add: [/usr/include]
+  end of search list found
+  collapse include dir [/usr/lib/gcc/x86_64-linux-gnu/7/include] ==> [/usr/lib/gcc/x86_64-linux-gnu/7/include]
+  collapse include dir [/usr/local/include] ==> [/usr/local/include]
+  collapse include dir [/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed] ==> [/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed]
+  collapse include dir [/usr/include/x86_64-linux-gnu] ==> [/usr/include/x86_64-linux-gnu]
+  collapse include dir [/usr/include] ==> [/usr/include]
+  implicit include dirs: [/usr/lib/gcc/x86_64-linux-gnu/7/include;/usr/local/include;/usr/lib/gcc/x86_64-linux-gnu/7/include-fixed;/usr/include/x86_64-linux-gnu;/usr/include]
+
+
+Parsed C implicit link information from above output:
+  link line regex: [^( *|.*[/\])(ld|CMAKE_LINK_STARTFILE-NOTFOUND|([^/\]+-)?ld|collect2)[^/\]*( |$)]
+  ignore line: [Change Dir: /home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/CMakeTmp]
+  ignore line: []
+  ignore line: [Run Build Command(s):/usr/bin/make cmTC_59350/fast ]
+  ignore line: [/usr/bin/make -f CMakeFiles/cmTC_59350.dir/build.make CMakeFiles/cmTC_59350.dir/build]
+  ignore line: [make[1]: Entering directory '/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/CMakeTmp']
+  ignore line: [Building C object CMakeFiles/cmTC_59350.dir/CMakeCCompilerABI.c.o]
+  ignore line: [/usr/bin/cc   -v -o CMakeFiles/cmTC_59350.dir/CMakeCCompilerABI.c.o   -c /snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/CMakeCCompilerABI.c]
+  ignore line: [Using built-in specs.]
+  ignore line: [COLLECT_GCC=/usr/bin/cc]
+  ignore line: [OFFLOAD_TARGET_NAMES=nvptx-none]
+  ignore line: [OFFLOAD_TARGET_DEFAULT=1]
+  ignore line: [Target: x86_64-linux-gnu]
+  ignore line: [Configured with: ../src/configure -v --with-pkgversion='Ubuntu 7.3.0-27ubuntu1~18.04' --with-bugurl=file:///usr/share/doc/gcc-7/README.Bugs --enable-languages=c,ada,c++,go,brig,d,fortran,objc,obj-c++ --prefix=/usr --with-gcc-major-version-only --program-suffix=-7 --program-prefix=x86_64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-libmpx --enable-plugin --enable-default-pie --with-system-zlib --with-target-system-zlib --enable-objc-gc=auto --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-offload-targets=nvptx-none --without-cuda-driver --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu]
+  ignore line: [Thread model: posix]
+  ignore line: [gcc version 7.3.0 (Ubuntu 7.3.0-27ubuntu1~18.04) ]
+  ignore line: [COLLECT_GCC_OPTIONS='-v' '-o' 'CMakeFiles/cmTC_59350.dir/CMakeCCompilerABI.c.o' '-c' '-mtune=generic' '-march=x86-64']
+  ignore line: [ /usr/lib/gcc/x86_64-linux-gnu/7/cc1 -quiet -v -imultiarch x86_64-linux-gnu /snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/CMakeCCompilerABI.c -quiet -dumpbase CMakeCCompilerABI.c -mtune=generic -march=x86-64 -auxbase-strip CMakeFiles/cmTC_59350.dir/CMakeCCompilerABI.c.o -version -fstack-protector-strong -Wformat -Wformat-security -o /tmp/cc6V3y26.s]
+  ignore line: [GNU C11 (Ubuntu 7.3.0-27ubuntu1~18.04) version 7.3.0 (x86_64-linux-gnu)]
+  ignore line: [	compiled by GNU C version 7.3.0, GMP version 6.1.2, MPFR version 4.0.1, MPC version 1.1.0, isl version isl-0.19-GMP]
+  ignore line: []
+  ignore line: [GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072]
+  ignore line: [ignoring nonexistent directory "/usr/local/include/x86_64-linux-gnu"]
+  ignore line: [ignoring nonexistent directory "/usr/lib/gcc/x86_64-linux-gnu/7/../../../../x86_64-linux-gnu/include"]
+  ignore line: [#include "..." search starts here:]
+  ignore line: [#include <...> search starts here:]
+  ignore line: [ /usr/lib/gcc/x86_64-linux-gnu/7/include]
+  ignore line: [ /usr/local/include]
+  ignore line: [ /usr/lib/gcc/x86_64-linux-gnu/7/include-fixed]
+  ignore line: [ /usr/include/x86_64-linux-gnu]
+  ignore line: [ /usr/include]
+  ignore line: [End of search list.]
+  ignore line: [GNU C11 (Ubuntu 7.3.0-27ubuntu1~18.04) version 7.3.0 (x86_64-linux-gnu)]
+  ignore line: [	compiled by GNU C version 7.3.0, GMP version 6.1.2, MPFR version 4.0.1, MPC version 1.1.0, isl version isl-0.19-GMP]
+  ignore line: []
+  ignore line: [GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072]
+  ignore line: [Compiler executable checksum: c8081a99abb72bbfd9129549110a350c]
+  ignore line: [COLLECT_GCC_OPTIONS='-v' '-o' 'CMakeFiles/cmTC_59350.dir/CMakeCCompilerABI.c.o' '-c' '-mtune=generic' '-march=x86-64']
+  ignore line: [ as -v --64 -o CMakeFiles/cmTC_59350.dir/CMakeCCompilerABI.c.o /tmp/cc6V3y26.s]
+  ignore line: [GNU assembler version 2.30 (x86_64-linux-gnu) using BFD version (GNU Binutils for Ubuntu) 2.30]
+  ignore line: [COMPILER_PATH=/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/]
+  ignore line: [LIBRARY_PATH=/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib/:/lib/x86_64-linux-gnu/:/lib/../lib/:/usr/lib/x86_64-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../:/lib/:/usr/lib/]
+  ignore line: [COLLECT_GCC_OPTIONS='-v' '-o' 'CMakeFiles/cmTC_59350.dir/CMakeCCompilerABI.c.o' '-c' '-mtune=generic' '-march=x86-64']
+  ignore line: [Linking C executable cmTC_59350]
+  ignore line: [/snap/clion/69/bin/cmake/linux/bin/cmake -E cmake_link_script CMakeFiles/cmTC_59350.dir/link.txt --verbose=1]
+  ignore line: [/usr/bin/cc     -v CMakeFiles/cmTC_59350.dir/CMakeCCompilerABI.c.o  -o cmTC_59350 ]
+  ignore line: [Using built-in specs.]
+  ignore line: [COLLECT_GCC=/usr/bin/cc]
+  ignore line: [COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/7/lto-wrapper]
+  ignore line: [OFFLOAD_TARGET_NAMES=nvptx-none]
+  ignore line: [OFFLOAD_TARGET_DEFAULT=1]
+  ignore line: [Target: x86_64-linux-gnu]
+  ignore line: [Configured with: ../src/configure -v --with-pkgversion='Ubuntu 7.3.0-27ubuntu1~18.04' --with-bugurl=file:///usr/share/doc/gcc-7/README.Bugs --enable-languages=c,ada,c++,go,brig,d,fortran,objc,obj-c++ --prefix=/usr --with-gcc-major-version-only --program-suffix=-7 --program-prefix=x86_64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-libmpx --enable-plugin --enable-default-pie --with-system-zlib --with-target-system-zlib --enable-objc-gc=auto --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-offload-targets=nvptx-none --without-cuda-driver --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu]
+  ignore line: [Thread model: posix]
+  ignore line: [gcc version 7.3.0 (Ubuntu 7.3.0-27ubuntu1~18.04) ]
+  ignore line: [COMPILER_PATH=/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/]
+  ignore line: [LIBRARY_PATH=/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib/:/lib/x86_64-linux-gnu/:/lib/../lib/:/usr/lib/x86_64-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../:/lib/:/usr/lib/]
+  ignore line: [COLLECT_GCC_OPTIONS='-v' '-o' 'cmTC_59350' '-mtune=generic' '-march=x86-64']
+  link line: [ /usr/lib/gcc/x86_64-linux-gnu/7/collect2 -plugin /usr/lib/gcc/x86_64-linux-gnu/7/liblto_plugin.so -plugin-opt=/usr/lib/gcc/x86_64-linux-gnu/7/lto-wrapper -plugin-opt=-fresolution=/tmp/ccFGDuC9.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s --sysroot=/ --build-id --eh-frame-hdr -m elf_x86_64 --hash-style=gnu --as-needed -dynamic-linker /lib64/ld-linux-x86-64.so.2 -pie -z now -z relro -o cmTC_59350 /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/Scrt1.o /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/7/crtbeginS.o -L/usr/lib/gcc/x86_64-linux-gnu/7 -L/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/7/../../.. CMakeFiles/cmTC_59350.dir/CMakeCCompilerABI.c.o -lgcc --push-state --as-needed -lgcc_s --pop-state -lc -lgcc --push-state --as-needed -lgcc_s --pop-state /usr/lib/gcc/x86_64-linux-gnu/7/crtendS.o /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crtn.o]
+    arg [/usr/lib/gcc/x86_64-linux-gnu/7/collect2] ==> ignore
+    arg [-plugin] ==> ignore
+    arg [/usr/lib/gcc/x86_64-linux-gnu/7/liblto_plugin.so] ==> ignore
+    arg [-plugin-opt=/usr/lib/gcc/x86_64-linux-gnu/7/lto-wrapper] ==> ignore
+    arg [-plugin-opt=-fresolution=/tmp/ccFGDuC9.res] ==> ignore
+    arg [-plugin-opt=-pass-through=-lgcc] ==> ignore
+    arg [-plugin-opt=-pass-through=-lgcc_s] ==> ignore
+    arg [-plugin-opt=-pass-through=-lc] ==> ignore
+    arg [-plugin-opt=-pass-through=-lgcc] ==> ignore
+    arg [-plugin-opt=-pass-through=-lgcc_s] ==> ignore
+    arg [--sysroot=/] ==> ignore
+    arg [--build-id] ==> ignore
+    arg [--eh-frame-hdr] ==> ignore
+    arg [-m] ==> ignore
+    arg [elf_x86_64] ==> ignore
+    arg [--hash-style=gnu] ==> ignore
+    arg [--as-needed] ==> ignore
+    arg [-dynamic-linker] ==> ignore
+    arg [/lib64/ld-linux-x86-64.so.2] ==> ignore
+    arg [-pie] ==> ignore
+    arg [-znow] ==> ignore
+    arg [-zrelro] ==> ignore
+    arg [-o] ==> ignore
+    arg [cmTC_59350] ==> ignore
+    arg [/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/Scrt1.o] ==> ignore
+    arg [/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crti.o] ==> ignore
+    arg [/usr/lib/gcc/x86_64-linux-gnu/7/crtbeginS.o] ==> ignore
+    arg [-L/usr/lib/gcc/x86_64-linux-gnu/7] ==> dir [/usr/lib/gcc/x86_64-linux-gnu/7]
+    arg [-L/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu] ==> dir [/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu]
+    arg [-L/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib] ==> dir [/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib]
+    arg [-L/lib/x86_64-linux-gnu] ==> dir [/lib/x86_64-linux-gnu]
+    arg [-L/lib/../lib] ==> dir [/lib/../lib]
+    arg [-L/usr/lib/x86_64-linux-gnu] ==> dir [/usr/lib/x86_64-linux-gnu]
+    arg [-L/usr/lib/../lib] ==> dir [/usr/lib/../lib]
+    arg [-L/usr/lib/gcc/x86_64-linux-gnu/7/../../..] ==> dir [/usr/lib/gcc/x86_64-linux-gnu/7/../../..]
+    arg [CMakeFiles/cmTC_59350.dir/CMakeCCompilerABI.c.o] ==> ignore
+    arg [-lgcc] ==> lib [gcc]
+    arg [--push-state] ==> ignore
+    arg [--as-needed] ==> ignore
+    arg [-lgcc_s] ==> lib [gcc_s]
+    arg [--pop-state] ==> ignore
+    arg [-lc] ==> lib [c]
+    arg [-lgcc] ==> lib [gcc]
+    arg [--push-state] ==> ignore
+    arg [--as-needed] ==> ignore
+    arg [-lgcc_s] ==> lib [gcc_s]
+    arg [--pop-state] ==> ignore
+    arg [/usr/lib/gcc/x86_64-linux-gnu/7/crtendS.o] ==> ignore
+    arg [/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crtn.o] ==> ignore
+  collapse library dir [/usr/lib/gcc/x86_64-linux-gnu/7] ==> [/usr/lib/gcc/x86_64-linux-gnu/7]
+  collapse library dir [/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu] ==> [/usr/lib/x86_64-linux-gnu]
+  collapse library dir [/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib] ==> [/usr/lib]
+  collapse library dir [/lib/x86_64-linux-gnu] ==> [/lib/x86_64-linux-gnu]
+  collapse library dir [/lib/../lib] ==> [/lib]
+  collapse library dir [/usr/lib/x86_64-linux-gnu] ==> [/usr/lib/x86_64-linux-gnu]
+  collapse library dir [/usr/lib/../lib] ==> [/usr/lib]
+  collapse library dir [/usr/lib/gcc/x86_64-linux-gnu/7/../../..] ==> [/usr/lib]
+  implicit libs: [gcc;gcc_s;c;gcc;gcc_s]
+  implicit dirs: [/usr/lib/gcc/x86_64-linux-gnu/7;/usr/lib/x86_64-linux-gnu;/usr/lib;/lib/x86_64-linux-gnu;/lib]
+  implicit fwks: []
+
+
+
+
+Detecting C [-std=c11] compiler features compiled with the following output:
+Change Dir: /home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/CMakeTmp
+
+Run Build Command(s):/usr/bin/make cmTC_8d85b/fast 
+/usr/bin/make -f CMakeFiles/cmTC_8d85b.dir/build.make CMakeFiles/cmTC_8d85b.dir/build
+make[1]: Entering directory '/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/CMakeTmp'
+Building C object CMakeFiles/cmTC_8d85b.dir/feature_tests.c.o
+/usr/bin/cc   -std=c11 -o CMakeFiles/cmTC_8d85b.dir/feature_tests.c.o   -c /home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/feature_tests.c
+Linking C executable cmTC_8d85b
+/snap/clion/69/bin/cmake/linux/bin/cmake -E cmake_link_script CMakeFiles/cmTC_8d85b.dir/link.txt --verbose=1
+/usr/bin/cc      CMakeFiles/cmTC_8d85b.dir/feature_tests.c.o  -o cmTC_8d85b 
+make[1]: Leaving directory '/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/CMakeTmp'
+
+
+    Feature record: C_FEATURE:1c_function_prototypes
+    Feature record: C_FEATURE:1c_restrict
+    Feature record: C_FEATURE:1c_static_assert
+    Feature record: C_FEATURE:1c_variadic_macros
+
+
+Detecting C [-std=c99] compiler features compiled with the following output:
+Change Dir: /home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/CMakeTmp
+
+Run Build Command(s):/usr/bin/make cmTC_44a1b/fast 
+/usr/bin/make -f CMakeFiles/cmTC_44a1b.dir/build.make CMakeFiles/cmTC_44a1b.dir/build
+make[1]: Entering directory '/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/CMakeTmp'
+Building C object CMakeFiles/cmTC_44a1b.dir/feature_tests.c.o
+/usr/bin/cc   -std=c99 -o CMakeFiles/cmTC_44a1b.dir/feature_tests.c.o   -c /home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/feature_tests.c
+Linking C executable cmTC_44a1b
+/snap/clion/69/bin/cmake/linux/bin/cmake -E cmake_link_script CMakeFiles/cmTC_44a1b.dir/link.txt --verbose=1
+/usr/bin/cc      CMakeFiles/cmTC_44a1b.dir/feature_tests.c.o  -o cmTC_44a1b 
+make[1]: Leaving directory '/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/CMakeTmp'
+
+
+    Feature record: C_FEATURE:1c_function_prototypes
+    Feature record: C_FEATURE:1c_restrict
+    Feature record: C_FEATURE:0c_static_assert
+    Feature record: C_FEATURE:1c_variadic_macros
+
+
+Detecting C [-std=c90] compiler features compiled with the following output:
+Change Dir: /home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/CMakeTmp
+
+Run Build Command(s):/usr/bin/make cmTC_c373e/fast 
+/usr/bin/make -f CMakeFiles/cmTC_c373e.dir/build.make CMakeFiles/cmTC_c373e.dir/build
+make[1]: Entering directory '/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/CMakeTmp'
+Building C object CMakeFiles/cmTC_c373e.dir/feature_tests.c.o
+/usr/bin/cc   -std=c90 -o CMakeFiles/cmTC_c373e.dir/feature_tests.c.o   -c /home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/feature_tests.c
+Linking C executable cmTC_c373e
+/snap/clion/69/bin/cmake/linux/bin/cmake -E cmake_link_script CMakeFiles/cmTC_c373e.dir/link.txt --verbose=1
+/usr/bin/cc      CMakeFiles/cmTC_c373e.dir/feature_tests.c.o  -o cmTC_c373e 
+make[1]: Leaving directory '/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/CMakeTmp'
+
+
+    Feature record: C_FEATURE:1c_function_prototypes
+    Feature record: C_FEATURE:0c_restrict
+    Feature record: C_FEATURE:0c_static_assert
+    Feature record: C_FEATURE:0c_variadic_macros
diff --git a/cmake-build-debug/CMakeFiles/Makefile.cmake b/cmake-build-debug/CMakeFiles/Makefile.cmake
new file mode 100644
index 0000000..76ccb20
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/Makefile.cmake
@@ -0,0 +1,103 @@
+# CMAKE generated file: DO NOT EDIT!
+# Generated by "Unix Makefiles" Generator, CMake Version 3.14
+
+# The generator used is:
+set(CMAKE_DEPENDS_GENERATOR "Unix Makefiles")
+
+# The top level Makefile was generated from the following files:
+set(CMAKE_MAKEFILE_DEPENDS
+  "CMakeCache.txt"
+  "../CMakeLists.txt"
+  "CMakeFiles/3.14.2/CMakeCCompiler.cmake"
+  "CMakeFiles/3.14.2/CMakeSystem.cmake"
+  "CMakeFiles/feature_tests.c"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/CMakeCCompiler.cmake.in"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/CMakeCCompilerABI.c"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/CMakeCInformation.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/CMakeCheckCompilerFlagCommonPatterns.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/CMakeCommonLanguageInclude.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/CMakeCompilerIdDetection.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/CMakeDetermineCCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/CMakeDetermineCompileFeatures.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/CMakeDetermineCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/CMakeDetermineCompilerABI.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/CMakeDetermineCompilerId.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/CMakeDetermineSystem.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/CMakeExtraGeneratorDetermineCompilerMacrosAndIncludeDirs.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/CMakeFindBinUtils.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/CMakeFindCodeBlocks.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/CMakeGenericSystem.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/CMakeInitializeConfigs.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/CMakeLanguageInformation.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/CMakeParseImplicitIncludeInfo.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/CMakeParseImplicitLinkInfo.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/CMakeSystem.cmake.in"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/CMakeSystemSpecificInformation.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/CMakeSystemSpecificInitialize.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/CMakeTestCCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/CMakeTestCompilerCommon.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/CMakeUnixFindMake.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/ADSP-DetermineCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/ARMCC-DetermineCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/AppleClang-DetermineCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/Borland-DetermineCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/Bruce-C-DetermineCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/CMakeCommonCompilerMacros.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/Clang-DetermineCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/Clang-DetermineCompilerInternal.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/Compaq-C-DetermineCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/Cray-DetermineCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/Embarcadero-DetermineCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/Fujitsu-DetermineCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/GHS-DetermineCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/GNU-C-DetermineCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/GNU-C-FeatureTests.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/GNU-C.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/GNU-FindBinUtils.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/GNU.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/HP-C-DetermineCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/IAR-DetermineCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/Intel-DetermineCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/MIPSpro-DetermineCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/MSVC-DetermineCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/NVIDIA-DetermineCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/PGI-DetermineCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/PathScale-DetermineCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/SCO-DetermineCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/SDCC-C-DetermineCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/SunPro-C-DetermineCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/TI-DetermineCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/TinyCC-C-DetermineCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/Watcom-DetermineCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/XL-C-DetermineCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Compiler/zOS-C-DetermineCompiler.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Internal/CMakeCheckCompilerFlag.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Internal/FeatureTesting.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Platform/Linux-GNU-C.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Platform/Linux-GNU.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Platform/Linux.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/Platform/UnixPaths.cmake"
+  "/snap/clion/69/bin/cmake/linux/share/cmake-3.14/Modules/ProcessorCount.cmake"
+  )
+
+# The corresponding makefile is:
+set(CMAKE_MAKEFILE_OUTPUTS
+  "Makefile"
+  "CMakeFiles/cmake.check_cache"
+  )
+
+# Byproducts of CMake generate step:
+set(CMAKE_MAKEFILE_PRODUCTS
+  "CMakeFiles/3.14.2/CMakeSystem.cmake"
+  "CMakeFiles/3.14.2/CMakeCCompiler.cmake"
+  "CMakeFiles/3.14.2/CMakeCCompiler.cmake"
+  "CMakeFiles/CMakeDirectoryInformation.cmake"
+  )
+
+# Dependency information for all targets:
+set(CMAKE_DEPEND_INFO_FILES
+  "CMakeFiles/Assignment2.dir/DependInfo.cmake"
+  )
diff --git a/cmake-build-debug/CMakeFiles/Makefile2 b/cmake-build-debug/CMakeFiles/Makefile2
new file mode 100644
index 0000000..27f3d64
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/Makefile2
@@ -0,0 +1,113 @@
+# CMAKE generated file: DO NOT EDIT!
+# Generated by "Unix Makefiles" Generator, CMake Version 3.14
+
+# Default target executed when no arguments are given to make.
+default_target: all
+
+.PHONY : default_target
+
+# The main recursive all target
+all:
+
+.PHONY : all
+
+# The main recursive preinstall target
+preinstall:
+
+.PHONY : preinstall
+
+# The main recursive clean target
+clean:
+
+.PHONY : clean
+
+#=============================================================================
+# Special targets provided by cmake.
+
+# Disable implicit rules so canonical targets will work.
+.SUFFIXES:
+
+
+# Remove some rules from gmake that .SUFFIXES does not remove.
+SUFFIXES =
+
+.SUFFIXES: .hpux_make_needs_suffix_list
+
+
+# Suppress display of executed commands.
+$(VERBOSE).SILENT:
+
+
+# A target that is always out of date.
+cmake_force:
+
+.PHONY : cmake_force
+
+#=============================================================================
+# Set environment variables for the build.
+
+# The shell in which to execute make rules.
+SHELL = /bin/sh
+
+# The CMake executable.
+CMAKE_COMMAND = /snap/clion/69/bin/cmake/linux/bin/cmake
+
+# The command to remove a file.
+RM = /snap/clion/69/bin/cmake/linux/bin/cmake -E remove -f
+
+# Escaping for special characters.
+EQUALS = =
+
+# The top-level source directory on which CMake was run.
+CMAKE_SOURCE_DIR = /home/tamar/Documents/Assignment2
+
+# The top-level build directory on which CMake was run.
+CMAKE_BINARY_DIR = /home/tamar/Documents/Assignment2/cmake-build-debug
+
+#=============================================================================
+# Target rules for target CMakeFiles/Assignment2.dir
+
+# All Build rule for target.
+CMakeFiles/Assignment2.dir/all:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/depend
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/build
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --progress-dir=/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles --progress-num=1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50 "Built target Assignment2"
+.PHONY : CMakeFiles/Assignment2.dir/all
+
+# Include target in all.
+all: CMakeFiles/Assignment2.dir/all
+
+.PHONY : all
+
+# Build rule for subdir invocation for target.
+CMakeFiles/Assignment2.dir/rule: cmake_check_build_system
+	$(CMAKE_COMMAND) -E cmake_progress_start /home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles 50
+	$(MAKE) -f CMakeFiles/Makefile2 CMakeFiles/Assignment2.dir/all
+	$(CMAKE_COMMAND) -E cmake_progress_start /home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles 0
+.PHONY : CMakeFiles/Assignment2.dir/rule
+
+# Convenience name for target.
+Assignment2: CMakeFiles/Assignment2.dir/rule
+
+.PHONY : Assignment2
+
+# clean rule for target.
+CMakeFiles/Assignment2.dir/clean:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/clean
+.PHONY : CMakeFiles/Assignment2.dir/clean
+
+# clean rule for target.
+clean: CMakeFiles/Assignment2.dir/clean
+
+.PHONY : clean
+
+#=============================================================================
+# Special targets to cleanup operation of make.
+
+# Special rule to run CMake to check the build system integrity.
+# No rule that depends on this can have commands that come from listfiles
+# because they might be regenerated.
+cmake_check_build_system:
+	$(CMAKE_COMMAND) -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 0
+.PHONY : cmake_check_build_system
+
diff --git a/cmake-build-debug/CMakeFiles/TargetDirectories.txt b/cmake-build-debug/CMakeFiles/TargetDirectories.txt
new file mode 100644
index 0000000..4839910
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/TargetDirectories.txt
@@ -0,0 +1,3 @@
+/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/rebuild_cache.dir
+/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/Assignment2.dir
+/home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/edit_cache.dir
diff --git a/cmake-build-debug/CMakeFiles/clion-environment.txt b/cmake-build-debug/CMakeFiles/clion-environment.txt
new file mode 100644
index 0000000..270d93c
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/clion-environment.txt
@@ -0,0 +1,3 @@
+ToolSet: 1.0 (local)Options: 
+
+Options:
\ No newline at end of file
diff --git a/cmake-build-debug/CMakeFiles/clion-log.txt b/cmake-build-debug/CMakeFiles/clion-log.txt
new file mode 100644
index 0000000..219f6be
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/clion-log.txt
@@ -0,0 +1,11 @@
+/snap/clion/69/bin/cmake/linux/bin/cmake -DCMAKE_BUILD_TYPE=Debug -G "CodeBlocks - Unix Makefiles" /home/tamar/Documents/Assignment2
+-- The C compiler identification is GNU 7.3.0
+-- Check for working C compiler: /usr/bin/cc
+-- Check for working C compiler: /usr/bin/cc -- works
+-- Detecting C compiler ABI info
+-- Detecting C compiler ABI info - done
+-- Detecting C compile features
+-- Detecting C compile features - done
+-- Configuring done
+-- Generating done
+-- Build files have been written to: /home/tamar/Documents/Assignment2/cmake-build-debug
diff --git a/cmake-build-debug/CMakeFiles/cmake.check_cache b/cmake-build-debug/CMakeFiles/cmake.check_cache
new file mode 100644
index 0000000..3dccd73
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/cmake.check_cache
@@ -0,0 +1 @@
+# This file is generated by cmake for dependency checking of the CMakeCache.txt file
diff --git a/cmake-build-debug/CMakeFiles/feature_tests.bin b/cmake-build-debug/CMakeFiles/feature_tests.bin
new file mode 100755
index 0000000..a98f23d
Binary files /dev/null and b/cmake-build-debug/CMakeFiles/feature_tests.bin differ
diff --git a/cmake-build-debug/CMakeFiles/feature_tests.c b/cmake-build-debug/CMakeFiles/feature_tests.c
new file mode 100644
index 0000000..83e86dd
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/feature_tests.c
@@ -0,0 +1,34 @@
+
+  const char features[] = {"\n"
+"C_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 304
+"1"
+#else
+"0"
+#endif
+"c_function_prototypes\n"
+"C_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 304 && defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
+"1"
+#else
+"0"
+#endif
+"c_restrict\n"
+"C_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 406 && defined(__STDC_VERSION__) && __STDC_VERSION__ >= 201000L
+"1"
+#else
+"0"
+#endif
+"c_static_assert\n"
+"C_FEATURE:"
+#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 304 && defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
+"1"
+#else
+"0"
+#endif
+"c_variadic_macros\n"
+
+};
+
+int main(int argc, char** argv) { (void)argv; return features[argc]; }
diff --git a/cmake-build-debug/CMakeFiles/progress.marks b/cmake-build-debug/CMakeFiles/progress.marks
new file mode 100644
index 0000000..e373ee6
--- /dev/null
+++ b/cmake-build-debug/CMakeFiles/progress.marks
@@ -0,0 +1 @@
+50
diff --git a/cmake-build-debug/Makefile b/cmake-build-debug/Makefile
new file mode 100644
index 0000000..3d82ab1
--- /dev/null
+++ b/cmake-build-debug/Makefile
@@ -0,0 +1,1618 @@
+# CMAKE generated file: DO NOT EDIT!
+# Generated by "Unix Makefiles" Generator, CMake Version 3.14
+
+# Default target executed when no arguments are given to make.
+default_target: all
+
+.PHONY : default_target
+
+# Allow only one "make -f Makefile2" at a time, but pass parallelism.
+.NOTPARALLEL:
+
+
+#=============================================================================
+# Special targets provided by cmake.
+
+# Disable implicit rules so canonical targets will work.
+.SUFFIXES:
+
+
+# Remove some rules from gmake that .SUFFIXES does not remove.
+SUFFIXES =
+
+.SUFFIXES: .hpux_make_needs_suffix_list
+
+
+# Suppress display of executed commands.
+$(VERBOSE).SILENT:
+
+
+# A target that is always out of date.
+cmake_force:
+
+.PHONY : cmake_force
+
+#=============================================================================
+# Set environment variables for the build.
+
+# The shell in which to execute make rules.
+SHELL = /bin/sh
+
+# The CMake executable.
+CMAKE_COMMAND = /snap/clion/69/bin/cmake/linux/bin/cmake
+
+# The command to remove a file.
+RM = /snap/clion/69/bin/cmake/linux/bin/cmake -E remove -f
+
+# Escaping for special characters.
+EQUALS = =
+
+# The top-level source directory on which CMake was run.
+CMAKE_SOURCE_DIR = /home/tamar/Documents/Assignment2
+
+# The top-level build directory on which CMake was run.
+CMAKE_BINARY_DIR = /home/tamar/Documents/Assignment2/cmake-build-debug
+
+#=============================================================================
+# Targets provided globally by CMake.
+
+# Special rule for the target rebuild_cache
+rebuild_cache:
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Running CMake to regenerate build system..."
+	/snap/clion/69/bin/cmake/linux/bin/cmake -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR)
+.PHONY : rebuild_cache
+
+# Special rule for the target rebuild_cache
+rebuild_cache/fast: rebuild_cache
+
+.PHONY : rebuild_cache/fast
+
+# Special rule for the target edit_cache
+edit_cache:
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "No interactive CMake dialog available..."
+	/snap/clion/69/bin/cmake/linux/bin/cmake -E echo No\ interactive\ CMake\ dialog\ available.
+.PHONY : edit_cache
+
+# Special rule for the target edit_cache
+edit_cache/fast: edit_cache
+
+.PHONY : edit_cache/fast
+
+# The main all target
+all: cmake_check_build_system
+	$(CMAKE_COMMAND) -E cmake_progress_start /home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles /home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles/progress.marks
+	$(MAKE) -f CMakeFiles/Makefile2 all
+	$(CMAKE_COMMAND) -E cmake_progress_start /home/tamar/Documents/Assignment2/cmake-build-debug/CMakeFiles 0
+.PHONY : all
+
+# The main clean target
+clean:
+	$(MAKE) -f CMakeFiles/Makefile2 clean
+.PHONY : clean
+
+# The main clean target
+clean/fast: clean
+
+.PHONY : clean/fast
+
+# Prepare targets for installation.
+preinstall: all
+	$(MAKE) -f CMakeFiles/Makefile2 preinstall
+.PHONY : preinstall
+
+# Prepare targets for installation.
+preinstall/fast:
+	$(MAKE) -f CMakeFiles/Makefile2 preinstall
+.PHONY : preinstall/fast
+
+# clear depends
+depend:
+	$(CMAKE_COMMAND) -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 1
+.PHONY : depend
+
+#=============================================================================
+# Target rules for targets named Assignment2
+
+# Build rule for target.
+Assignment2: cmake_check_build_system
+	$(MAKE) -f CMakeFiles/Makefile2 Assignment2
+.PHONY : Assignment2
+
+# fast build rule for target.
+Assignment2/fast:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/build
+.PHONY : Assignment2/fast
+
+bio.o: bio.c.o
+
+.PHONY : bio.o
+
+# target to build an object file
+bio.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/bio.c.o
+.PHONY : bio.c.o
+
+bio.i: bio.c.i
+
+.PHONY : bio.i
+
+# target to preprocess a source file
+bio.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/bio.c.i
+.PHONY : bio.c.i
+
+bio.s: bio.c.s
+
+.PHONY : bio.s
+
+# target to generate assembly for a file
+bio.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/bio.c.s
+.PHONY : bio.c.s
+
+bootmain.o: bootmain.c.o
+
+.PHONY : bootmain.o
+
+# target to build an object file
+bootmain.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/bootmain.c.o
+.PHONY : bootmain.c.o
+
+bootmain.i: bootmain.c.i
+
+.PHONY : bootmain.i
+
+# target to preprocess a source file
+bootmain.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/bootmain.c.i
+.PHONY : bootmain.c.i
+
+bootmain.s: bootmain.c.s
+
+.PHONY : bootmain.s
+
+# target to generate assembly for a file
+bootmain.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/bootmain.c.s
+.PHONY : bootmain.c.s
+
+cat.o: cat.c.o
+
+.PHONY : cat.o
+
+# target to build an object file
+cat.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/cat.c.o
+.PHONY : cat.c.o
+
+cat.i: cat.c.i
+
+.PHONY : cat.i
+
+# target to preprocess a source file
+cat.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/cat.c.i
+.PHONY : cat.c.i
+
+cat.s: cat.c.s
+
+.PHONY : cat.s
+
+# target to generate assembly for a file
+cat.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/cat.c.s
+.PHONY : cat.c.s
+
+console.o: console.c.o
+
+.PHONY : console.o
+
+# target to build an object file
+console.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/console.c.o
+.PHONY : console.c.o
+
+console.i: console.c.i
+
+.PHONY : console.i
+
+# target to preprocess a source file
+console.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/console.c.i
+.PHONY : console.c.i
+
+console.s: console.c.s
+
+.PHONY : console.s
+
+# target to generate assembly for a file
+console.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/console.c.s
+.PHONY : console.c.s
+
+echo.o: echo.c.o
+
+.PHONY : echo.o
+
+# target to build an object file
+echo.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/echo.c.o
+.PHONY : echo.c.o
+
+echo.i: echo.c.i
+
+.PHONY : echo.i
+
+# target to preprocess a source file
+echo.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/echo.c.i
+.PHONY : echo.c.i
+
+echo.s: echo.c.s
+
+.PHONY : echo.s
+
+# target to generate assembly for a file
+echo.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/echo.c.s
+.PHONY : echo.c.s
+
+exec.o: exec.c.o
+
+.PHONY : exec.o
+
+# target to build an object file
+exec.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/exec.c.o
+.PHONY : exec.c.o
+
+exec.i: exec.c.i
+
+.PHONY : exec.i
+
+# target to preprocess a source file
+exec.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/exec.c.i
+.PHONY : exec.c.i
+
+exec.s: exec.c.s
+
+.PHONY : exec.s
+
+# target to generate assembly for a file
+exec.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/exec.c.s
+.PHONY : exec.c.s
+
+file.o: file.c.o
+
+.PHONY : file.o
+
+# target to build an object file
+file.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/file.c.o
+.PHONY : file.c.o
+
+file.i: file.c.i
+
+.PHONY : file.i
+
+# target to preprocess a source file
+file.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/file.c.i
+.PHONY : file.c.i
+
+file.s: file.c.s
+
+.PHONY : file.s
+
+# target to generate assembly for a file
+file.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/file.c.s
+.PHONY : file.c.s
+
+forktest.o: forktest.c.o
+
+.PHONY : forktest.o
+
+# target to build an object file
+forktest.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/forktest.c.o
+.PHONY : forktest.c.o
+
+forktest.i: forktest.c.i
+
+.PHONY : forktest.i
+
+# target to preprocess a source file
+forktest.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/forktest.c.i
+.PHONY : forktest.c.i
+
+forktest.s: forktest.c.s
+
+.PHONY : forktest.s
+
+# target to generate assembly for a file
+forktest.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/forktest.c.s
+.PHONY : forktest.c.s
+
+fs.o: fs.c.o
+
+.PHONY : fs.o
+
+# target to build an object file
+fs.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/fs.c.o
+.PHONY : fs.c.o
+
+fs.i: fs.c.i
+
+.PHONY : fs.i
+
+# target to preprocess a source file
+fs.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/fs.c.i
+.PHONY : fs.c.i
+
+fs.s: fs.c.s
+
+.PHONY : fs.s
+
+# target to generate assembly for a file
+fs.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/fs.c.s
+.PHONY : fs.c.s
+
+grep.o: grep.c.o
+
+.PHONY : grep.o
+
+# target to build an object file
+grep.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/grep.c.o
+.PHONY : grep.c.o
+
+grep.i: grep.c.i
+
+.PHONY : grep.i
+
+# target to preprocess a source file
+grep.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/grep.c.i
+.PHONY : grep.c.i
+
+grep.s: grep.c.s
+
+.PHONY : grep.s
+
+# target to generate assembly for a file
+grep.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/grep.c.s
+.PHONY : grep.c.s
+
+ide.o: ide.c.o
+
+.PHONY : ide.o
+
+# target to build an object file
+ide.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/ide.c.o
+.PHONY : ide.c.o
+
+ide.i: ide.c.i
+
+.PHONY : ide.i
+
+# target to preprocess a source file
+ide.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/ide.c.i
+.PHONY : ide.c.i
+
+ide.s: ide.c.s
+
+.PHONY : ide.s
+
+# target to generate assembly for a file
+ide.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/ide.c.s
+.PHONY : ide.c.s
+
+init.o: init.c.o
+
+.PHONY : init.o
+
+# target to build an object file
+init.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/init.c.o
+.PHONY : init.c.o
+
+init.i: init.c.i
+
+.PHONY : init.i
+
+# target to preprocess a source file
+init.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/init.c.i
+.PHONY : init.c.i
+
+init.s: init.c.s
+
+.PHONY : init.s
+
+# target to generate assembly for a file
+init.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/init.c.s
+.PHONY : init.c.s
+
+ioapic.o: ioapic.c.o
+
+.PHONY : ioapic.o
+
+# target to build an object file
+ioapic.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/ioapic.c.o
+.PHONY : ioapic.c.o
+
+ioapic.i: ioapic.c.i
+
+.PHONY : ioapic.i
+
+# target to preprocess a source file
+ioapic.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/ioapic.c.i
+.PHONY : ioapic.c.i
+
+ioapic.s: ioapic.c.s
+
+.PHONY : ioapic.s
+
+# target to generate assembly for a file
+ioapic.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/ioapic.c.s
+.PHONY : ioapic.c.s
+
+kalloc.o: kalloc.c.o
+
+.PHONY : kalloc.o
+
+# target to build an object file
+kalloc.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/kalloc.c.o
+.PHONY : kalloc.c.o
+
+kalloc.i: kalloc.c.i
+
+.PHONY : kalloc.i
+
+# target to preprocess a source file
+kalloc.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/kalloc.c.i
+.PHONY : kalloc.c.i
+
+kalloc.s: kalloc.c.s
+
+.PHONY : kalloc.s
+
+# target to generate assembly for a file
+kalloc.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/kalloc.c.s
+.PHONY : kalloc.c.s
+
+kbd.o: kbd.c.o
+
+.PHONY : kbd.o
+
+# target to build an object file
+kbd.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/kbd.c.o
+.PHONY : kbd.c.o
+
+kbd.i: kbd.c.i
+
+.PHONY : kbd.i
+
+# target to preprocess a source file
+kbd.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/kbd.c.i
+.PHONY : kbd.c.i
+
+kbd.s: kbd.c.s
+
+.PHONY : kbd.s
+
+# target to generate assembly for a file
+kbd.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/kbd.c.s
+.PHONY : kbd.c.s
+
+kill.o: kill.c.o
+
+.PHONY : kill.o
+
+# target to build an object file
+kill.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/kill.c.o
+.PHONY : kill.c.o
+
+kill.i: kill.c.i
+
+.PHONY : kill.i
+
+# target to preprocess a source file
+kill.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/kill.c.i
+.PHONY : kill.c.i
+
+kill.s: kill.c.s
+
+.PHONY : kill.s
+
+# target to generate assembly for a file
+kill.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/kill.c.s
+.PHONY : kill.c.s
+
+lapic.o: lapic.c.o
+
+.PHONY : lapic.o
+
+# target to build an object file
+lapic.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/lapic.c.o
+.PHONY : lapic.c.o
+
+lapic.i: lapic.c.i
+
+.PHONY : lapic.i
+
+# target to preprocess a source file
+lapic.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/lapic.c.i
+.PHONY : lapic.c.i
+
+lapic.s: lapic.c.s
+
+.PHONY : lapic.s
+
+# target to generate assembly for a file
+lapic.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/lapic.c.s
+.PHONY : lapic.c.s
+
+ln.o: ln.c.o
+
+.PHONY : ln.o
+
+# target to build an object file
+ln.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/ln.c.o
+.PHONY : ln.c.o
+
+ln.i: ln.c.i
+
+.PHONY : ln.i
+
+# target to preprocess a source file
+ln.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/ln.c.i
+.PHONY : ln.c.i
+
+ln.s: ln.c.s
+
+.PHONY : ln.s
+
+# target to generate assembly for a file
+ln.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/ln.c.s
+.PHONY : ln.c.s
+
+log.o: log.c.o
+
+.PHONY : log.o
+
+# target to build an object file
+log.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/log.c.o
+.PHONY : log.c.o
+
+log.i: log.c.i
+
+.PHONY : log.i
+
+# target to preprocess a source file
+log.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/log.c.i
+.PHONY : log.c.i
+
+log.s: log.c.s
+
+.PHONY : log.s
+
+# target to generate assembly for a file
+log.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/log.c.s
+.PHONY : log.c.s
+
+ls.o: ls.c.o
+
+.PHONY : ls.o
+
+# target to build an object file
+ls.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/ls.c.o
+.PHONY : ls.c.o
+
+ls.i: ls.c.i
+
+.PHONY : ls.i
+
+# target to preprocess a source file
+ls.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/ls.c.i
+.PHONY : ls.c.i
+
+ls.s: ls.c.s
+
+.PHONY : ls.s
+
+# target to generate assembly for a file
+ls.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/ls.c.s
+.PHONY : ls.c.s
+
+main.o: main.c.o
+
+.PHONY : main.o
+
+# target to build an object file
+main.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/main.c.o
+.PHONY : main.c.o
+
+main.i: main.c.i
+
+.PHONY : main.i
+
+# target to preprocess a source file
+main.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/main.c.i
+.PHONY : main.c.i
+
+main.s: main.c.s
+
+.PHONY : main.s
+
+# target to generate assembly for a file
+main.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/main.c.s
+.PHONY : main.c.s
+
+memide.o: memide.c.o
+
+.PHONY : memide.o
+
+# target to build an object file
+memide.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/memide.c.o
+.PHONY : memide.c.o
+
+memide.i: memide.c.i
+
+.PHONY : memide.i
+
+# target to preprocess a source file
+memide.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/memide.c.i
+.PHONY : memide.c.i
+
+memide.s: memide.c.s
+
+.PHONY : memide.s
+
+# target to generate assembly for a file
+memide.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/memide.c.s
+.PHONY : memide.c.s
+
+mkdir.o: mkdir.c.o
+
+.PHONY : mkdir.o
+
+# target to build an object file
+mkdir.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/mkdir.c.o
+.PHONY : mkdir.c.o
+
+mkdir.i: mkdir.c.i
+
+.PHONY : mkdir.i
+
+# target to preprocess a source file
+mkdir.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/mkdir.c.i
+.PHONY : mkdir.c.i
+
+mkdir.s: mkdir.c.s
+
+.PHONY : mkdir.s
+
+# target to generate assembly for a file
+mkdir.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/mkdir.c.s
+.PHONY : mkdir.c.s
+
+mkfs.o: mkfs.c.o
+
+.PHONY : mkfs.o
+
+# target to build an object file
+mkfs.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/mkfs.c.o
+.PHONY : mkfs.c.o
+
+mkfs.i: mkfs.c.i
+
+.PHONY : mkfs.i
+
+# target to preprocess a source file
+mkfs.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/mkfs.c.i
+.PHONY : mkfs.c.i
+
+mkfs.s: mkfs.c.s
+
+.PHONY : mkfs.s
+
+# target to generate assembly for a file
+mkfs.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/mkfs.c.s
+.PHONY : mkfs.c.s
+
+mp.o: mp.c.o
+
+.PHONY : mp.o
+
+# target to build an object file
+mp.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/mp.c.o
+.PHONY : mp.c.o
+
+mp.i: mp.c.i
+
+.PHONY : mp.i
+
+# target to preprocess a source file
+mp.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/mp.c.i
+.PHONY : mp.c.i
+
+mp.s: mp.c.s
+
+.PHONY : mp.s
+
+# target to generate assembly for a file
+mp.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/mp.c.s
+.PHONY : mp.c.s
+
+picirq.o: picirq.c.o
+
+.PHONY : picirq.o
+
+# target to build an object file
+picirq.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/picirq.c.o
+.PHONY : picirq.c.o
+
+picirq.i: picirq.c.i
+
+.PHONY : picirq.i
+
+# target to preprocess a source file
+picirq.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/picirq.c.i
+.PHONY : picirq.c.i
+
+picirq.s: picirq.c.s
+
+.PHONY : picirq.s
+
+# target to generate assembly for a file
+picirq.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/picirq.c.s
+.PHONY : picirq.c.s
+
+pipe.o: pipe.c.o
+
+.PHONY : pipe.o
+
+# target to build an object file
+pipe.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/pipe.c.o
+.PHONY : pipe.c.o
+
+pipe.i: pipe.c.i
+
+.PHONY : pipe.i
+
+# target to preprocess a source file
+pipe.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/pipe.c.i
+.PHONY : pipe.c.i
+
+pipe.s: pipe.c.s
+
+.PHONY : pipe.s
+
+# target to generate assembly for a file
+pipe.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/pipe.c.s
+.PHONY : pipe.c.s
+
+printf.o: printf.c.o
+
+.PHONY : printf.o
+
+# target to build an object file
+printf.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/printf.c.o
+.PHONY : printf.c.o
+
+printf.i: printf.c.i
+
+.PHONY : printf.i
+
+# target to preprocess a source file
+printf.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/printf.c.i
+.PHONY : printf.c.i
+
+printf.s: printf.c.s
+
+.PHONY : printf.s
+
+# target to generate assembly for a file
+printf.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/printf.c.s
+.PHONY : printf.c.s
+
+proc.o: proc.c.o
+
+.PHONY : proc.o
+
+# target to build an object file
+proc.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/proc.c.o
+.PHONY : proc.c.o
+
+proc.i: proc.c.i
+
+.PHONY : proc.i
+
+# target to preprocess a source file
+proc.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/proc.c.i
+.PHONY : proc.c.i
+
+proc.s: proc.c.s
+
+.PHONY : proc.s
+
+# target to generate assembly for a file
+proc.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/proc.c.s
+.PHONY : proc.c.s
+
+rm.o: rm.c.o
+
+.PHONY : rm.o
+
+# target to build an object file
+rm.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/rm.c.o
+.PHONY : rm.c.o
+
+rm.i: rm.c.i
+
+.PHONY : rm.i
+
+# target to preprocess a source file
+rm.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/rm.c.i
+.PHONY : rm.c.i
+
+rm.s: rm.c.s
+
+.PHONY : rm.s
+
+# target to generate assembly for a file
+rm.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/rm.c.s
+.PHONY : rm.c.s
+
+sanity.o: sanity.c.o
+
+.PHONY : sanity.o
+
+# target to build an object file
+sanity.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/sanity.c.o
+.PHONY : sanity.c.o
+
+sanity.i: sanity.c.i
+
+.PHONY : sanity.i
+
+# target to preprocess a source file
+sanity.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/sanity.c.i
+.PHONY : sanity.c.i
+
+sanity.s: sanity.c.s
+
+.PHONY : sanity.s
+
+# target to generate assembly for a file
+sanity.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/sanity.c.s
+.PHONY : sanity.c.s
+
+sh.o: sh.c.o
+
+.PHONY : sh.o
+
+# target to build an object file
+sh.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/sh.c.o
+.PHONY : sh.c.o
+
+sh.i: sh.c.i
+
+.PHONY : sh.i
+
+# target to preprocess a source file
+sh.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/sh.c.i
+.PHONY : sh.c.i
+
+sh.s: sh.c.s
+
+.PHONY : sh.s
+
+# target to generate assembly for a file
+sh.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/sh.c.s
+.PHONY : sh.c.s
+
+sleeplock.o: sleeplock.c.o
+
+.PHONY : sleeplock.o
+
+# target to build an object file
+sleeplock.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/sleeplock.c.o
+.PHONY : sleeplock.c.o
+
+sleeplock.i: sleeplock.c.i
+
+.PHONY : sleeplock.i
+
+# target to preprocess a source file
+sleeplock.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/sleeplock.c.i
+.PHONY : sleeplock.c.i
+
+sleeplock.s: sleeplock.c.s
+
+.PHONY : sleeplock.s
+
+# target to generate assembly for a file
+sleeplock.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/sleeplock.c.s
+.PHONY : sleeplock.c.s
+
+spinlock.o: spinlock.c.o
+
+.PHONY : spinlock.o
+
+# target to build an object file
+spinlock.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/spinlock.c.o
+.PHONY : spinlock.c.o
+
+spinlock.i: spinlock.c.i
+
+.PHONY : spinlock.i
+
+# target to preprocess a source file
+spinlock.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/spinlock.c.i
+.PHONY : spinlock.c.i
+
+spinlock.s: spinlock.c.s
+
+.PHONY : spinlock.s
+
+# target to generate assembly for a file
+spinlock.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/spinlock.c.s
+.PHONY : spinlock.c.s
+
+stressfs.o: stressfs.c.o
+
+.PHONY : stressfs.o
+
+# target to build an object file
+stressfs.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/stressfs.c.o
+.PHONY : stressfs.c.o
+
+stressfs.i: stressfs.c.i
+
+.PHONY : stressfs.i
+
+# target to preprocess a source file
+stressfs.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/stressfs.c.i
+.PHONY : stressfs.c.i
+
+stressfs.s: stressfs.c.s
+
+.PHONY : stressfs.s
+
+# target to generate assembly for a file
+stressfs.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/stressfs.c.s
+.PHONY : stressfs.c.s
+
+string.o: string.c.o
+
+.PHONY : string.o
+
+# target to build an object file
+string.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/string.c.o
+.PHONY : string.c.o
+
+string.i: string.c.i
+
+.PHONY : string.i
+
+# target to preprocess a source file
+string.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/string.c.i
+.PHONY : string.c.i
+
+string.s: string.c.s
+
+.PHONY : string.s
+
+# target to generate assembly for a file
+string.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/string.c.s
+.PHONY : string.c.s
+
+syscall.o: syscall.c.o
+
+.PHONY : syscall.o
+
+# target to build an object file
+syscall.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/syscall.c.o
+.PHONY : syscall.c.o
+
+syscall.i: syscall.c.i
+
+.PHONY : syscall.i
+
+# target to preprocess a source file
+syscall.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/syscall.c.i
+.PHONY : syscall.c.i
+
+syscall.s: syscall.c.s
+
+.PHONY : syscall.s
+
+# target to generate assembly for a file
+syscall.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/syscall.c.s
+.PHONY : syscall.c.s
+
+sysfile.o: sysfile.c.o
+
+.PHONY : sysfile.o
+
+# target to build an object file
+sysfile.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/sysfile.c.o
+.PHONY : sysfile.c.o
+
+sysfile.i: sysfile.c.i
+
+.PHONY : sysfile.i
+
+# target to preprocess a source file
+sysfile.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/sysfile.c.i
+.PHONY : sysfile.c.i
+
+sysfile.s: sysfile.c.s
+
+.PHONY : sysfile.s
+
+# target to generate assembly for a file
+sysfile.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/sysfile.c.s
+.PHONY : sysfile.c.s
+
+sysproc.o: sysproc.c.o
+
+.PHONY : sysproc.o
+
+# target to build an object file
+sysproc.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/sysproc.c.o
+.PHONY : sysproc.c.o
+
+sysproc.i: sysproc.c.i
+
+.PHONY : sysproc.i
+
+# target to preprocess a source file
+sysproc.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/sysproc.c.i
+.PHONY : sysproc.c.i
+
+sysproc.s: sysproc.c.s
+
+.PHONY : sysproc.s
+
+# target to generate assembly for a file
+sysproc.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/sysproc.c.s
+.PHONY : sysproc.c.s
+
+tournament_tree.o: tournament_tree.c.o
+
+.PHONY : tournament_tree.o
+
+# target to build an object file
+tournament_tree.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/tournament_tree.c.o
+.PHONY : tournament_tree.c.o
+
+tournament_tree.i: tournament_tree.c.i
+
+.PHONY : tournament_tree.i
+
+# target to preprocess a source file
+tournament_tree.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/tournament_tree.c.i
+.PHONY : tournament_tree.c.i
+
+tournament_tree.s: tournament_tree.c.s
+
+.PHONY : tournament_tree.s
+
+# target to generate assembly for a file
+tournament_tree.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/tournament_tree.c.s
+.PHONY : tournament_tree.c.s
+
+tournamet_tree.o: tournamet_tree.c.o
+
+.PHONY : tournamet_tree.o
+
+# target to build an object file
+tournamet_tree.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/tournamet_tree.c.o
+.PHONY : tournamet_tree.c.o
+
+tournamet_tree.i: tournamet_tree.c.i
+
+.PHONY : tournamet_tree.i
+
+# target to preprocess a source file
+tournamet_tree.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/tournamet_tree.c.i
+.PHONY : tournamet_tree.c.i
+
+tournamet_tree.s: tournamet_tree.c.s
+
+.PHONY : tournamet_tree.s
+
+# target to generate assembly for a file
+tournamet_tree.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/tournamet_tree.c.s
+.PHONY : tournamet_tree.c.s
+
+trap.o: trap.c.o
+
+.PHONY : trap.o
+
+# target to build an object file
+trap.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/trap.c.o
+.PHONY : trap.c.o
+
+trap.i: trap.c.i
+
+.PHONY : trap.i
+
+# target to preprocess a source file
+trap.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/trap.c.i
+.PHONY : trap.c.i
+
+trap.s: trap.c.s
+
+.PHONY : trap.s
+
+# target to generate assembly for a file
+trap.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/trap.c.s
+.PHONY : trap.c.s
+
+uart.o: uart.c.o
+
+.PHONY : uart.o
+
+# target to build an object file
+uart.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/uart.c.o
+.PHONY : uart.c.o
+
+uart.i: uart.c.i
+
+.PHONY : uart.i
+
+# target to preprocess a source file
+uart.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/uart.c.i
+.PHONY : uart.c.i
+
+uart.s: uart.c.s
+
+.PHONY : uart.s
+
+# target to generate assembly for a file
+uart.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/uart.c.s
+.PHONY : uart.c.s
+
+ulib.o: ulib.c.o
+
+.PHONY : ulib.o
+
+# target to build an object file
+ulib.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/ulib.c.o
+.PHONY : ulib.c.o
+
+ulib.i: ulib.c.i
+
+.PHONY : ulib.i
+
+# target to preprocess a source file
+ulib.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/ulib.c.i
+.PHONY : ulib.c.i
+
+ulib.s: ulib.c.s
+
+.PHONY : ulib.s
+
+# target to generate assembly for a file
+ulib.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/ulib.c.s
+.PHONY : ulib.c.s
+
+umalloc.o: umalloc.c.o
+
+.PHONY : umalloc.o
+
+# target to build an object file
+umalloc.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/umalloc.c.o
+.PHONY : umalloc.c.o
+
+umalloc.i: umalloc.c.i
+
+.PHONY : umalloc.i
+
+# target to preprocess a source file
+umalloc.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/umalloc.c.i
+.PHONY : umalloc.c.i
+
+umalloc.s: umalloc.c.s
+
+.PHONY : umalloc.s
+
+# target to generate assembly for a file
+umalloc.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/umalloc.c.s
+.PHONY : umalloc.c.s
+
+usertests.o: usertests.c.o
+
+.PHONY : usertests.o
+
+# target to build an object file
+usertests.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/usertests.c.o
+.PHONY : usertests.c.o
+
+usertests.i: usertests.c.i
+
+.PHONY : usertests.i
+
+# target to preprocess a source file
+usertests.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/usertests.c.i
+.PHONY : usertests.c.i
+
+usertests.s: usertests.c.s
+
+.PHONY : usertests.s
+
+# target to generate assembly for a file
+usertests.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/usertests.c.s
+.PHONY : usertests.c.s
+
+vm.o: vm.c.o
+
+.PHONY : vm.o
+
+# target to build an object file
+vm.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/vm.c.o
+.PHONY : vm.c.o
+
+vm.i: vm.c.i
+
+.PHONY : vm.i
+
+# target to preprocess a source file
+vm.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/vm.c.i
+.PHONY : vm.c.i
+
+vm.s: vm.c.s
+
+.PHONY : vm.s
+
+# target to generate assembly for a file
+vm.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/vm.c.s
+.PHONY : vm.c.s
+
+wc.o: wc.c.o
+
+.PHONY : wc.o
+
+# target to build an object file
+wc.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/wc.c.o
+.PHONY : wc.c.o
+
+wc.i: wc.c.i
+
+.PHONY : wc.i
+
+# target to preprocess a source file
+wc.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/wc.c.i
+.PHONY : wc.c.i
+
+wc.s: wc.c.s
+
+.PHONY : wc.s
+
+# target to generate assembly for a file
+wc.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/wc.c.s
+.PHONY : wc.c.s
+
+zombie.o: zombie.c.o
+
+.PHONY : zombie.o
+
+# target to build an object file
+zombie.c.o:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/zombie.c.o
+.PHONY : zombie.c.o
+
+zombie.i: zombie.c.i
+
+.PHONY : zombie.i
+
+# target to preprocess a source file
+zombie.c.i:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/zombie.c.i
+.PHONY : zombie.c.i
+
+zombie.s: zombie.c.s
+
+.PHONY : zombie.s
+
+# target to generate assembly for a file
+zombie.c.s:
+	$(MAKE) -f CMakeFiles/Assignment2.dir/build.make CMakeFiles/Assignment2.dir/zombie.c.s
+.PHONY : zombie.c.s
+
+# Help Target
+help:
+	@echo "The following are some of the valid targets for this Makefile:"
+	@echo "... all (the default if no target is provided)"
+	@echo "... clean"
+	@echo "... depend"
+	@echo "... rebuild_cache"
+	@echo "... Assignment2"
+	@echo "... edit_cache"
+	@echo "... bio.o"
+	@echo "... bio.i"
+	@echo "... bio.s"
+	@echo "... bootmain.o"
+	@echo "... bootmain.i"
+	@echo "... bootmain.s"
+	@echo "... cat.o"
+	@echo "... cat.i"
+	@echo "... cat.s"
+	@echo "... console.o"
+	@echo "... console.i"
+	@echo "... console.s"
+	@echo "... echo.o"
+	@echo "... echo.i"
+	@echo "... echo.s"
+	@echo "... exec.o"
+	@echo "... exec.i"
+	@echo "... exec.s"
+	@echo "... file.o"
+	@echo "... file.i"
+	@echo "... file.s"
+	@echo "... forktest.o"
+	@echo "... forktest.i"
+	@echo "... forktest.s"
+	@echo "... fs.o"
+	@echo "... fs.i"
+	@echo "... fs.s"
+	@echo "... grep.o"
+	@echo "... grep.i"
+	@echo "... grep.s"
+	@echo "... ide.o"
+	@echo "... ide.i"
+	@echo "... ide.s"
+	@echo "... init.o"
+	@echo "... init.i"
+	@echo "... init.s"
+	@echo "... ioapic.o"
+	@echo "... ioapic.i"
+	@echo "... ioapic.s"
+	@echo "... kalloc.o"
+	@echo "... kalloc.i"
+	@echo "... kalloc.s"
+	@echo "... kbd.o"
+	@echo "... kbd.i"
+	@echo "... kbd.s"
+	@echo "... kill.o"
+	@echo "... kill.i"
+	@echo "... kill.s"
+	@echo "... lapic.o"
+	@echo "... lapic.i"
+	@echo "... lapic.s"
+	@echo "... ln.o"
+	@echo "... ln.i"
+	@echo "... ln.s"
+	@echo "... log.o"
+	@echo "... log.i"
+	@echo "... log.s"
+	@echo "... ls.o"
+	@echo "... ls.i"
+	@echo "... ls.s"
+	@echo "... main.o"
+	@echo "... main.i"
+	@echo "... main.s"
+	@echo "... memide.o"
+	@echo "... memide.i"
+	@echo "... memide.s"
+	@echo "... mkdir.o"
+	@echo "... mkdir.i"
+	@echo "... mkdir.s"
+	@echo "... mkfs.o"
+	@echo "... mkfs.i"
+	@echo "... mkfs.s"
+	@echo "... mp.o"
+	@echo "... mp.i"
+	@echo "... mp.s"
+	@echo "... picirq.o"
+	@echo "... picirq.i"
+	@echo "... picirq.s"
+	@echo "... pipe.o"
+	@echo "... pipe.i"
+	@echo "... pipe.s"
+	@echo "... printf.o"
+	@echo "... printf.i"
+	@echo "... printf.s"
+	@echo "... proc.o"
+	@echo "... proc.i"
+	@echo "... proc.s"
+	@echo "... rm.o"
+	@echo "... rm.i"
+	@echo "... rm.s"
+	@echo "... sanity.o"
+	@echo "... sanity.i"
+	@echo "... sanity.s"
+	@echo "... sh.o"
+	@echo "... sh.i"
+	@echo "... sh.s"
+	@echo "... sleeplock.o"
+	@echo "... sleeplock.i"
+	@echo "... sleeplock.s"
+	@echo "... spinlock.o"
+	@echo "... spinlock.i"
+	@echo "... spinlock.s"
+	@echo "... stressfs.o"
+	@echo "... stressfs.i"
+	@echo "... stressfs.s"
+	@echo "... string.o"
+	@echo "... string.i"
+	@echo "... string.s"
+	@echo "... syscall.o"
+	@echo "... syscall.i"
+	@echo "... syscall.s"
+	@echo "... sysfile.o"
+	@echo "... sysfile.i"
+	@echo "... sysfile.s"
+	@echo "... sysproc.o"
+	@echo "... sysproc.i"
+	@echo "... sysproc.s"
+	@echo "... tournament_tree.o"
+	@echo "... tournament_tree.i"
+	@echo "... tournament_tree.s"
+	@echo "... tournamet_tree.o"
+	@echo "... tournamet_tree.i"
+	@echo "... tournamet_tree.s"
+	@echo "... trap.o"
+	@echo "... trap.i"
+	@echo "... trap.s"
+	@echo "... uart.o"
+	@echo "... uart.i"
+	@echo "... uart.s"
+	@echo "... ulib.o"
+	@echo "... ulib.i"
+	@echo "... ulib.s"
+	@echo "... umalloc.o"
+	@echo "... umalloc.i"
+	@echo "... umalloc.s"
+	@echo "... usertests.o"
+	@echo "... usertests.i"
+	@echo "... usertests.s"
+	@echo "... vm.o"
+	@echo "... vm.i"
+	@echo "... vm.s"
+	@echo "... wc.o"
+	@echo "... wc.i"
+	@echo "... wc.s"
+	@echo "... zombie.o"
+	@echo "... zombie.i"
+	@echo "... zombie.s"
+.PHONY : help
+
+
+
+#=============================================================================
+# Special targets to cleanup operation of make.
+
+# Special rule to run CMake to check the build system integrity.
+# No rule that depends on this can have commands that come from listfiles
+# because they might be regenerated.
+cmake_check_build_system:
+	$(CMAKE_COMMAND) -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 0
+.PHONY : cmake_check_build_system
+
diff --git a/cmake-build-debug/cmake_install.cmake b/cmake-build-debug/cmake_install.cmake
new file mode 100644
index 0000000..e03d0cc
--- /dev/null
+++ b/cmake-build-debug/cmake_install.cmake
@@ -0,0 +1,49 @@
+# Install script for directory: /home/tamar/Documents/Assignment2
+
+# Set the install prefix
+if(NOT DEFINED CMAKE_INSTALL_PREFIX)
+  set(CMAKE_INSTALL_PREFIX "/usr/local")
+endif()
+string(REGEX REPLACE "/$" "" CMAKE_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}")
+
+# Set the install configuration name.
+if(NOT DEFINED CMAKE_INSTALL_CONFIG_NAME)
+  if(BUILD_TYPE)
+    string(REGEX REPLACE "^[^A-Za-z0-9_]+" ""
+           CMAKE_INSTALL_CONFIG_NAME "${BUILD_TYPE}")
+  else()
+    set(CMAKE_INSTALL_CONFIG_NAME "Debug")
+  endif()
+  message(STATUS "Install configuration: \"${CMAKE_INSTALL_CONFIG_NAME}\"")
+endif()
+
+# Set the component getting installed.
+if(NOT CMAKE_INSTALL_COMPONENT)
+  if(COMPONENT)
+    message(STATUS "Install component: \"${COMPONENT}\"")
+    set(CMAKE_INSTALL_COMPONENT "${COMPONENT}")
+  else()
+    set(CMAKE_INSTALL_COMPONENT)
+  endif()
+endif()
+
+# Install shared libraries without execute permission?
+if(NOT DEFINED CMAKE_INSTALL_SO_NO_EXE)
+  set(CMAKE_INSTALL_SO_NO_EXE "1")
+endif()
+
+# Is this installation the result of a crosscompile?
+if(NOT DEFINED CMAKE_CROSSCOMPILING)
+  set(CMAKE_CROSSCOMPILING "FALSE")
+endif()
+
+if(CMAKE_INSTALL_COMPONENT)
+  set(CMAKE_INSTALL_MANIFEST "install_manifest_${CMAKE_INSTALL_COMPONENT}.txt")
+else()
+  set(CMAKE_INSTALL_MANIFEST "install_manifest.txt")
+endif()
+
+string(REPLACE ";" "\n" CMAKE_INSTALL_MANIFEST_CONTENT
+       "${CMAKE_INSTALL_MANIFEST_FILES}")
+file(WRITE "/home/tamar/Documents/Assignment2/cmake-build-debug/${CMAKE_INSTALL_MANIFEST}"
+     "${CMAKE_INSTALL_MANIFEST_CONTENT}")
diff --git a/cuth b/cuth
old mode 100755
new mode 100644
diff --git a/defs.h b/defs.h
index 82fb982..13f95f9 100644
--- a/defs.h
+++ b/defs.h
@@ -4,11 +4,13 @@ struct file;
 struct inode;
 struct pipe;
 struct proc;
+struct thread;
 struct rtcdate;
 struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct kthread_mutex_t;
 
 // bio.c
 void            binit(void);
@@ -105,11 +107,16 @@ int             pipewrite(struct pipe*, char*, int);
 // proc.c
 int             cpuid(void);
 void            exit(void);
+void exit_thread(void);
 int             fork(void);
 int             growproc(int);
 int             kill(int);
 struct cpu*     mycpu(void);
 struct proc*    myproc();
+struct thread*    mythread();
+void            acquire_ptable();
+void            release_ptable();
+struct spinlock*    get_ptable_lock();
 void            pinit(void);
 void            procdump(void);
 void            scheduler(void) __attribute__((noreturn));
@@ -120,6 +127,15 @@ void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+int             kthread_create(void (*)(), void*);
+int             kthread_id();
+void            kthread_exit();
+int             kthread_join(int);
+int             kthread_mutex_alloc();
+int             kthread_mutex_dealloc();
+int             kthread_mutex_lock();
+int             kthread_mutex_unlock();
+
 
 // swtch.S
 void            swtch(struct context**, struct context*);
@@ -181,7 +197,7 @@ void            freevm(pde_t*);
 void            inituvm(pde_t*, char*, uint);
 int             loaduvm(pde_t*, char*, struct inode*, uint, uint);
 pde_t*          copyuvm(pde_t*, uint);
-void            switchuvm(struct proc*);
+void            switchuvm(struct proc*, struct thread*);
 void            switchkvm(void);
 int             copyout(pde_t*, uint, void*, uint);
 void            clearpteu(pde_t *pgdir, char *uva);
diff --git a/dot-bochsrc b/dot-bochsrc
old mode 100755
new mode 100644
diff --git a/exec.c b/exec.c
index b40134f..8166044 100644
--- a/exec.c
+++ b/exec.c
@@ -8,107 +8,147 @@
 #include "elf.h"
 
 int
-exec(char *path, char **argv)
-{
-  char *s, *last;
-  int i, off;
-  uint argc, sz, sp, ustack[3+MAXARG+1];
-  struct elfhdr elf;
-  struct inode *ip;
-  struct proghdr ph;
-  pde_t *pgdir, *oldpgdir;
-  struct proc *curproc = myproc();
-
-  begin_op();
-
-  if((ip = namei(path)) == 0){
-    end_op();
-    cprintf("exec: fail\n");
-    return -1;
-  }
-  ilock(ip);
-  pgdir = 0;
-
-  // Check ELF header
-  if(readi(ip, (char*)&elf, 0, sizeof(elf)) != sizeof(elf))
-    goto bad;
-  if(elf.magic != ELF_MAGIC)
-    goto bad;
-
-  if((pgdir = setupkvm()) == 0)
-    goto bad;
-
-  // Load program into memory.
-  sz = 0;
-  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
-    if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
-      goto bad;
-    if(ph.type != ELF_PROG_LOAD)
-      continue;
-    if(ph.memsz < ph.filesz)
-      goto bad;
-    if(ph.vaddr + ph.memsz < ph.vaddr)
-      goto bad;
-    if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
-      goto bad;
-    if(ph.vaddr % PGSIZE != 0)
-      goto bad;
-    if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
-      goto bad;
-  }
-  iunlockput(ip);
-  end_op();
-  ip = 0;
-
-  // Allocate two pages at the next page boundary.
-  // Make the first inaccessible.  Use the second as the user stack.
-  sz = PGROUNDUP(sz);
-  if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
-    goto bad;
-  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
-  sp = sz;
-
-  // Push argument strings, prepare rest of stack in ustack.
-  for(argc = 0; argv[argc]; argc++) {
-    if(argc >= MAXARG)
-      goto bad;
-    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
-    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
-      goto bad;
-    ustack[3+argc] = sp;
-  }
-  ustack[3+argc] = 0;
-
-  ustack[0] = 0xffffffff;  // fake return PC
-  ustack[1] = argc;
-  ustack[2] = sp - (argc+1)*4;  // argv pointer
-
-  sp -= (3+argc+1) * 4;
-  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
-    goto bad;
-
-  // Save program name for debugging.
-  for(last=s=path; *s; s++)
-    if(*s == '/')
-      last = s+1;
-  safestrcpy(curproc->name, last, sizeof(curproc->name));
-
-  // Commit to the user image.
-  oldpgdir = curproc->pgdir;
-  curproc->pgdir = pgdir;
-  curproc->sz = sz;
-  curproc->tf->eip = elf.entry;  // main
-  curproc->tf->esp = sp;
-  switchuvm(curproc);
-  freevm(oldpgdir);
-  return 0;
-
- bad:
-  if(pgdir)
-    freevm(pgdir);
-  if(ip){
+exec(char *path, char **argv) {
+    char *s, *last;
+    int i, off;
+    uint argc, sz, sp, ustack[3 + MAXARG + 1];
+    struct elfhdr elf;
+    struct inode *ip;
+    struct proghdr ph;
+    pde_t *pgdir, *oldpgdir;
+    struct proc *curproc = myproc();
+    struct thread *t;
+    int flag = 0;
+
+
+
+
+    if(mythread()->killed == 1){
+        exit_thread();
+    }
+    else {
+        for (int i = 0; i < curproc->t_num; ++i) {
+            t = &curproc->threads[i];
+            if (t != mythread() && t->state != UNUSED_T)
+                t->killed = 1;
+        }
+
+        while (1) {
+            acquire_ptable();
+            for (int i = 0; i < curproc->t_num; ++i) {
+                t = &curproc->threads[i];
+                if (t != mythread()) {
+                    if (t->state == SLEEPING) {
+                        t->state = RUNNABLE;
+                    }
+                }
+            }
+            release_ptable();
+            flag = 0;
+            for (int i = 0; i < curproc->t_num; ++i) {
+                t = &curproc->threads[i];
+                if (t != mythread()) {
+                    if ((t->state != ZOMBIE_T && t->state != UNUSED_T))
+                        flag = 1;
+                }
+            }
+            if (!flag)
+                break;
+        }
+    }
+
+
+
+    begin_op();
+    if ((ip = namei(path)) == 0) {
+        end_op();
+        cprintf("exec: fail\n");
+        return -1;
+    }
+    ilock(ip);
+    pgdir = 0;
+
+    // Check ELF header
+    if (readi(ip, (char *) &elf, 0, sizeof(elf)) != sizeof(elf))
+        goto bad;
+    if (elf.magic != ELF_MAGIC)
+        goto bad;
+
+    if ((pgdir = setupkvm()) == 0)
+        goto bad;
+
+    // Load program into memory.
+    sz = 0;
+    for (i = 0, off = elf.phoff; i < elf.phnum; i++, off += sizeof(ph)) {
+        if (readi(ip, (char *) &ph, off, sizeof(ph)) != sizeof(ph))
+            goto bad;
+        if (ph.type != ELF_PROG_LOAD)
+            continue;
+        if (ph.memsz < ph.filesz)
+            goto bad;
+        if (ph.vaddr + ph.memsz < ph.vaddr)
+            goto bad;
+        if ((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
+            goto bad;
+        if (ph.vaddr % PGSIZE != 0)
+            goto bad;
+        if (loaduvm(pgdir, (char *) ph.vaddr, ip, ph.off, ph.filesz) < 0)
+            goto bad;
+    }
     iunlockput(ip);
     end_op();
-  }
-  return -1;
+    ip = 0;
+
+    // Allocate two pages at the next page boundary.
+    // Make the first inaccessible.  Use the second as the user stack.
+    sz = PGROUNDUP(sz);
+    if ((sz = allocuvm(pgdir, sz, sz + 2 * PGSIZE)) == 0) {
+        goto bad;
+    }
+    clearpteu(pgdir, (char *) (sz - 2 * PGSIZE));
+    sp = sz;
+
+    // Push argument strings, prepare rest of stack in ustack.
+    for (argc = 0; argv[argc]; argc++) {
+        if (argc >= MAXARG)
+            goto bad;
+        sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
+        if (copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
+            goto bad;
+        ustack[3 + argc] = sp;
+    }
+    ustack[3 + argc] = 0;
+
+    ustack[0] = 0xffffffff;  // fake return PC
+    ustack[1] = argc;
+    ustack[2] = sp - (argc + 1) * 4;  // argv pointer
+
+    sp -= (3 + argc + 1) * 4;
+    if (copyout(pgdir, sp, ustack, (3 + argc + 1) * 4) < 0)
+        goto bad;
+
+    // Save program name for debugging.
+    for (last = s = path; *s; s++)
+        if (*s == '/')
+            last = s + 1;
+    safestrcpy(curproc->name, last, sizeof(curproc->name));
+
+    // Commit to the user image.
+    oldpgdir = curproc->pgdir;
+    curproc->pgdir = pgdir;
+    curproc->sz = sz;
+    mythread()->tf->eip = elf.entry;  // main
+    mythread()->tf->esp = sp;
+    switchuvm(curproc, mythread());
+    freevm(oldpgdir);
+    return 0;
+
+    bad:
+    if (pgdir)
+        freevm(pgdir);
+    if (ip) {
+        iunlockput(ip);
+        end_op();
+    }
+    return -1;
 }
diff --git a/kthread.h b/kthread.h
index a0cdd0d..b4b5b76 100644
--- a/kthread.h
+++ b/kthread.h
@@ -1,6 +1,15 @@
+#include "types.h"
+#include "spinlock.h"
+
 #define MAX_STACK_SIZE 4000
 #define MAX_MUTEXES 64
 
+struct kthread_mutex_t {
+    uint locked;       // Is the lock held?
+    struct spinlock lk;
+    int id;
+};
+
 /********************************
         The API of the KLT package
  ********************************/
@@ -14,8 +23,10 @@ int kthread_mutex_alloc();
 int kthread_mutex_dealloc(int mutex_id);
 int kthread_mutex_lock(int mutex_id);
 int kthread_mutex_unlock(int mutex_id);
+//
+
+
+
+
+
 
-trnmnt_tree* trnmnt_tree_alloc(int depth);
-int trnmnt_tree_dealloc(trnmnt_tree* tree);
-int trnmnt_tree_acquire(trnmnt_tree* tree,int ID);
-int trnmnt_tree_release(trnmnt_tree* tree,int ID);
diff --git a/pipe.c b/pipe.c
index e9abe7f..c718508 100644
--- a/pipe.c
+++ b/pipe.c
@@ -83,7 +83,7 @@ pipewrite(struct pipe *p, char *addr, int n)
   acquire(&p->lock);
   for(i = 0; i < n; i++){
     while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
-      if(p->readopen == 0 || myproc()->killed){
+      if(p->readopen == 0 || mythread()->killed){
         release(&p->lock);
         return -1;
       }
@@ -104,7 +104,7 @@ piperead(struct pipe *p, char *addr, int n)
 
   acquire(&p->lock);
   while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
-    if(myproc()->killed){
+    if(mythread()->killed){
       release(&p->lock);
       return -1;
     }
diff --git a/pr.pl b/pr.pl
old mode 100755
new mode 100644
diff --git a/printpcs b/printpcs
old mode 100755
new mode 100644
diff --git a/proc.c b/proc.c
index 806b1b1..d4c067c 100644
--- a/proc.c
+++ b/proc.c
@@ -1,3 +1,4 @@
+#include <stddef.h>
 #include "types.h"
 #include "defs.h"
 #include "param.h"
@@ -5,64 +6,129 @@
 #include "mmu.h"
 #include "x86.h"
 #include "proc.h"
-#include "spinlock.h"
+#include "kthread.h"
+#include "tournament_tree.h"
 
 struct {
-  struct spinlock lock;
-  struct proc proc[NPROC];
+    struct spinlock lock;
+    struct proc proc[NPROC];
 } ptable;
 
 static struct proc *initproc;
 
 int nextpid = 1;
+
 extern void forkret(void);
+
 extern void trapret(void);
 
 static void wakeup1(void *chan);
 
 void
-pinit(void)
-{
-  initlock(&ptable.lock, "ptable");
+acquire_ptable() {
+    acquire(&ptable.lock);
+}
+
+void
+release_ptable() {
+    release(&ptable.lock);
+}
+
+struct spinlock *
+get_ptable_lock() {
+    return &ptable.lock;
+}
+
+void
+pinit(void) {
+    initlock(&ptable.lock, "ptable");
 }
 
 // Must be called with interrupts disabled
 int
 cpuid() {
-  return mycpu()-cpus;
+    return mycpu() - cpus;
 }
 
 // Must be called with interrupts disabled to avoid the caller being
 // rescheduled between reading lapicid and running through the loop.
-struct cpu*
-mycpu(void)
-{
-  int apicid, i;
-  
-  if(readeflags()&FL_IF)
-    panic("mycpu called with interrupts enabled\n");
-  
-  apicid = lapicid();
-  // APIC IDs are not guaranteed to be contiguous. Maybe we should have
-  // a reverse map, or reserve a register to store &cpus[i].
-  for (i = 0; i < ncpu; ++i) {
-    if (cpus[i].apicid == apicid)
-      return &cpus[i];
-  }
-  panic("unknown apicid\n");
+struct cpu *
+mycpu(void) {
+    int apicid, i;
+
+    if (readeflags() & FL_IF)
+        panic("mycpu called with interrupts enabled\n");
+
+    apicid = lapicid();
+    // APIC IDs are not guaranteed to be contiguous. Maybe we should have
+    // a reverse map, or reserve a register to store &cpus[i].
+    for (i = 0; i < ncpu; ++i) {
+        if (cpus[i].apicid == apicid)
+            return &cpus[i];
+    }
+    panic("unknown apicid\n");
 }
 
 // Disable interrupts so that we are not rescheduled
 // while reading proc from the cpu structure
-struct proc*
+struct proc *
 myproc(void) {
-  struct cpu *c;
-  struct proc *p;
-  pushcli();
-  c = mycpu();
-  p = c->proc;
-  popcli();
-  return p;
+    struct cpu *c;
+    struct proc *p;
+    pushcli();
+    c = mycpu();
+    p = c->proc;
+    popcli();
+    return p;
+}
+
+struct thread *
+mythread(void) {
+    struct cpu *c;
+    struct thread *t;
+    pushcli();
+    c = mycpu();
+    t = c->thread;
+    popcli();
+    return t;
+}
+
+void exit_process();
+
+int
+allocthread(struct proc *p, int first) {
+    struct thread *t = &p->threads[p->t_num];
+    p->t_num++;
+    char *sp;
+    t->p_parent = p;
+    t->tid = p->t_num;
+    if (first)
+        t->state = EMBRYO;
+    else t->state = RUNNABLE;
+    t->tid = p->t_num;
+    t->killed = 0;
+
+    // Allocate kernel stack.
+    if ((t->kstack = kalloc()) == 0) {
+        t->state = UNUSED_T;
+        return 0;
+    }
+    sp = t->kstack + KSTACKSIZE;
+
+    // Leave room for trap frame.
+    sp -= sizeof *t->tf;
+    t->tf = (struct trapframe *) sp;
+
+    // Set up new context to start executing at forkret,
+    // which returns to trapret.
+    sp -= 4;
+    *(uint *) sp = (uint) trapret;
+
+    sp -= sizeof *t->context;
+    t->context = (struct context *) sp;
+    memset(t->context, 0, sizeof *t->context);
+    t->context->eip = (uint) forkret;
+    return 1;
 }
 
 //PAGEBREAK: 32
@@ -70,247 +136,297 @@ myproc(void) {
 // If found, change state to EMBRYO and initialize
 // state required to run in the kernel.
 // Otherwise return 0.
-static struct proc*
-allocproc(void)
-{
-  struct proc *p;
-  char *sp;
-
-  acquire(&ptable.lock);
-
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == UNUSED)
-      goto found;
-
-  release(&ptable.lock);
-  return 0;
-
-found:
-  p->state = EMBRYO;
-  p->pid = nextpid++;
+static struct proc *
+allocproc(void) {
+    struct proc *p;
 
-  release(&ptable.lock);
+    acquire(&ptable.lock);
 
-  // Allocate kernel stack.
-  if((p->kstack = kalloc()) == 0){
-    p->state = UNUSED;
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+        if (p->state == UNUSED)
+            goto found;
+    release(&ptable.lock);
     return 0;
-  }
-  sp = p->kstack + KSTACKSIZE;
-
-  // Leave room for trap frame.
-  sp -= sizeof *p->tf;
-  p->tf = (struct trapframe*)sp;
-
-  // Set up new context to start executing at forkret,
-  // which returns to trapret.
-  sp -= 4;
-  *(uint*)sp = (uint)trapret;
 
-  sp -= sizeof *p->context;
-  p->context = (struct context*)sp;
-  memset(p->context, 0, sizeof *p->context);
-  p->context->eip = (uint)forkret;
-
-  return p;
+    found:
+    p->t_num = 0;
+    p->pid = nextpid++;
+    p->state = USED;
+    int success = allocthread(p, 1);
+    release(&ptable.lock);
+    if (!success) {
+        return 0;
+    }
+    return p;
 }
 
 //PAGEBREAK: 32
 // Set up first user process.
 void
-userinit(void)
-{
-  struct proc *p;
-  extern char _binary_initcode_start[], _binary_initcode_size[];
-
-  p = allocproc();
-  
-  initproc = p;
-  if((p->pgdir = setupkvm()) == 0)
-    panic("userinit: out of memory?");
-  inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
-  p->sz = PGSIZE;
-  memset(p->tf, 0, sizeof(*p->tf));
-  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
-  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
-  p->tf->es = p->tf->ds;
-  p->tf->ss = p->tf->ds;
-  p->tf->eflags = FL_IF;
-  p->tf->esp = PGSIZE;
-  p->tf->eip = 0;  // beginning of initcode.S
-
-  safestrcpy(p->name, "initcode", sizeof(p->name));
-  p->cwd = namei("/");
-
-  // this assignment to p->state lets other cores
-  // run this process. the acquire forces the above
-  // writes to be visible, and the lock is also needed
-  // because the assignment might not be atomic.
-  acquire(&ptable.lock);
-
-  p->state = RUNNABLE;
-
-  release(&ptable.lock);
+userinit(void) {
+    struct proc *p;
+    extern char _binary_initcode_start[], _binary_initcode_size[];
+
+    // 1. allocate proc structure + thread structure
+    p = allocproc();
+    struct thread *t = &p->threads[0];
+
+    acquire(&ptable.lock);
+    initproc = p;
+    if ((p->pgdir = setupkvm()) == 0)
+        panic("userinit: out of memory?");
+    inituvm(p->pgdir, _binary_initcode_start, (int) _binary_initcode_size);
+    p->sz = PGSIZE;
+    memset(t->tf, 0, sizeof(*t->tf));
+    t->tf->cs = (SEG_UCODE << 3) | DPL_USER;
+    t->tf->ds = (SEG_UDATA << 3) | DPL_USER;
+    t->tf->es = t->tf->ds;
+    t->tf->ss = t->tf->ds;
+    t->tf->eflags = FL_IF;
+    t->tf->esp = PGSIZE;
+    t->tf->eip = 0;  // beginning of initcode.S
+
+    safestrcpy(p->name, "initcode", sizeof(p->name));
+    p->cwd = namei("/");
+
+    // this assignment to p->state lets other cores
+    // run this process. the acquire forces the above
+    // writes to be visible, and the lock is also needed
+    // because the assignment might not be atomic.
+
+    p->state = USED;
+    t->state = RUNNABLE;
+
+    release(&ptable.lock);
 }
 
 // Grow current process's memory by n bytes.
 // Return 0 on success, -1 on failure.
 int
-growproc(int n)
-{
-  uint sz;
-  struct proc *curproc = myproc();
-
-  sz = curproc->sz;
-  if(n > 0){
-    if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
-      return -1;
-  } else if(n < 0){
-    if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
-      return -1;
-  }
-  curproc->sz = sz;
-  switchuvm(curproc);
-  return 0;
+growproc(int n) {
+    uint sz;
+    struct proc *curproc = myproc();
+    struct thread *curthread = mythread();
+    // new lock
+    acquire(&ptable.lock);
+    sz = curproc->sz;
+    if (n > 0) {
+        if ((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0) {
+            release(&ptable.lock);
+            return -1;
+        }
+    } else if (n < 0) {
+        if ((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0) {
+            release(&ptable.lock);
+            return -1;
+        }
+    }
+    curproc->sz = sz;
+    switchuvm(curproc, curthread);
+    release(&ptable.lock);
+    return 0;
 }
 
 // Create a new process copying p as the parent.
 // Sets up stack to return as if from system call.
 // Caller must set state of returned proc to RUNNABLE.
 int
-fork(void)
-{
-  int i, pid;
-  struct proc *np;
-  struct proc *curproc = myproc();
-
-  // Allocate process.
-  if((np = allocproc()) == 0){
-    return -1;
-  }
+fork(void) {
+    int i, pid;
+    struct proc *np;
+    struct proc *curproc = myproc();
+    struct thread *curthread = mythread();
+    // Allocate process.
+    if ((np = allocproc()) == 0) {
+        return -1;
+    }
+    struct thread *nt = &np->threads[0];
+    // Copy process state from proc.
 
-  // Copy process state from proc.
-  if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
-    kfree(np->kstack);
-    np->kstack = 0;
-    np->state = UNUSED;
-    return -1;
-  }
-  np->sz = curproc->sz;
-  np->parent = curproc;
-  *np->tf = *curproc->tf;
+    // new lock
+    acquire(&ptable.lock);
 
-  // Clear %eax so that fork returns 0 in the child.
-  np->tf->eax = 0;
+    if ((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0) {
 
-  for(i = 0; i < NOFILE; i++)
-    if(curproc->ofile[i])
-      np->ofile[i] = filedup(curproc->ofile[i]);
-  np->cwd = idup(curproc->cwd);
+        kfree(nt->kstack);
+        nt->kstack = 0;
+        np->state = UNUSED;
+        nt->state = UNUSED_T;
+        return -1;
+    }
+    np->sz = curproc->sz;
+    np->parent = curproc;
+    *nt->tf = *curthread->tf;
+
+    // Clear %eax so that fork returns 0 in the child.
+    nt->tf->eax = 0;
 
-  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
+    for (i = 0; i < NOFILE; i++)
+        if (curproc->ofile[i])
+            np->ofile[i] = filedup(curproc->ofile[i]);
+    np->cwd = idup(curproc->cwd);
 
-  pid = np->pid;
+    safestrcpy(np->name, curproc->name, sizeof(curproc->name));
 
-  acquire(&ptable.lock);
+    pid = np->pid;
 
-  np->state = RUNNABLE;
+    nt->state = RUNNABLE;
 
-  release(&ptable.lock);
+    release(&ptable.lock);
 
-  return pid;
+    return pid;
 }
 
 // Exit the current process.  Does not return.
 // An exited process remains in the zombie state
 // until its parent calls wait() to find out it exited.
 void
-exit(void)
-{
-  struct proc *curproc = myproc();
-  struct proc *p;
-  int fd;
-
-  if(curproc == initproc)
-    panic("init exiting");
-
-  // Close all open files.
-  for(fd = 0; fd < NOFILE; fd++){
-    if(curproc->ofile[fd]){
-      fileclose(curproc->ofile[fd]);
-      curproc->ofile[fd] = 0;
+exit(void) {
+    struct proc *curproc = myproc();
+    struct thread *t;
+    acquire(&ptable.lock);
+    if (mythread()->killed == 1)
+        exit_thread();
+    else {
+        for (int i = 0; i < curproc->t_num; ++i) {
+            t = &curproc->threads[i];
+            t->killed = 1;
+            // Wake process from sleep if necessary.
+            if (t->state == SLEEPING)
+                t->state = RUNNABLE;
+        }
+        release(&ptable.lock);
     }
-  }
+}
 
-  begin_op();
-  iput(curproc->cwd);
-  end_op();
-  curproc->cwd = 0;
+void
+exit_thread(void) {
+    struct thread *t;
+    struct proc *curproc = myproc();
+    int running_t = 0;
+
+    for (int i = 0; i < curproc->t_num; ++i) {
+        t = &curproc->threads[i];
+        if (t->state != ZOMBIE_T && t->state != UNUSED_T)
+            running_t++;
+    }
 
-  acquire(&ptable.lock);
+    if (running_t == 0) panic("No running thread!");
 
-  // Parent might be sleeping in wait().
-  wakeup1(curproc->parent);
+    if (running_t == 2) {
+        wakeup1(myproc());
+    }
+    // change 1
+    if (running_t == 1) {
+//        wakeup1(mythread());
+        release(&ptable.lock);
+        exit_process();
+    } else {
+        wakeup1(mythread());
+        mythread()->state = ZOMBIE_T;
+        sched();
+    }
+}
 
-  // Pass abandoned children to init.
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->parent == curproc){
-      p->parent = initproc;
-      if(p->state == ZOMBIE)
-        wakeup1(initproc);
+void exit_process() {
+    struct proc *curproc = myproc();
+    struct proc *p;
+    int fd;
+    if (curproc == initproc)
+        panic("init exiting");
+
+    // Close all open files.
+    for (fd = 0; fd < NOFILE; fd++) {
+        if (curproc->ofile[fd]) {
+            fileclose(curproc->ofile[fd]);
+            curproc->ofile[fd] = 0;
+        }
     }
-  }
 
-  // Jump into the scheduler, never to return.
-  curproc->state = ZOMBIE;
-  sched();
-  panic("zombie exit");
+    begin_op();
+    iput(curproc->cwd);
+    end_op();
+    curproc->cwd = 0;
+
+    acquire(&ptable.lock);
+
+    // Parent might be sleeping in wait().
+    wakeup1(curproc->parent);
+
+    // Pass abandoned children to init.
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+        if (p->parent == curproc) {
+            p->parent = initproc;
+            if (p->state == ZOMBIE)
+                wakeup1(initproc);
+        }
+    }
+    curproc->killed = 1;
+    // Jump into the scheduler, never to return.
+    curproc->state = ZOMBIE;
+    mythread()->state = ZOMBIE_T;
+    sched();
+    panic("zombie exit");
 }
 
 // Wait for a child process to exit and return its pid.
 // Return -1 if this process has no children.
 int
-wait(void)
-{
-  struct proc *p;
-  int havekids, pid;
-  struct proc *curproc = myproc();
-  
-  acquire(&ptable.lock);
-  for(;;){
-    // Scan through table looking for exited children.
-    havekids = 0;
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->parent != curproc)
-        continue;
-      havekids = 1;
-      if(p->state == ZOMBIE){
-        // Found one.
-        pid = p->pid;
-        kfree(p->kstack);
-        p->kstack = 0;
-        freevm(p->pgdir);
-        p->pid = 0;
-        p->parent = 0;
-        p->name[0] = 0;
-        p->killed = 0;
-        p->state = UNUSED;
-        release(&ptable.lock);
-        return pid;
-      }
-    }
+wait(void) {
+    struct proc *p;
+    int havekids, pid;
+    struct proc *curproc = myproc();
+    struct thread *curthread = mythread();
+    struct thread *t;
 
-    // No point waiting if we don't have any children.
-    if(!havekids || curproc->killed){
-      release(&ptable.lock);
-      return -1;
+    acquire(&ptable.lock);
+    for (;;) {
+        // Scan through table looking for exited children.
+        havekids = 0;
+        for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+            if (p->parent != curproc)
+                continue;
+            havekids = 1;
+            if (p->state == ZOMBIE) {
+                pid = p->pid;
+                p->pid = 0;
+                freevm(p->pgdir);
+                p->parent = 0;
+                p->name[0] = 0;
+                p->state = UNUSED;
+                for (int i = 0; i < p->t_num; ++i) {
+                    t = &p->threads[i];
+                    if (t->state == ZOMBIE_T) {
+                        // Found one.
+                        kfree(t->kstack);
+                        t->kstack = 0;
+                        t->tid = 0;
+                        t->p_parent = 0;
+                        t->killed = 0;
+                        t->state = UNUSED_T;
+                    }
+
+                }
+                release(&ptable.lock);
+                return pid;
+            }
+        }
+
+
+        // No point waiting if we don't have any children.
+        if (!havekids || curthread->killed) {
+            release(&ptable.lock);
+            return -1;
+        }
+
+        // Wait for children to exit.  (See wakeup1 call in proc_exit.)
+        sleep(curproc, &ptable.lock);  //DOC: wait-sleep
     }
-
-    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
-    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
-  }
 }
 
+//#pragma clang diagnostic push
+//#pragma clang diagnostic ignored "-Wmissing-noreturn"
+
 //PAGEBREAK: 42
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
@@ -320,41 +436,48 @@ wait(void)
 //  - eventually that process transfers control
 //      via swtch back to the scheduler.
 void
-scheduler(void)
-{
-  struct proc *p;
-  struct cpu *c = mycpu();
-  c->proc = 0;
-  
-  for(;;){
-    // Enable interrupts on this processor.
-    sti();
-
-    // Loop over process table looking for process to run.
-    acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
-        continue;
-
-      // Switch to chosen process.  It is the process's job
-      // to release ptable.lock and then reacquire it
-      // before jumping back to us.
-      c->proc = p;
-      switchuvm(p);
-      p->state = RUNNING;
-
-      swtch(&(c->scheduler), p->context);
-      switchkvm();
-
-      // Process is done running for now.
-      // It should have changed its p->state before coming back.
-      c->proc = 0;
+scheduler(void) {
+    struct proc *p;
+    struct cpu *c = mycpu();
+    c->proc = 0;
+
+    for (;;) {
+        // Enable interrupts on this processor.
+        sti();
+//        cprintf("loop\n");
+        // Loop over process table looking for process to run.
+        acquire(&ptable.lock);
+        for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+//            cprintf("state: %s\n",p->state);
+            if (p->state != USED)
+                continue;
+            for (int i = 0; i < p->t_num; ++i) {
+                if (p->threads[i].state != RUNNABLE)
+                    continue;
+
+                // Switch to chosen process.  It is the process's job
+                // to release ptable.lock and then reacquire it
+                // before jumping back to us.
+                c->proc = p;
+                c->thread = &p->threads[i];
+                switchuvm(c->proc, c->thread);
+                p->threads[i].state = RUNNING;
+
+                swtch(&(c->scheduler), p->threads[i].context);
+                switchkvm();
+
+                // Process is done running for now.
+                // It should have changed its p->state before coming back.
+                c->proc = 0;
+                c->thread = 0;
+            }
+        }
+        release(&ptable.lock);
     }
-    release(&ptable.lock);
-
-  }
 }
 
+//#pragma clang diagnostic pop
+
 // Enter scheduler.  Must hold only ptable.lock
 // and have changed proc->state. Saves and restores
 // intena because intena is a property of this
@@ -363,137 +486,141 @@ scheduler(void)
 // break in the few places where a lock is held but
 // there's no process.
 void
-sched(void)
-{
-  int intena;
-  struct proc *p = myproc();
-
-  if(!holding(&ptable.lock))
-    panic("sched ptable.lock");
-  if(mycpu()->ncli != 1)
-    panic("sched locks");
-  if(p->state == RUNNING)
-    panic("sched running");
-  if(readeflags()&FL_IF)
-    panic("sched interruptible");
-  intena = mycpu()->intena;
-  swtch(&p->context, mycpu()->scheduler);
-  mycpu()->intena = intena;
+sched(void) {
+    int intena;
+    struct thread *t = mythread();
+
+    if (!holding(&ptable.lock))
+        panic("sched ptable.lock");
+    if (mycpu()->ncli != 1)
+        panic("sched locks");
+    if (t->state == RUNNING)
+        panic("sched running");
+    if (readeflags() & FL_IF)
+        panic("sched interruptible");
+    intena = mycpu()->intena;
+    swtch(&t->context, mycpu()->scheduler);
+    mycpu()->intena = intena;
 }
 
 // Give up the CPU for one scheduling round.
 void
-yield(void)
-{
-  acquire(&ptable.lock);  //DOC: yieldlock
-  myproc()->state = RUNNABLE;
-  sched();
-  release(&ptable.lock);
+yield(void) {
+    acquire(&ptable.lock);  //DOC: yieldlock
+    mythread()->state = RUNNABLE;
+    sched();
+    release(&ptable.lock);
 }
 
 // A fork child's very first scheduling by scheduler()
 // will swtch here.  "Return" to user space.
 void
-forkret(void)
-{
-  static int first = 1;
-  // Still holding ptable.lock from scheduler.
-  release(&ptable.lock);
+forkret(void) {
+    static int first = 1;
+    // Still holding ptable.lock from scheduler.
+    release(&ptable.lock);
 
-  if (first) {
-    // Some initialization functions must be run in the context
-    // of a regular process (e.g., they call sleep), and thus cannot
-    // be run from main().
-    first = 0;
-    iinit(ROOTDEV);
-    initlog(ROOTDEV);
-  }
+    if (first) {
+        // Some initialization functions must be run in the context
+        // of a regular process (e.g., they call sleep), and thus cannot
+        // be run from main().
+        first = 0;
+        iinit(ROOTDEV);
+        initlog(ROOTDEV);
+    }
 
-  // Return to "caller", actually trapret (see allocproc).
+    // Return to "caller", actually trapret (see allocproc).
 }
 
 // Atomically release lock and sleep on chan.
 // Reacquires lock when awakened.
 void
-sleep(void *chan, struct spinlock *lk)
-{
-  struct proc *p = myproc();
-  
-  if(p == 0)
-    panic("sleep");
-
-  if(lk == 0)
-    panic("sleep without lk");
-
-  // Must acquire ptable.lock in order to
-  // change p->state and then call sched.
-  // Once we hold ptable.lock, we can be
-  // guaranteed that we won't miss any wakeup
-  // (wakeup runs with ptable.lock locked),
-  // so it's okay to release lk.
-  if(lk != &ptable.lock){  //DOC: sleeplock0
-    acquire(&ptable.lock);  //DOC: sleeplock1
-    release(lk);
-  }
-  // Go to sleep.
-  p->chan = chan;
-  p->state = SLEEPING;
-
-  sched();
-
-  // Tidy up.
-  p->chan = 0;
-
-  // Reacquire original lock.
-  if(lk != &ptable.lock){  //DOC: sleeplock2
-    release(&ptable.lock);
-    acquire(lk);
-  }
+sleep(void *chan, struct spinlock *lk) {
+    struct proc *p = myproc();
+    struct thread *t = mythread();
+
+    if (p == 0)
+        panic("sleep");
+
+    if (lk == 0)
+        panic("sleep without lk");
+
+    // Must acquire ptable.lock in order to
+    // change p->state and then call sched.
+    // Once we hold ptable.lock, we can be
+    // guaranteed that we won't miss any wakeup
+    // (wakeup runs with ptable.lock locked),
+    // so it's okay to release lk.
+    if (lk != &ptable.lock) {  //DOC: sleeplock0
+        acquire(&ptable.lock);  //DOC: sleeplock1
+        release(lk);
+    }
+    // Go to sleep.
+    t->chan = chan;
+    t->state = SLEEPING;
+
+    sched();
+
+    // Tidy up.
+    t->chan = 0;
+
+    // Reacquire original lock.
+    if (lk != &ptable.lock) {  //DOC: sleeplock2
+        release(&ptable.lock);
+        acquire(lk);
+    }
 }
 
 //PAGEBREAK!
 // Wake up all processes sleeping on chan.
 // The ptable lock must be held.
 static void
-wakeup1(void *chan)
-{
-  struct proc *p;
+wakeup1(void *chan) {
+    struct proc *p;
+    struct thread *t;
+
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+        for (int i = 0; i < p->t_num; ++i) {
+            t = &p->threads[i];
+            if (t->state == SLEEPING && t->chan == chan)
+                t->state = RUNNABLE;
+        }
 
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == SLEEPING && p->chan == chan)
-      p->state = RUNNABLE;
 }
 
 // Wake up all processes sleeping on chan.
 void
-wakeup(void *chan)
-{
-  acquire(&ptable.lock);
-  wakeup1(chan);
-  release(&ptable.lock);
+wakeup(void *chan) {
+    acquire(&ptable.lock);
+    wakeup1(chan);
+    release(&ptable.lock);
 }
 
 // Kill the process with the given pid.
 // Process won't exit until it returns
 // to user space (see trap in trap.c).
 int
-kill(int pid)
-{
-  struct proc *p;
-
-  acquire(&ptable.lock);
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->pid == pid){
-      p->killed = 1;
-      // Wake process from sleep if necessary.
-      if(p->state == SLEEPING)
-        p->state = RUNNABLE;
-      release(&ptable.lock);
-      return 0;
+kill(int pid) {
+    struct proc *p;
+    struct thread *t;
+
+    acquire(&ptable.lock);
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+        if (p->pid == pid) {
+            p->killed = 1;
+            for (int i = 0; i < p->t_num; i++) {
+                t = &p->threads[i];
+                t->killed = 1;
+                // Wake process from sleep if necessary.
+                if (t->state == SLEEPING)
+                    t->state = RUNNABLE;
+            }
+            release(&ptable.lock);
+            return 0;
+        }
     }
-  }
-  release(&ptable.lock);
-  return -1;
+    release(&ptable.lock);
+    return -1;
 }
 
 //PAGEBREAK: 36
@@ -501,34 +628,226 @@ kill(int pid)
 // Runs when user types ^P on console.
 // No lock to avoid wedging a stuck machine further.
 void
-procdump(void)
-{
-  static char *states[] = {
-  [UNUSED]    "unused",
-  [EMBRYO]    "embryo",
-  [SLEEPING]  "sleep ",
-  [RUNNABLE]  "runble",
-  [RUNNING]   "run   ",
-  [ZOMBIE]    "zombie"
-  };
-  int i;
-  struct proc *p;
-  char *state;
-  uint pc[10];
-
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-    if(p->state == UNUSED)
-      continue;
-    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
-      state = states[p->state];
-    else
-      state = "???";
-    cprintf("%d %s %s", p->pid, state, p->name);
-    if(p->state == SLEEPING){
-      getcallerpcs((uint*)p->context->ebp+2, pc);
-      for(i=0; i<10 && pc[i] != 0; i++)
-        cprintf(" %p", pc[i]);
+procdump(void) {
+    static char *states[] = {
+            [UNUSED]    "unused",
+            [EMBRYO]    "embryo",
+            [SLEEPING]  "sleep ",
+            [RUNNABLE]  "runble",
+            [RUNNING]   "run   ",
+            [ZOMBIE]    "zombie"
+    };
+    int i;
+    struct proc *p;
+    struct thread *t;
+    char *state;
+    uint pc[10];
+
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+        if (p->state == UNUSED)
+            continue;
+        for (int j = 0; j < p->t_num; ++j) {
+            t = &p->threads[j];
+            if (t->state >= 0 && t->state < NELEM(states) && states[t->state])
+                state = states[t->state];
+            else
+                state = "???";
+            cprintf("pid:%d tid:%d %s %s", p->pid, t->tid, state, p->name);
+            if (t->state == SLEEPING) {
+                getcallerpcs((uint *) t->context->ebp + 2, pc);
+                for (i = 0; i < 10 && pc[i] != 0; i++)
+                    cprintf(" %p", pc[i]);
+            }
+            cprintf("\n");
+        }
     }
-    cprintf("\n");
-  }
 }
+
+int
+kthread_create(void (*start_func)(), void *stack) {
+    struct thread *t;
+    acquire(&ptable.lock);
+    if (allocthread(myproc(), 0) == 0)
+        return 0;
+    t = &myproc()->threads[myproc()->t_num - 1];
+    *t->tf = *mythread()->tf;
+    // set entry point
+    t->tf->eip = (uint) start_func;  // main
+    // set stack pointer - assume user sent stack with MAX_SIZE addition.
+    t->tf->esp = (uint) stack;
+    release(&ptable.lock);
+    return t->tid;
+}
+
+//int
+//kthread_id() {
+//    return mythread()->tid;
+//}
+
+void
+kthread_exit() {
+    acquire(&ptable.lock);
+    exit_thread();
+}
+
+int
+kthread_join(int thread_id) {
+    struct thread *t = 0;
+    acquire(&ptable.lock);
+    for (int i = 0; i < myproc()->t_num; ++i) {
+        if (myproc()->threads[i].tid == thread_id) t = &myproc()->threads[i];
+    }
+    if (t == 0) {
+        cprintf("kthread_join: no thread matches the id");
+        return -1;
+    }
+    while (1) {
+        if (t->state == ZOMBIE_T) {
+            break;
+        }
+        else if (t->state != UNUSED_T)
+            sleep(t, &ptable.lock);
+    }
+    release(&ptable.lock);
+    return 0;
+}
+
+
+static struct kthread_mutex_t mutexes[MAX_MUTEXES];
+static int mutex_num = 0;
+static struct spinlock mutexes_lock;
+
+int kthread_mutex_alloc() {
+    if (mutex_num == 0) initlock(&mutexes_lock, "mutex lock");
+    if (mutex_num == MAX_MUTEXES) return -1;
+    acquire(&mutexes_lock);
+    mutex_num++;
+    release(&mutexes_lock);
+
+    struct kthread_mutex_t *mutex = &mutexes[mutex_num - 1];
+    initlock(&mutex->lk, "mutex lock");
+    acquire(&mutex->lk);
+    mutex->locked = 0;
+    mutex->id = mutex_num;
+    release(&mutex->lk);
+
+    acquire(&mutexes_lock);
+    mutexes[mutex_num - 1] = *mutex;
+    release(&mutexes_lock);
+
+    return mutex->id;
+}
+
+int kthread_mutex_dealloc(int mutex_id) {
+    if (0 > mutex_id || mutex_id > MAX_MUTEXES)
+        return -1;
+    struct kthread_mutex_t mutex;
+    mutex = mutexes[mutex_id - 1];
+    if (mutex.locked) {
+        return -1;
+    }
+    acquire(&mutex.lk);
+    mutex.locked = 0;
+    mutex.id = 0;
+    wakeup(&mutex);
+    release(&mutex.lk);
+
+    acquire(&mutexes_lock);
+    mutex_num--;
+    release(&mutexes_lock);
+    return 0;
+}
+
+int kthread_mutex_lock(int mutex_id) {
+    if (0 > mutex_id || mutex_id > MAX_MUTEXES)
+        return -1;
+    struct kthread_mutex_t mutex;
+    mutex = mutexes[mutex_id - 1];
+    acquire(&mutex.lk);
+
+    while (mutex.locked) {
+        sleep(&mutex, &mutex.lk);
+    }
+    mutex.locked = 1;
+    release(&mutex.lk);
+    return 0;
+}
+
+int kthread_mutex_unlock(int mutex_id) {
+    if (0 > mutex_id || mutex_id > MAX_MUTEXES)
+        return -1;
+    struct kthread_mutex_t mutex;
+    mutex = mutexes[mutex_id - 1];
+
+    acquire(&mutex.lk);
+    mutex.locked = 0;
+    mutex.id = 0;
+    wakeup(&mutex);
+    release(&mutex.lk);
+    return 0;
+}
+//
+//int
+//power(int b, int pwr) {
+//    int i;
+//    int acc = 1;
+//    for (i = 0; i < pwr; i++) {
+//        acc = acc * b;
+//    }
+//    return acc;
+//}
+//
+//trnmnt_tree *trnmnt_tree_alloc(int depth) {
+//    if (depth < 1)return 0;
+//    trnmnt_tree *tree = (trnmnt_tree *) kalloc();
+//    tree->nodes = (int *) kalloc();
+//    tree->depth = depth;
+//    tree->nodes_num = power(2, depth);
+//
+//    for (int i = 0; i < tree->nodes_num; i++) {
+//        int mutex_id = kthread_mutex_alloc();
+//        if (mutex_id < 0)
+//            return 0;
+//        tree->nodes[i] = mutex_id;
+//    }
+//    return tree;
+//}
+//
+//int trnmnt_tree_dealloc(trnmnt_tree *tree) {
+//    for (int i = 0; i < tree->nodes_num; ++i) {
+//        if (kthread_mutex_dealloc(tree->nodes[i] < 0)) return -1;
+//    }
+//    return 0;
+//}
+//
+//int trnmnt_tree_acquire(trnmnt_tree *tree, int ID) {
+//    if (ID > 0 || ID > tree->nodes_num) return -1;
+//    int current = tree->nodes_num - 1 + ID;
+//    int father;
+//    while (current != 0) {
+//        father = (current - 1) / 2;
+//        if (kthread_mutex_lock(tree->nodes[father]) < 0) return -1;
+//        current = father;
+//    }
+//    return 0;
+//}
+//
+//int rec_trnmnt_tree_release(trnmnt_tree *tree, int ID) {
+//    int error = 0;
+//    int father = (ID - 1) / 2;
+//    if (ID == 0) {
+//        if (kthread_mutex_unlock(tree->nodes[ID]) < 0) error = 1;
+//        return error;
+//    } else {
+//        error = rec_trnmnt_tree_release(tree, father);
+//        if (kthread_mutex_unlock(tree->nodes[ID]) < 0) error = 1;
+//        return error;
+//
+//    }
+//}
+//
+//int trnmnt_tree_release(trnmnt_tree *tree, int ID) {
+//    if (rec_trnmnt_tree_release(tree, ID) > 0) return -1;
+//    else return 0;
+//}
+//
diff --git a/proc.h b/proc.h
index 1647114..cd0216a 100644
--- a/proc.h
+++ b/proc.h
@@ -1,13 +1,16 @@
+#define NTHREADS 16
+
 // Per-CPU state
 struct cpu {
-  uchar apicid;                // Local APIC ID
-  struct context *scheduler;   // swtch() here to enter scheduler
-  struct taskstate ts;         // Used by x86 to find stack for interrupt
-  struct segdesc gdt[NSEGS];   // x86 global descriptor table
-  volatile uint started;       // Has the CPU started?
-  int ncli;                    // Depth of pushcli nesting.
-  int intena;                  // Were interrupts enabled before pushcli?
-  struct proc *proc;           // The process running on this cpu or null
+    uchar apicid;                // Local APIC ID
+    struct context *scheduler;   // swtch() here to enter scheduler
+    struct taskstate ts;         // Used by x86 to find stack for interrupt
+    struct segdesc gdt[NSEGS];   // x86 global descriptor table
+    volatile uint started;       // Has the CPU started?
+    int ncli;                    // Depth of pushcli nesting.
+    int intena;                  // Were interrupts enabled before pushcli?
+    struct proc *proc;           // The process running on this cpu or null
+    struct thread *thread;
 };
 
 extern struct cpu cpus[NCPU];
@@ -25,34 +28,45 @@ extern int ncpu;
 // at the "Switch stacks" comment. Switch doesn't save eip explicitly,
 // but it is on the stack and allocproc() manipulates it.
 struct context {
-  uint edi;
-  uint esi;
-  uint ebx;
-  uint ebp;
-  uint eip;
+    uint edi;
+    uint esi;
+    uint ebx;
+    uint ebp;
+    uint eip;
+};
+
+enum procstate {
+    UNUSED, ZOMBIE, USED
+};
+enum threadstate {
+    UNUSED_T, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE_T, BLOCKED
 };
 
-enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
+
+struct thread {
+    char *kstack;                // Bottom of kernel stack for this process
+    enum threadstate state;        // Process state
+    int killed;                  // If non-zero, have been killed
+    struct trapframe *tf;        // Trap frame for current syscall
+    void *chan;                  // If non-zero, sleeping on chan
+    struct context *context;     // swtch() here to run process
+    struct proc *p_parent;
+    int tid;
+};
 
 // Per-process state
 struct proc {
-  uint sz;                     // Size of process memory (bytes)
-  pde_t* pgdir;                // Page table
-  char *kstack;                // Bottom of kernel stack for this process
-  enum procstate state;        // Process state
-  int pid;                     // Process ID
-  struct proc *parent;         // Parent process
-  struct trapframe *tf;        // Trap frame for current syscall
-  struct context *context;     // swtch() here to run process
-  void *chan;                  // If non-zero, sleeping on chan
-  int killed;                  // If non-zero, have been killed
-  struct file *ofile[NOFILE];  // Open files
-  struct inode *cwd;           // Current directory
-  char name[16];               // Process name (debugging)
+    int killed;                  // If non-zero, have been killed
+    uint sz;                     // Size of process memory (bytes)
+    pde_t *pgdir;                // Page table
+    int pid;                     // Process ID
+    struct proc *parent;         // Parent process
+    struct file *ofile[NOFILE];  // Open files
+    char name[16];               // Process name (debugging)
+    struct thread threads[NTHREADS];
+    enum procstate state;        // Process state
+    int t_num;
+    struct inode *cwd;           // Current directory
+
 };
 
-// Process memory is laid out contiguously, low addresses first:
-//   text
-//   original data and bss
-//   fixed-size stack
-//   expandable heap
diff --git a/runoff b/runoff
old mode 100755
new mode 100644
diff --git a/runoff1 b/runoff1
old mode 100755
new mode 100644
diff --git a/sanity.c b/sanity.c
new file mode 100644
index 0000000..7191190
--- /dev/null
+++ b/sanity.c
@@ -0,0 +1,183 @@
+#include "types.h"
+
+#include "user.h"
+#include "kthread.h"
+#include "tournament_tree.h"
+
+#define STACK_SIZE 500
+
+void get_to_work() {
+    sleep(15);
+    printf(1, "working ... \n");
+    kthread_exit();
+}
+
+void give_me_your_id() {
+    sleep(15);
+    int res = kthread_id();
+    if (res == -1) printf(1, "kthread_id FAIL..\n");
+    else printf(1, "kthread_id SUCCESS ..... my id is: %d......\n", res);
+    kthread_exit();
+
+}
+void test_kthread_create() {
+    printf(1, "TESTING KTHREAD_CREATE\n");
+    printf(1, "**************************************************************\n");
+    void *stack = ((char *) malloc(STACK_SIZE * sizeof(char))) + STACK_SIZE;
+
+    int tid = kthread_create(get_to_work, stack);
+
+    if (tid == -1) printf(1, "kthread_create FAIL\n");
+    else printf(1, "kthread_create SUCCESS\n");
+}
+
+void test_kthread_join() {
+    printf(1, "TESTING KTHREAD_JOIN\n");
+    printf(1, "**************************************************************\n");
+    void *stack = ((char *) malloc(STACK_SIZE * sizeof(char))) + STACK_SIZE;
+
+    int tid = kthread_create(get_to_work, stack);
+
+    int joined = kthread_join(tid);
+
+
+    if (joined == -1) printf(1, "kthread_join FAIL\n");
+    else printf(1, "kthread_join SUCCESS\n");
+
+
+}
+
+void test_kthread_id() {
+    printf(1, "TESTING KTHREAD_ID\n");
+    printf(1, "**************************************************************\n");
+    void *stack = ((char *) malloc(STACK_SIZE * sizeof(char))) + STACK_SIZE;
+
+    for (int i = 0; i < 5; i++) {
+        int tid = kthread_create(give_me_your_id, stack);
+        kthread_join(tid);
+    }
+
+}
+
+
+void test_mutex_alloc() {
+    printf(1, "TESTING MUTEX_ALLOC\n");
+    printf(1, "**************************************************************\n");
+    int ret = kthread_mutex_alloc();
+
+    if (ret == -1) printf(1, "kthread_mutex_alloc FAIL\n");
+    else printf(1, "kthread_mutex_alloc SUCCESS\n");
+}
+
+void test_mutex_dealloc() {
+    printf(1, "TESTING MUTEX_ALLOC\n");
+    printf(1, "**************************************************************\n");
+    int m_id = kthread_mutex_alloc();
+    int ret = kthread_mutex_dealloc(m_id);
+
+    if (ret == 0) printf(1, "dealloc SUCCESS\n");
+    else printf(1, "dealloc FAIL\n");
+}
+
+void test_mutex_lock_unlock() {
+    printf(1, "TESTING MUTEX LOCK UNLOCK\n");
+    printf(1, "**************************************************************\n");
+    int lock_me = kthread_mutex_alloc();
+
+    int ret = kthread_mutex_lock(lock_me);
+    if (ret == 0) printf(1, "lock SUCCESS\n");
+    else printf(1, "lock FAIL\n");
+
+    ret = kthread_mutex_unlock(lock_me);
+    if (ret == 0) printf(1, "unlock SUCCESS\n");
+    else printf(1, "unlock FAIL\n");
+}
+
+void test_trnmnt_alloc() {
+    int depth = 4;
+    trnmnt_tree *tree = trnmnt_tree_alloc(depth);
+
+    int nodes_num = tree->nodes_num;
+    int expected_size = 15;
+
+    if (nodes_num == expected_size) {
+        if (tree->depth == depth) printf(1, "trnmnt_tree_alloc SUCCESS\n");
+        else printf(1, "trnmnt_tree_alloc FAIL\n");
+    } else printf(1, "trnmnt_tree_alloc FAIL\n");
+
+
+}
+
+void test_trnmnt_dealloc() {
+    int depth = 4;
+    trnmnt_tree *tree = trnmnt_tree_alloc(depth);
+
+    int ret = trnmnt_tree_dealloc(tree);
+    if (ret == 0) {
+        ret = trnmnt_tree_dealloc(tree);
+        if (ret == -1) printf(1, "trnmnt_tree_dealloc SUCCESS\n");
+        else printf(1, "trnmnt_tree_dealloc FAIL\n");
+    } else printf(1, "trnmnt_tree_dealloc FAIL\n");
+
+
+}
+
+int acc = 1;
+trnmnt_tree *tree;
+
+void increase_func(){
+    sleep(15);
+    trnmnt_tree_acquire(tree, 4);
+    acc++;
+    trnmnt_tree_release(tree, 4);
+    kthread_exit();
+    }
+
+void test_trnmnt_acquire_release() {
+    int depth = 3;
+    tree = trnmnt_tree_alloc(depth);
+
+    void *stack = ((char *) malloc(STACK_SIZE * sizeof(char))) + STACK_SIZE;
+    kthread_create(increase_func, stack);
+
+    trnmnt_tree_acquire(tree, 7);
+
+    acc++;
+
+    trnmnt_tree_release(tree, 7);
+
+    sleep(150);
+    if (acc == 3) printf(1, "trnmnt_acquire SUCCESS\n");
+    else printf(1, "trnmnbt acquire FAIL\n");
+
+}
+
+
+void t2() {
+    test_kthread_create();
+    test_kthread_join();
+    test_kthread_id();
+}
+
+
+void t3_1() {
+    test_mutex_alloc();
+    test_mutex_dealloc();
+    test_mutex_lock_unlock();
+}
+
+void t3_2() {
+    test_trnmnt_alloc();
+    test_trnmnt_dealloc();
+    test_trnmnt_acquire_release();
+}
+
+
+int main() {
+    printf(1, "     ---------------- SANITY ----------------     \n");
+    t2();
+    t3_1();
+    t3_2();
+
+    exit();
+}
\ No newline at end of file
diff --git a/show1 b/show1
old mode 100755
new mode 100644
diff --git a/spinlock.c b/spinlock.c
index 4020186..d2b28ee 100644
--- a/spinlock.c
+++ b/spinlock.c
@@ -25,8 +25,12 @@ void
 acquire(struct spinlock *lk)
 {
   pushcli(); // disable interrupts to avoid deadlock.
-  if(holding(lk))
-    panic("acquire");
+  if(holding(lk)){
+    struct proc *p = myproc();
+    struct thread *t = mythread();
+    cprintf("%s", p->state);
+      cprintf("%s", t->state);
+      panic("acquire");}
 
   // The xchg is atomic.
   while(xchg(&lk->locked, 1) != 0)
@@ -46,8 +50,8 @@ acquire(struct spinlock *lk)
 void
 release(struct spinlock *lk)
 {
-  if(!holding(lk))
-    panic("release");
+  if(!holding(lk)){
+      panic("release");}
 
   lk->pcs[0] = 0;
   lk->cpu = 0;
diff --git a/spinp b/spinp
old mode 100755
new mode 100644
diff --git a/syscall.c b/syscall.c
index ee85261..6108d3a 100644
--- a/syscall.c
+++ b/syscall.c
@@ -15,58 +15,54 @@
 
 // Fetch the int at addr from the current process.
 int
-fetchint(uint addr, int *ip)
-{
-  struct proc *curproc = myproc();
+fetchint(uint addr, int *ip) {
+    struct proc *curproc = myproc();
 
-  if(addr >= curproc->sz || addr+4 > curproc->sz)
-    return -1;
-  *ip = *(int*)(addr);
-  return 0;
+    if (addr >= curproc->sz || addr + 4 > curproc->sz)
+        return -1;
+    *ip = *(int *) (addr);
+    return 0;
 }
 
 // Fetch the nul-terminated string at addr from the current process.
 // Doesn't actually copy the string - just sets *pp to point at it.
 // Returns length of string, not including nul.
 int
-fetchstr(uint addr, char **pp)
-{
-  char *s, *ep;
-  struct proc *curproc = myproc();
+fetchstr(uint addr, char **pp) {
+    char *s, *ep;
+    struct proc *curproc = myproc();
 
-  if(addr >= curproc->sz)
+    if (addr >= curproc->sz)
+        return -1;
+    *pp = (char *) addr;
+    ep = (char *) curproc->sz;
+    for (s = *pp; s < ep; s++) {
+        if (*s == 0)
+            return s - *pp;
+    }
     return -1;
-  *pp = (char*)addr;
-  ep = (char*)curproc->sz;
-  for(s = *pp; s < ep; s++){
-    if(*s == 0)
-      return s - *pp;
-  }
-  return -1;
 }
 
 // Fetch the nth 32-bit system call argument.
 int
-argint(int n, int *ip)
-{
-  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
+argint(int n, int *ip) {
+    return fetchint((mythread()->tf->esp) + 4 + 4 * n, ip);
 }
 
 // Fetch the nth word-sized system call argument as a pointer
 // to a block of memory of size bytes.  Check that the pointer
 // lies within the process address space.
 int
-argptr(int n, char **pp, int size)
-{
-  int i;
-  struct proc *curproc = myproc();
- 
-  if(argint(n, &i) < 0)
-    return -1;
-  if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
-    return -1;
-  *pp = (char*)i;
-  return 0;
+argptr(int n, char **pp, int size) {
+    int i;
+    struct proc *curproc = myproc();
+
+    if (argint(n, &i) < 0)
+        return -1;
+    if (size < 0 || (uint) i >= curproc->sz || (uint) i + size > curproc->sz)
+        return -1;
+    *pp = (char *) i;
+    return 0;
 }
 
 // Fetch the nth word-sized system call argument as a string pointer.
@@ -74,72 +70,116 @@ argptr(int n, char **pp, int size)
 // (There is no shared writable memory, so the string can't change
 // between this check and being used by the kernel.)
 int
-argstr(int n, char **pp)
-{
-  int addr;
-  if(argint(n, &addr) < 0)
-    return -1;
-  return fetchstr(addr, pp);
+argstr(int n, char **pp) {
+    int addr;
+    if (argint(n, &addr) < 0)
+        return -1;
+    return fetchstr(addr, pp);
 }
 
 extern int sys_chdir(void);
+
 extern int sys_close(void);
+
 extern int sys_dup(void);
+
 extern int sys_exec(void);
+
 extern int sys_exit(void);
+
 extern int sys_fork(void);
+
 extern int sys_fstat(void);
+
 extern int sys_getpid(void);
+
 extern int sys_kill(void);
+
 extern int sys_link(void);
+
 extern int sys_mkdir(void);
+
 extern int sys_mknod(void);
+
 extern int sys_open(void);
+
 extern int sys_pipe(void);
+
 extern int sys_read(void);
+
 extern int sys_sbrk(void);
+
 extern int sys_sleep(void);
+
 extern int sys_unlink(void);
+
 extern int sys_wait(void);
+
 extern int sys_write(void);
+
 extern int sys_uptime(void);
 
+extern int sys_kthread_create(void);
+
+extern int sys_kthread_id(void);
+
+extern int sys_kthread_exit(void);
+
+extern int sys_kthread_join(void);
+
+extern int sys_kthread_mutex_alloc(void);
+
+extern int sys_kthread_mutex_dealloc(void);
+
+extern int sys_kthread_mutex_lock(void);
+
+extern int sys_kthread_mutex_unlock(void);
+
+
 static int (*syscalls[])(void) = {
-[SYS_fork]    sys_fork,
-[SYS_exit]    sys_exit,
-[SYS_wait]    sys_wait,
-[SYS_pipe]    sys_pipe,
-[SYS_read]    sys_read,
-[SYS_kill]    sys_kill,
-[SYS_exec]    sys_exec,
-[SYS_fstat]   sys_fstat,
-[SYS_chdir]   sys_chdir,
-[SYS_dup]     sys_dup,
-[SYS_getpid]  sys_getpid,
-[SYS_sbrk]    sys_sbrk,
-[SYS_sleep]   sys_sleep,
-[SYS_uptime]  sys_uptime,
-[SYS_open]    sys_open,
-[SYS_write]   sys_write,
-[SYS_mknod]   sys_mknod,
-[SYS_unlink]  sys_unlink,
-[SYS_link]    sys_link,
-[SYS_mkdir]   sys_mkdir,
-[SYS_close]   sys_close,
+        [SYS_fork]    sys_fork,
+        [SYS_exit]    sys_exit,
+        [SYS_wait]    sys_wait,
+        [SYS_pipe]    sys_pipe,
+        [SYS_read]    sys_read,
+        [SYS_kill]    sys_kill,
+        [SYS_exec]    sys_exec,
+        [SYS_fstat]   sys_fstat,
+        [SYS_chdir]   sys_chdir,
+        [SYS_dup]     sys_dup,
+        [SYS_getpid]  sys_getpid,
+        [SYS_sbrk]    sys_sbrk,
+        [SYS_sleep]   sys_sleep,
+        [SYS_uptime]  sys_uptime,
+        [SYS_open]    sys_open,
+        [SYS_write]   sys_write,
+        [SYS_mknod]   sys_mknod,
+        [SYS_unlink]  sys_unlink,
+        [SYS_link]    sys_link,
+        [SYS_mkdir]   sys_mkdir,
+        [SYS_close]   sys_close,
+        [SYS_kthread_create]   sys_kthread_create,
+        [SYS_kthread_id]   sys_kthread_id,
+        [SYS_kthread_exit]   sys_kthread_exit,
+        [SYS_kthread_join]   sys_kthread_join,
+        [SYS_kthread_mutex_alloc]      sys_kthread_mutex_alloc,
+        [SYS_kthread_mutex_dealloc]      sys_kthread_mutex_dealloc,
+        [SYS_kthread_mutex_lock]      sys_kthread_mutex_lock,
+        [SYS_kthread_mutex_unlock] sys_kthread_mutex_unlock
 };
 
 void
-syscall(void)
-{
-  int num;
-  struct proc *curproc = myproc();
-
-  num = curproc->tf->eax;
-  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
-    curproc->tf->eax = syscalls[num]();
-  } else {
-    cprintf("%d %s: unknown sys call %d\n",
-            curproc->pid, curproc->name, num);
-    curproc->tf->eax = -1;
-  }
+syscall(void) {
+    int num;
+    struct proc *curproc = myproc();
+
+    num = mythread()->tf->eax;
+    if (num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+        mythread()->tf->eax = syscalls[num]();
+    } else {
+        cprintf("%d %s: unknown sys call %d\n",
+                curproc->pid, curproc->name, num);
+        mythread()->tf->eax = -1;
+    }
 }
+
diff --git a/syscall.h b/syscall.h
index bc5f356..fe516f5 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,12 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_kthread_create  22
+#define SYS_kthread_id  23
+#define SYS_kthread_exit  24
+#define SYS_kthread_join  25
+#define SYS_kthread_mutex_alloc  26
+#define SYS_kthread_mutex_dealloc  27
+#define SYS_kthread_mutex_lock  28
+#define SYS_kthread_mutex_unlock 29
+
diff --git a/sysproc.c b/sysproc.c
index 0686d29..81ac2bb 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -8,84 +8,151 @@
 #include "proc.h"
 
 int
-sys_fork(void)
-{
-  return fork();
+sys_fork(void) {
+    return fork();
 }
 
 int
-sys_exit(void)
-{
-  exit();
-  return 0;  // not reached
+sys_exit(void) {
+    exit();
+    return 0;  // not reached
 }
 
 int
-sys_wait(void)
-{
-  return wait();
+sys_wait(void) {
+    return wait();
 }
 
 int
-sys_kill(void)
-{
-  int pid;
+sys_kill(void) {
+    int pid;
 
-  if(argint(0, &pid) < 0)
-    return -1;
-  return kill(pid);
+    if (argint(0, &pid) < 0)
+        return -1;
+    return kill(pid);
 }
 
 int
-sys_getpid(void)
-{
-  return myproc()->pid;
+sys_getpid(void) {
+    return myproc()->pid;
 }
 
 int
-sys_sbrk(void)
-{
-  int addr;
-  int n;
+sys_sbrk(void) {
+    int addr;
+    int n;
 
-  if(argint(0, &n) < 0)
-    return -1;
-  addr = myproc()->sz;
-  if(growproc(n) < 0)
-    return -1;
-  return addr;
+    if (argint(0, &n) < 0)
+        return -1;
+    addr = myproc()->sz;
+    if (growproc(n) < 0)
+        return -1;
+    return addr;
 }
 
 int
-sys_sleep(void)
-{
-  int n;
-  uint ticks0;
+sys_sleep(void) {
+    int n;
+    uint ticks0;
 
-  if(argint(0, &n) < 0)
-    return -1;
-  acquire(&tickslock);
-  ticks0 = ticks;
-  while(ticks - ticks0 < n){
-    if(myproc()->killed){
-      release(&tickslock);
-      return -1;
+    if (argint(0, &n) < 0)
+        return -1;
+    acquire(&tickslock);
+    ticks0 = ticks;
+    while (ticks - ticks0 < n) {
+        if (myproc()->killed) {
+            release(&tickslock);
+            return -1;
+        }
+        sleep(&ticks, &tickslock);
     }
-    sleep(&ticks, &tickslock);
-  }
-  release(&tickslock);
-  return 0;
+    release(&tickslock);
+    return 0;
 }
 
 // return how many clock tick interrupts have occurred
 // since start.
 int
-sys_uptime(void)
-{
-  uint xticks;
+sys_uptime(void) {
+    uint xticks;
 
-  acquire(&tickslock);
-  xticks = ticks;
-  release(&tickslock);
-  return xticks;
+    acquire(&tickslock);
+    xticks = ticks;
+    release(&tickslock);
+    return xticks;
 }
+
+int
+sys_kthread_create(void) {
+
+    void (*start_func)()=0;
+    void *stack=0;
+
+    if(argptr(0, (void*) &start_func, sizeof(start_func)) < 0)
+        return -1;
+
+    if(argptr(1, (void*) &stack, sizeof(stack)) < 0)
+        return -1;
+
+    return kthread_create(start_func, stack);
+}
+
+int
+sys_kthread_id(void) {
+    return mythread()->tid;
+}
+
+int
+sys_kthread_exit(void) {
+    kthread_exit();
+    return 0;
+}
+
+int
+sys_kthread_join(void) {
+    int tid;
+
+    if (argint(0, &tid) < 0)
+        return -1;
+    return kthread_join(tid);
+}
+
+int
+sys_kthread_mutex_alloc(void){
+    return kthread_mutex_alloc();
+
+}
+
+int
+sys_kthread_mutex_dealloc(void){
+
+    int id;
+
+    if (argint(0, &id) < 0)
+        return -1;
+
+    return kthread_mutex_dealloc(id);
+
+}
+
+int
+sys_kthread_mutex_lock(void){
+    int id;
+
+    if (argint(0, &id) < 0)
+        return -1;
+
+    return kthread_mutex_lock(id);
+
+}
+
+int
+sys_kthread_mutex_unlock(void){
+    int id;
+
+    if (argint(0, &id) < 0)
+        return -1;
+
+    return kthread_mutex_unlock(id);
+
+}
\ No newline at end of file
diff --git a/tournament_tree.c b/tournament_tree.c
new file mode 100644
index 0000000..1db9a23
--- /dev/null
+++ b/tournament_tree.c
@@ -0,0 +1,88 @@
+//
+// Created by rosent@wincs.cs.bgu.ac.il on 4/30/19.
+//
+
+#include "tournament_tree.h"
+#include "kthread.h"
+#include "types.h"
+#include "stat.h"
+#include "fcntl.h"
+#include "user.h"
+#include "x86.h"
+
+int
+power(int b, int pwr) {
+    int i;
+    int acc = 1;
+    for (i = 0; i < pwr; i++) {
+        acc = acc * b;
+    }
+    return acc;
+}
+
+trnmnt_tree *trnmnt_tree_alloc(int depth) {
+    if (depth < 1)return 0;
+    trnmnt_tree *tree = malloc(sizeof(trnmnt_tree));
+    tree->nodes = malloc(sizeof(int) * (power(2, depth)));
+    tree->depth = depth;
+    tree->nodes_num = power(2, depth)-1;
+
+    for (int i = 0; i < tree->nodes_num; i++) {
+        int mutex_id = kthread_mutex_alloc();
+        if (mutex_id < 0)
+            return 0;
+        tree->nodes[i] = mutex_id;
+    }
+    return tree;
+}
+
+int trnmnt_tree_dealloc(trnmnt_tree *tree) {
+    if(tree == 0 || tree->nodes_num == 0 || tree->depth == 0 ) return -1;
+
+    // if the mutexes aren't locked
+    for(int i=0; i<tree->nodes_num; i++){
+        int mutex_id = tree->nodes[i];
+        int res = kthread_mutex_dealloc(mutex_id);
+        if (res < 0) return -1;
+
+    }
+    free(tree->nodes);
+    tree->nodes = 0;
+    tree->depth = 0;
+    tree->nodes_num = 0;
+    free(tree);
+
+    return 0;
+}
+
+int trnmnt_tree_acquire(trnmnt_tree *tree, int ID) {
+    if (ID > 0 || ID > tree->nodes_num) return -1;
+    int current = tree->nodes_num - 1 + ID;
+    int father;
+    while (current != 0) {
+        father = (current - 1) / 2;
+        if (kthread_mutex_lock(tree->nodes[father]) < 0) return -1;
+        current = father;
+    }
+    return 0;
+}
+
+int rec_trnmnt_tree_release(trnmnt_tree *tree, int ID) {
+    int error = 0;
+    int father = (ID - 1) / 2;
+    if (ID == 0) {
+        if (kthread_mutex_unlock(tree->nodes[ID]) < 0) error = 1;
+        return error;
+    } else {
+        error = rec_trnmnt_tree_release(tree, father);
+        if (kthread_mutex_unlock(tree->nodes[ID]) < 0) error = 1;
+        return error;
+
+    }
+}
+
+int trnmnt_tree_release(trnmnt_tree *tree, int ID) {
+    if (rec_trnmnt_tree_release(tree, ID) > 0) return -1;
+    else return 0;
+}
+
diff --git a/tournament_tree.h b/tournament_tree.h
new file mode 100644
index 0000000..afafa34
--- /dev/null
+++ b/tournament_tree.h
@@ -0,0 +1,14 @@
+typedef struct trnmnt_tree{
+    int *nodes;
+    int depth;
+    int nodes_num;
+} trnmnt_tree;
+
+
+trnmnt_tree* trnmnt_tree_alloc(int depth);
+
+int trnmnt_tree_dealloc(trnmnt_tree *tree);
+
+int trnmnt_tree_acquire(trnmnt_tree *tree, int ID);
+
+int trnmnt_tree_release(trnmnt_tree *, int ID);
\ No newline at end of file
diff --git a/tournamet_tree.c b/tournamet_tree.c
new file mode 100644
index 0000000..3dae40b
--- /dev/null
+++ b/tournamet_tree.c
@@ -0,0 +1,9 @@
+#include "tournamet_tree.h"
+#include "defs.h"
+
+trnmnt_tree *trnmnt_tree_alloc(int depth) {
+    int *memory = (int *) kalloc();
+    if (memory == 0) return 0;
+    trnmnt_tree tree = {.nodes = memory};
+
+}
diff --git a/tournamet_tree.h b/tournamet_tree.h
new file mode 100644
index 0000000..e8976fc
--- /dev/null
+++ b/tournamet_tree.h
@@ -0,0 +1,13 @@
+#include "kthread.h"
+
+typedef struct trnmnt_trees {
+    int *nodes;
+} trnmnt_tree;
+
+trnmnt_tree* trnmnt_tree_alloc(int depth);
+
+int trnmnmt_tree_dealloc(trnmnt_tree *tree);
+
+int trnmnt_tree_acquire(trnmnt_tree *tree, int ID);
+
+int trnmnt_tree_release(trnmnt_tree *, int ID);
\ No newline at end of file
diff --git a/trap.c b/trap.c
index 41c66eb..57efcc2 100644
--- a/trap.c
+++ b/trap.c
@@ -15,98 +15,98 @@ struct spinlock tickslock;
 uint ticks;
 
 void
-tvinit(void)
-{
-  int i;
+tvinit(void) {
+    int i;
 
-  for(i = 0; i < 256; i++)
-    SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
-  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
+    for (i = 0; i < 256; i++) SETGATE(idt[i], 0, SEG_KCODE << 3, vectors[i], 0);
+    SETGATE(idt[T_SYSCALL], 1, SEG_KCODE << 3, vectors[T_SYSCALL], DPL_USER);
 
-  initlock(&tickslock, "time");
+    initlock(&tickslock, "time");
 }
 
 void
-idtinit(void)
-{
-  lidt(idt, sizeof(idt));
+idtinit(void) {
+    lidt(idt, sizeof(idt));
 }
 
 //PAGEBREAK: 41
 void
-trap(struct trapframe *tf)
-{
-  if(tf->trapno == T_SYSCALL){
-    if(myproc()->killed)
-      exit();
-    myproc()->tf = tf;
-    syscall();
-    if(myproc()->killed)
-      exit();
-    return;
-  }
-
-  switch(tf->trapno){
-  case T_IRQ0 + IRQ_TIMER:
-    if(cpuid() == 0){
-      acquire(&tickslock);
-      ticks++;
-      wakeup(&ticks);
-      release(&tickslock);
+trap(struct trapframe *tf) {
+    if (tf->trapno == T_SYSCALL) {
+        if (mythread()->killed)
+            exit();
+        mythread()->tf = tf;
+        syscall();
+        if (mythread()->killed)
+            exit();
+        return;
     }
-    lapiceoi();
-    break;
-  case T_IRQ0 + IRQ_IDE:
-    ideintr();
-    lapiceoi();
-    break;
-  case T_IRQ0 + IRQ_IDE+1:
-    // Bochs generates spurious IDE1 interrupts.
-    break;
-  case T_IRQ0 + IRQ_KBD:
-    kbdintr();
-    lapiceoi();
-    break;
-  case T_IRQ0 + IRQ_COM1:
-    uartintr();
-    lapiceoi();
-    break;
-  case T_IRQ0 + 7:
-  case T_IRQ0 + IRQ_SPURIOUS:
-    cprintf("cpu%d: spurious interrupt at %x:%x\n",
-            cpuid(), tf->cs, tf->eip);
-    lapiceoi();
-    break;
 
-  //PAGEBREAK: 13
-  default:
-    if(myproc() == 0 || (tf->cs&3) == 0){
-      // In kernel, it must be our mistake.
-      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
-              tf->trapno, cpuid(), tf->eip, rcr2());
-      panic("trap");
+    switch (tf->trapno) {
+        case T_IRQ0 + IRQ_TIMER:
+            if (cpuid() == 0) {
+                acquire(&tickslock);
+                ticks++;
+                wakeup(&ticks);
+                release(&tickslock);
+            }
+            lapiceoi();
+            break;
+        case T_IRQ0 + IRQ_IDE:
+            ideintr();
+            lapiceoi();
+            break;
+        case T_IRQ0 + IRQ_IDE + 1:
+            // Bochs generates spurious IDE1 interrupts.
+            break;
+        case T_IRQ0 + IRQ_KBD:
+            kbdintr();
+            lapiceoi();
+            break;
+        case T_IRQ0 + IRQ_COM1:
+            uartintr();
+            lapiceoi();
+            break;
+        case T_IRQ0 + 7:
+        case T_IRQ0 + IRQ_SPURIOUS:
+            cprintf("cpu%d: spurious interrupt at %x:%x\n",
+                    cpuid(), tf->cs, tf->eip);
+            lapiceoi();
+            break;
+
+            //PAGEBREAK: 13
+        default:
+            if (myproc() == 0 || (tf->cs & 3) == 0) {
+                // In kernel, it must be our mistake.
+                cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
+                        tf->trapno, cpuid(), tf->eip, rcr2());
+                panic("trap");
+            }
+            // In user space, assume process misbehaved.
+            cprintf("pid %d %s: trap %d err %d on cpu %d "
+                    "eip 0x%x addr 0x%x--kill proc\n",
+                    myproc()->pid, myproc()->name, tf->trapno,
+                    tf->err, cpuid(), tf->eip, rcr2());
+
+            for (int i = 0; i < myproc()->t_num; ++i) {
+                myproc()->threads[i].killed = 1;
+            }
+            myproc()->killed = 1;
     }
-    // In user space, assume process misbehaved.
-    cprintf("pid %d %s: trap %d err %d on cpu %d "
-            "eip 0x%x addr 0x%x--kill proc\n",
-            myproc()->pid, myproc()->name, tf->trapno,
-            tf->err, cpuid(), tf->eip, rcr2());
-    myproc()->killed = 1;
-  }
 
-  // Force process exit if it has been killed and is in user space.
-  // (If it is still executing in the kernel, let it keep running
-  // until it gets to the regular system call return.)
-  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-    exit();
+    // Force process exit if it has been killed and is in user space.
+    // (If it is still executing in the kernel, let it keep running
+    // until it gets to the regular system call return.)
+    if (mythread() && mythread()->killed && (tf->cs & 3) == DPL_USER)
+        exit();
 
-  // Force process to give up CPU on clock tick.
-  // If interrupts were on while locks held, would need to check nlock.
-  if(myproc() && myproc()->state == RUNNING &&
-     tf->trapno == T_IRQ0+IRQ_TIMER)
-    yield();
+    // Force process to give up CPU on clock tick.
+    // If interrupts were on while locks held, would need to check nlock.
+    if (mythread() && mythread()->state == RUNNING &&
+        tf->trapno == T_IRQ0 + IRQ_TIMER)
+        yield();
 
-  // Check if the process has been killed since we yielded
-  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-    exit();
+    // Check if the process has been killed since we yielded
+    if (mythread() && mythread()->killed && (tf->cs & 3) == DPL_USER)
+        exit();
 }
diff --git a/user.h b/user.h
index 4f99c52..4679e1c 100644
--- a/user.h
+++ b/user.h
@@ -1,3 +1,4 @@
+
 struct stat;
 struct rtcdate;
 
@@ -23,6 +24,16 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int             kthread_create(void (*)(), void*);
+int             kthread_id();
+void            kthread_exit();
+int             kthread_join(int);
+int             kthread_mutex_alloc();
+int             kthread_mutex_dealloc();
+int             kthread_mutex_lock();
+int             kthread_mutex_unlock();
+
+
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..6588aba 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,11 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(kthread_create)
+SYSCALL(kthread_id)
+SYSCALL(kthread_exit)
+SYSCALL(kthread_join)
+SYSCALL(kthread_mutex_unlock)
+SYSCALL(kthread_mutex_lock)
+SYSCALL(kthread_mutex_dealloc)
+SYSCALL(kthread_mutex_alloc)
diff --git a/vm.c b/vm.c
index 7134cff..e7b8205 100644
--- a/vm.c
+++ b/vm.c
@@ -13,70 +13,67 @@ pde_t *kpgdir;  // for use in scheduler()
 // Set up CPU's kernel segment descriptors.
 // Run once on entry on each CPU.
 void
-seginit(void)
-{
-  struct cpu *c;
-
-  // Map "logical" addresses to virtual addresses using identity map.
-  // Cannot share a CODE descriptor for both kernel and user
-  // because it would have to have DPL_USR, but the CPU forbids
-  // an interrupt from CPL=0 to DPL=3.
-  c = &cpus[cpuid()];
-  c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
-  c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
-  c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
-  c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
-  lgdt(c->gdt, sizeof(c->gdt));
+seginit(void) {
+    struct cpu *c;
+
+    // Map "logical" addresses to virtual addresses using identity map.
+    // Cannot share a CODE descriptor for both kernel and user
+    // because it would have to have DPL_USR, but the CPU forbids
+    // an interrupt from CPL=0 to DPL=3.
+    c = &cpus[cpuid()];
+    c->gdt[SEG_KCODE] = SEG(STA_X | STA_R, 0, 0xffffffff, 0);
+    c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
+    c->gdt[SEG_UCODE] = SEG(STA_X | STA_R, 0, 0xffffffff, DPL_USER);
+    c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
+    lgdt(c->gdt, sizeof(c->gdt));
 }
 
 // Return the address of the PTE in page table pgdir
 // that corresponds to virtual address va.  If alloc!=0,
 // create any required page table pages.
 static pte_t *
-walkpgdir(pde_t *pgdir, const void *va, int alloc)
-{
-  pde_t *pde;
-  pte_t *pgtab;
-
-  pde = &pgdir[PDX(va)];
-  if(*pde & PTE_P){
-    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-  } else {
-    if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
-      return 0;
-    // Make sure all those PTE_P bits are zero.
-    memset(pgtab, 0, PGSIZE);
-    // The permissions here are overly generous, but they can
-    // be further restricted by the permissions in the page table
-    // entries, if necessary.
-    *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
-  }
-  return &pgtab[PTX(va)];
+walkpgdir(pde_t *pgdir, const void *va, int alloc) {
+    pde_t *pde;
+    pte_t *pgtab;
+
+    pde = &pgdir[PDX(va)];
+    if (*pde & PTE_P) {
+        pgtab = (pte_t *) P2V(PTE_ADDR(*pde));
+    } else {
+        if (!alloc || (pgtab = (pte_t *) kalloc()) == 0)
+            return 0;
+        // Make sure all those PTE_P bits are zero.
+        memset(pgtab, 0, PGSIZE);
+        // The permissions here are overly generous, but they can
+        // be further restricted by the permissions in the page table
+        // entries, if necessary.
+        *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
+    }
+    return &pgtab[PTX(va)];
 }
 
 // Create PTEs for virtual addresses starting at va that refer to
 // physical addresses starting at pa. va and size might not
 // be page-aligned.
 static int
-mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
-{
-  char *a, *last;
-  pte_t *pte;
-
-  a = (char*)PGROUNDDOWN((uint)va);
-  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-  for(;;){
-    if((pte = walkpgdir(pgdir, a, 1)) == 0)
-      return -1;
-    if(*pte & PTE_P)
-      panic("remap");
-    *pte = pa | perm | PTE_P;
-    if(a == last)
-      break;
-    a += PGSIZE;
-    pa += PGSIZE;
-  }
-  return 0;
+mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm) {
+    char *a, *last;
+    pte_t *pte;
+
+    a = (char *) PGROUNDDOWN((uint) va);
+    last = (char *) PGROUNDDOWN(((uint) va) + size - 1);
+    for (;;) {
+        if ((pte = walkpgdir(pgdir, a, 1)) == 0)
+            return -1;
+        if (*pte & PTE_P)
+            panic("remap");
+        *pte = pa | perm | PTE_P;
+        if (a == last)
+            break;
+        a += PGSIZE;
+        pa += PGSIZE;
+    }
+    return 0;
 }
 
 // There is one page table per process, plus one that's used when
@@ -103,149 +100,145 @@ mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
 // This table defines the kernel's mappings, which are present in
 // every process's page table.
 static struct kmap {
-  void *virt;
-  uint phys_start;
-  uint phys_end;
-  int perm;
+    void *virt;
+    uint phys_start;
+    uint phys_end;
+    int perm;
 } kmap[] = {
- { (void*)KERNBASE, 0,             EXTMEM,    PTE_W}, // I/O space
- { (void*)KERNLINK, V2P(KERNLINK), V2P(data), 0},     // kern text+rodata
- { (void*)data,     V2P(data),     PHYSTOP,   PTE_W}, // kern data+memory
- { (void*)DEVSPACE, DEVSPACE,      0,         PTE_W}, // more devices
+        {(void *) KERNBASE, 0,             EXTMEM,  PTE_W}, // I/O space
+        {(void *) KERNLINK, V2P(KERNLINK), V2P(data), 0},     // kern text+rodata
+        {(void *) data,     V2P(data),     PHYSTOP, PTE_W}, // kern data+memory
+        {(void *) DEVSPACE, DEVSPACE, 0,            PTE_W}, // more devices
 };
 
 // Set up kernel part of a page table.
-pde_t*
-setupkvm(void)
-{
-  pde_t *pgdir;
-  struct kmap *k;
-
-  if((pgdir = (pde_t*)kalloc()) == 0)
-    return 0;
-  memset(pgdir, 0, PGSIZE);
-  if (P2V(PHYSTOP) > (void*)DEVSPACE)
-    panic("PHYSTOP too high");
-  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-    if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
-                (uint)k->phys_start, k->perm) < 0) {
-      freevm(pgdir);
-      return 0;
+pde_t *
+setupkvm(void) {
+    pde_t *pgdir;
+    struct kmap *k;
+
+    if ((pgdir = (pde_t *) kalloc()) == 0)
+        return 0;
+    memset(pgdir, 0, PGSIZE);
+    if (P2V(PHYSTOP) > (void *) DEVSPACE)
+        panic("PHYSTOP too high");
+    for (k = kmap; k < &kmap[NELEM(kmap)];
+    k++)
+    if (mappages(pgdir, k->virt, k->phys_end - k->phys_start,
+                 (uint) k->phys_start, k->perm) < 0) {
+        freevm(pgdir);
+        return 0;
     }
-  return pgdir;
+    return pgdir;
 }
 
 // Allocate one page table for the machine for the kernel address
 // space for scheduler processes.
 void
-kvmalloc(void)
-{
-  kpgdir = setupkvm();
-  switchkvm();
+kvmalloc(void) {
+    kpgdir = setupkvm();
+    switchkvm();
 }
 
 // Switch h/w page table register to the kernel-only page table,
 // for when no process is running.
 void
-switchkvm(void)
-{
-  lcr3(V2P(kpgdir));   // switch to the kernel page table
+switchkvm(void) {
+    lcr3(V2P(kpgdir));   // switch to the kernel page table
 }
 
 // Switch TSS and h/w page table to correspond to process p.
 void
-switchuvm(struct proc *p)
-{
-  if(p == 0)
-    panic("switchuvm: no process");
-  if(p->kstack == 0)
-    panic("switchuvm: no kstack");
-  if(p->pgdir == 0)
-    panic("switchuvm: no pgdir");
-
-  pushcli();
-  mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
-                                sizeof(mycpu()->ts)-1, 0);
-  mycpu()->gdt[SEG_TSS].s = 0;
-  mycpu()->ts.ss0 = SEG_KDATA << 3;
-  mycpu()->ts.esp0 = (uint)p->kstack + KSTACKSIZE;
-  // setting IOPL=0 in eflags *and* iomb beyond the tss segment limit
-  // forbids I/O instructions (e.g., inb and outb) from user space
-  mycpu()->ts.iomb = (ushort) 0xFFFF;
-  ltr(SEG_TSS << 3);
-  lcr3(V2P(p->pgdir));  // switch to process's address space
-  popcli();
+switchuvm(struct proc *p, struct thread *t) {
+    if (p == 0)
+        panic("switchuvm: no process");
+    if (t == 0)
+        panic("switchuvm: no thread");
+    if (t->kstack == 0)
+        panic("switchuvm: no kstack");
+    if (p->pgdir == 0)
+        panic("switchuvm: no pgdir");
+
+    pushcli();
+    mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
+                                  sizeof(mycpu()->ts) - 1, 0);
+    mycpu()->gdt[SEG_TSS].s = 0;
+    mycpu()->ts.ss0 = SEG_KDATA << 3;
+    mycpu()->ts.esp0 = (uint) t->kstack + KSTACKSIZE;
+    // setting IOPL=0 in eflags *and* iomb beyond the tss segment limit
+    // forbids I/O instructions (e.g., inb and outb) from user space
+    mycpu()->ts.iomb = (ushort) 0xFFFF;
+    ltr(SEG_TSS << 3);
+    lcr3(V2P(p->pgdir));  // switch to process's address space
+    popcli();
 }
 
 // Load the initcode into address 0 of pgdir.
 // sz must be less than a page.
 void
-inituvm(pde_t *pgdir, char *init, uint sz)
-{
-  char *mem;
-
-  if(sz >= PGSIZE)
-    panic("inituvm: more than a page");
-  mem = kalloc();
-  memset(mem, 0, PGSIZE);
-  mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
-  memmove(mem, init, sz);
+inituvm(pde_t *pgdir, char *init, uint sz) {
+    char *mem;
+
+    if (sz >= PGSIZE)
+        panic("inituvm: more than a page");
+    mem = kalloc();
+    memset(mem, 0, PGSIZE);
+    mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W | PTE_U);
+    memmove(mem, init, sz);
 }
 
 // Load a program segment into pgdir.  addr must be page-aligned
 // and the pages from addr to addr+sz must already be mapped.
 int
-loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)
-{
-  uint i, pa, n;
-  pte_t *pte;
-
-  if((uint) addr % PGSIZE != 0)
-    panic("loaduvm: addr must be page aligned");
-  for(i = 0; i < sz; i += PGSIZE){
-    if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
-      panic("loaduvm: address should exist");
-    pa = PTE_ADDR(*pte);
-    if(sz - i < PGSIZE)
-      n = sz - i;
-    else
-      n = PGSIZE;
-    if(readi(ip, P2V(pa), offset+i, n) != n)
-      return -1;
-  }
-  return 0;
+loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz) {
+    uint i, pa, n;
+    pte_t *pte;
+
+    if ((uint) addr % PGSIZE != 0)
+        panic("loaduvm: addr must be page aligned");
+    for (i = 0; i < sz; i += PGSIZE) {
+        if ((pte = walkpgdir(pgdir, addr + i, 0)) == 0)
+            panic("loaduvm: address should exist");
+        pa = PTE_ADDR(*pte);
+        if (sz - i < PGSIZE)
+            n = sz - i;
+        else
+            n = PGSIZE;
+        if (readi(ip, P2V(pa), offset + i, n) != n)
+            return -1;
+    }
+    return 0;
 }
 
 // Allocate page tables and physical memory to grow process from oldsz to
 // newsz, which need not be page aligned.  Returns new size or 0 on error.
 int
-allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-{
-  char *mem;
-  uint a;
-
-  if(newsz >= KERNBASE)
-    return 0;
-  if(newsz < oldsz)
-    return oldsz;
-
-  a = PGROUNDUP(oldsz);
-  for(; a < newsz; a += PGSIZE){
-    mem = kalloc();
-    if(mem == 0){
-      cprintf("allocuvm out of memory\n");
-      deallocuvm(pgdir, newsz, oldsz);
-      return 0;
-    }
-    memset(mem, 0, PGSIZE);
-    if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
-      cprintf("allocuvm out of memory (2)\n");
-      deallocuvm(pgdir, newsz, oldsz);
-      kfree(mem);
-      return 0;
+allocuvm(pde_t *pgdir, uint oldsz, uint newsz) {
+    char *mem;
+    uint a;
+
+    if (newsz >= KERNBASE)
+        return 0;
+    if (newsz < oldsz)
+        return oldsz;
+
+    a = PGROUNDUP(oldsz);
+    for (; a < newsz; a += PGSIZE) {
+        mem = kalloc();
+        if (mem == 0) {
+            cprintf("allocuvm out of memory\n");
+            deallocuvm(pgdir, newsz, oldsz);
+            return 0;
+        }
+        memset(mem, 0, PGSIZE);
+        if (mappages(pgdir, (char *) a, PGSIZE, V2P(mem), PTE_W | PTE_U) < 0) {
+            cprintf("allocuvm out of memory (2)\n");
+            deallocuvm(pgdir, newsz, oldsz);
+            kfree(mem);
+            return 0;
+        }
     }
-  }
-  return newsz;
+    return newsz;
 }
 
 // Deallocate user pages to bring the process size from oldsz to
@@ -253,136 +246,130 @@ allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
 // need to be less than oldsz.  oldsz can be larger than the actual
 // process size.  Returns the new process size.
 int
-deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-{
-  pte_t *pte;
-  uint a, pa;
-
-  if(newsz >= oldsz)
-    return oldsz;
-
-  a = PGROUNDUP(newsz);
-  for(; a  < oldsz; a += PGSIZE){
-    pte = walkpgdir(pgdir, (char*)a, 0);
-    if(!pte)
-      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
-    else if((*pte & PTE_P) != 0){
-      pa = PTE_ADDR(*pte);
-      if(pa == 0)
-        panic("kfree");
-      char *v = P2V(pa);
-      kfree(v);
-      *pte = 0;
+deallocuvm(pde_t *pgdir, uint oldsz, uint newsz) {
+    pte_t *pte;
+    uint a, pa;
+
+    if (newsz >= oldsz)
+        return oldsz;
+
+    a = PGROUNDUP(newsz);
+    for (; a < oldsz; a += PGSIZE) {
+        pte = walkpgdir(pgdir, (char *) a, 0);
+        if (!pte)
+            a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
+        else if ((*pte & PTE_P) != 0) {
+            pa = PTE_ADDR(*pte);
+            if (pa == 0)
+                panic("kfree");
+            char *v = P2V(pa);
+            kfree(v);
+            *pte = 0;
+        }
     }
-  }
-  return newsz;
+    return newsz;
 }
 
 // Free a page table and all the physical memory pages
 // in the user part.
 void
-freevm(pde_t *pgdir)
-{
-  uint i;
-
-  if(pgdir == 0)
-    panic("freevm: no pgdir");
-  deallocuvm(pgdir, KERNBASE, 0);
-  for(i = 0; i < NPDENTRIES; i++){
-    if(pgdir[i] & PTE_P){
-      char * v = P2V(PTE_ADDR(pgdir[i]));
-      kfree(v);
+freevm(pde_t *pgdir) {
+    uint i;
+
+    if (pgdir == 0)
+        panic("freevm: no pgdir");
+    deallocuvm(pgdir, KERNBASE, 0);
+    for (i = 0; i < NPDENTRIES; i++) {
+        if (pgdir[i] & PTE_P) {
+            char *v = P2V(PTE_ADDR(pgdir[i]));
+            kfree(v);
+        }
     }
-  }
-  kfree((char*)pgdir);
+    kfree((char *) pgdir);
 }
 
 // Clear PTE_U on a page. Used to create an inaccessible
 // page beneath the user stack.
 void
-clearpteu(pde_t *pgdir, char *uva)
-{
-  pte_t *pte;
-
-  pte = walkpgdir(pgdir, uva, 0);
-  if(pte == 0)
-    panic("clearpteu");
-  *pte &= ~PTE_U;
+clearpteu(pde_t *pgdir, char *uva) {
+    pte_t *pte;
+
+    pte = walkpgdir(pgdir, uva, 0);
+    if (pte == 0)
+        panic("clearpteu");
+    *pte &= ~PTE_U;
 }
 
 // Given a parent process's page table, create a copy
 // of it for a child.
-pde_t*
-copyuvm(pde_t *pgdir, uint sz)
-{
-  pde_t *d;
-  pte_t *pte;
-  uint pa, i, flags;
-  char *mem;
-
-  if((d = setupkvm()) == 0)
-    return 0;
-  for(i = 0; i < sz; i += PGSIZE){
-    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
-      panic("copyuvm: pte should exist");
-    if(!(*pte & PTE_P))
-      panic("copyuvm: page not present");
-    pa = PTE_ADDR(*pte);
-    flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
-      goto bad;
-    memmove(mem, (char*)P2V(pa), PGSIZE);
-    if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0) {
-      kfree(mem);
-      goto bad;
+pde_t *
+copyuvm(pde_t *pgdir, uint sz) {
+    pde_t *d;
+    pte_t *pte;
+    uint pa, i, flags;
+    char *mem;
+
+    if ((d = setupkvm()) == 0)
+        return 0;
+    for (i = 0; i < sz; i += PGSIZE) {
+        if ((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
+            panic("copyuvm: pte should exist");
+        if (!(*pte & PTE_P))
+            panic("copyuvm: page not present");
+        pa = PTE_ADDR(*pte);
+        flags = PTE_FLAGS(*pte);
+        if ((mem = kalloc()) == 0)
+            goto bad;
+        memmove(mem, (char *) P2V(pa), PGSIZE);
+        if (mappages(d, (void *) i, PGSIZE, V2P(mem), flags) < 0) {
+            kfree(mem);
+            goto bad;
+        }
     }
-  }
-  return d;
+    return d;
 
-bad:
-  freevm(d);
-  return 0;
+    bad:
+    freevm(d);
+    return 0;
 }
 
 //PAGEBREAK!
 // Map user virtual address to kernel address.
-char*
-uva2ka(pde_t *pgdir, char *uva)
-{
-  pte_t *pte;
-
-  pte = walkpgdir(pgdir, uva, 0);
-  if((*pte & PTE_P) == 0)
-    return 0;
-  if((*pte & PTE_U) == 0)
-    return 0;
-  return (char*)P2V(PTE_ADDR(*pte));
+char *
+uva2ka(pde_t *pgdir, char *uva) {
+    pte_t *pte;
+
+    pte = walkpgdir(pgdir, uva, 0);
+    if ((*pte & PTE_P) == 0)
+        return 0;
+    if ((*pte & PTE_U) == 0)
+        return 0;
+    return (char *) P2V(PTE_ADDR(*pte));
 }
 
 // Copy len bytes from p to user address va in page table pgdir.
 // Most useful when pgdir is not the current page table.
 // uva2ka ensures this only works for PTE_U pages.
 int
-copyout(pde_t *pgdir, uint va, void *p, uint len)
-{
-  char *buf, *pa0;
-  uint n, va0;
-
-  buf = (char*)p;
-  while(len > 0){
-    va0 = (uint)PGROUNDDOWN(va);
-    pa0 = uva2ka(pgdir, (char*)va0);
-    if(pa0 == 0)
-      return -1;
-    n = PGSIZE - (va - va0);
-    if(n > len)
-      n = len;
-    memmove(pa0 + (va - va0), buf, n);
-    len -= n;
-    buf += n;
-    va = va0 + PGSIZE;
-  }
-  return 0;
+copyout(pde_t *pgdir, uint va, void *p, uint len) {
+    char *buf, *pa0;
+    uint n, va0;
+
+    buf = (char *) p;
+    while (len > 0) {
+        va0 = (uint) PGROUNDDOWN(va);
+        pa0 = uva2ka(pgdir, (char *) va0);
+        if (pa0 == 0)
+            return -1;
+        n = PGSIZE - (va - va0);
+        if (n > len)
+            n = len;
+        memmove(pa0 + (va - va0), buf, n);
+        len -= n;
+        buf += n;
+        va = va0 + PGSIZE;
+    }
+    return 0;
 }
 
 //PAGEBREAK!
